!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ACTIVE_OBJECT_ENGINE_H	active_object_engine.h	2;"	d
ActiveObjectEngine	active_object_engine.h	/^typedef struct _ActiveObjectEngine ActiveObjectEngine;$/;"	t	typeref:struct:_ActiveObjectEngine
COMMAND_H	command_interface.h	2;"	d
CommandDestroy	command_interface.h	/^typedef void (*CommandDestroy)(CommandInterface* thiz);$/;"	t
CommandExecute	command_interface.h	/^typedef Ret (*CommandExecute)(CommandInterface* thiz);$/;"	t
CommandInterface	command_interface.h	/^typedef struct _CommandInterface CommandInterface;$/;"	t	typeref:struct:_CommandInterface
DECLES_BEGIN	typedef.h	33;"	d
DECLES_BEGIN	typedef.h	36;"	d
DECLES_END	typedef.h	34;"	d
DECLES_END	typedef.h	37;"	d
DECLES_PRIV	typedef.h	21;"	d
DLIST_H	dlist.h	36;"	d
DLIST_ITERATOR_H	dlist_iterator.h	2;"	d
DList	dlist.h	/^typedef struct _DList DList;$/;"	t	typeref:struct:_DList
DListNode	dlist.c	/^}DListNode;$/;"	t	typeref:struct:_DListNode	file:
DataCompareFunc	typedef.h	/^typedef int      (*DataCompareFunc)(void* ctx, void* data);$/;"	t
DataDestroyFunc	typedef.h	/^typedef void     (*DataDestroyFunc)(void* ctx, void* data);$/;"	t
DataHashFunc	typedef.h	/^typedef int       (*DataHashFunc)(void* data);$/;"	t
DataVisitFunc	typedef.h	/^typedef Ret      (*DataVisitFunc)(void* ctx, void* data);$/;"	t
ITERATOR_H	iterator.h	2;"	d
Iterator	iterator.h	/^typedef struct _Iterator Iterator;$/;"	t	typeref:struct:_Iterator
IteratorAdvanceFunc	iterator.h	/^typedef Ret  (*IteratorAdvanceFunc)(Iterator* thiz, int offset);$/;"	t
IteratorCloneFunc	iterator.h	/^typedef Ret  (*IteratorCloneFunc)(Iterator* thiz, Iterator** cloned);$/;"	t
IteratorDestroyFunc	iterator.h	/^typedef void (*IteratorDestroyFunc)(Iterator* thiz);$/;"	t
IteratorGetFunc	iterator.h	/^typedef Ret  (*IteratorGetFunc)(Iterator* thiz, void** data);$/;"	t
IteratorNextFunc	iterator.h	/^typedef Ret  (*IteratorNextFunc)(Iterator* thiz);$/;"	t
IteratorOffsetFunc	iterator.h	/^typedef int  (*IteratorOffsetFunc)(Iterator* thiz);$/;"	t
IteratorPrevFunc	iterator.h	/^typedef Ret  (*IteratorPrevFunc)(Iterator* thiz);$/;"	t
IteratorSetFunc	iterator.h	/^typedef Ret  (*IteratorSetFunc)(Iterator* thiz, void* data);$/;"	t
MSG	sleep_command.c	88;"	d	file:
NR	dlist.c	427;"	d	file:
PrivInfo	dlist_iterator.c	/^}PrivInfo;$/;"	t	typeref:struct:_PrivInfo	file:
PrivInfo	sleep_command.c	/^} PrivInfo;$/;"	t	typeref:struct:__anon1	file:
PrivInfo	type_command.c	/^} PrivInfo;$/;"	t	typeref:struct:__anon2	file:
RET_FAIL	typedef.h	/^	RET_FAIL$/;"	e	enum:_Ret
RET_INVALID_PARAMS	typedef.h	/^	RET_INVALID_PARAMS,$/;"	e	enum:_Ret
RET_OK	typedef.h	/^	RET_OK,$/;"	e	enum:_Ret
RET_OOM	typedef.h	/^	RET_OOM,$/;"	e	enum:_Ret
RET_STOP	typedef.h	/^	RET_STOP,$/;"	e	enum:_Ret
Ret	typedef.h	/^} Ret;$/;"	t	typeref:enum:_Ret
SAFE_FREE	typedef.h	30;"	d
SLEEP_COMMAND_H	sleep_command.h	2;"	d
TYPE_COMMAND_H	type_command.h	2;"	d
_ActiveObjectEngine	active_object_engine.c	/^struct _ActiveObjectEngine {$/;"	s	file:
_CommandInterface	command_interface.h	/^struct _CommandInterface {$/;"	s
_DList	dlist.c	/^struct _DList$/;"	s	file:
_DListNode	dlist.c	/^typedef struct _DListNode$/;"	s	file:
_HW_TYPEDEF_H	typedef.h	5;"	d
_Iterator	iterator.h	/^struct _Iterator$/;"	s
_PrivInfo	dlist_iterator.c	/^typedef struct _PrivInfo$/;"	s	file:
_Ret	typedef.h	/^typedef enum _Ret $/;"	g
active_object_engine_add_command	active_object_engine.c	/^void active_object_engine_add_command(ActiveObjectEngine* thiz, CommandInterface* command)$/;"	f
active_object_engine_create	active_object_engine.c	/^ActiveObjectEngine* active_object_engine_create()$/;"	f
active_object_engine_destroy	active_object_engine.c	/^void active_object_engine_destroy(ActiveObjectEngine* thiz)$/;"	f
active_object_engine_run	active_object_engine.c	/^void active_object_engine_run(ActiveObjectEngine* thiz)$/;"	f
advance	iterator.h	/^	IteratorAdvanceFunc advance;$/;"	m	struct:_Iterator
clone	iterator.h	/^	IteratorCloneFunc   clone;$/;"	m	struct:_Iterator
command_destroy	command_interface.h	/^static inline void command_destroy(CommandInterface* thiz)$/;"	f
command_execute	command_interface.h	/^static inline Ret command_execute(CommandInterface* thiz)$/;"	f
commands_data_destroy	active_object_engine.c	/^static void commands_data_destroy(void* ctx, void* data) {$/;"	f	file:
commands_list	active_object_engine.c	/^	DList* commands_list;	$/;"	m	struct:_ActiveObjectEngine	file:
consumer	dlist.c	/^static void* consumer(void* param)$/;"	f	file:
cursor	dlist_iterator.c	/^	DListNode* cursor;$/;"	m	struct:_PrivInfo	file:
data	dlist.c	/^	void* data;$/;"	m	struct:_DListNode	file:
data_destroy	dlist.c	/^	DataDestroyFunc data_destroy;$/;"	m	struct:_DList	file:
data_destroy_ctx	dlist.c	/^	void* data_destroy_ctx;$/;"	m	struct:_DList	file:
destroy	command_interface.h	/^	CommandDestroy destroy;$/;"	m	struct:_CommandInterface
destroy	iterator.h	/^	IteratorDestroyFunc destroy;$/;"	m	struct:_Iterator
dlist	dlist_iterator.c	/^	DList* dlist;$/;"	m	struct:_PrivInfo	file:
dlist_append	dlist.c	/^Ret dlist_append(DList* thiz, void* data)$/;"	f
dlist_create	dlist.c	/^DList* dlist_create(DataDestroyFunc data_destroy, void* ctx)$/;"	f
dlist_create_node	dlist.c	/^static DListNode* dlist_create_node(DList* thiz, void* data)$/;"	f	file:
dlist_delete	dlist.c	/^Ret dlist_delete(DList* thiz, size_t index)$/;"	f
dlist_destroy	dlist.c	/^void dlist_destroy(DList* thiz)$/;"	f
dlist_destroy_data	dlist.c	/^static void dlist_destroy_data(DList* thiz, void* data)$/;"	f	file:
dlist_destroy_node	dlist.c	/^static void dlist_destroy_node(DList* thiz, DListNode* node)$/;"	f	file:
dlist_find	dlist.c	/^int      dlist_find(DList* thiz, DataCompareFunc cmp, void* ctx)$/;"	f
dlist_foreach	dlist.c	/^Ret dlist_foreach(DList* thiz, DataVisitFunc visit, void* ctx)$/;"	f
dlist_get_by_index	dlist.c	/^Ret dlist_get_by_index(DList* thiz, size_t index, void** data)$/;"	f
dlist_get_node	dlist.c	/^static DListNode* dlist_get_node(DList* thiz, size_t index, int fail_return_last)$/;"	f	file:
dlist_insert	dlist.c	/^Ret dlist_insert(DList* thiz, size_t index, void* data)$/;"	f
dlist_iterator_advance	dlist_iterator.c	/^static Ret  dlist_iterator_advance(Iterator* thiz, int offset)$/;"	f	file:
dlist_iterator_clone	dlist_iterator.c	/^static Ret  dlist_iterator_clone(Iterator* thiz, Iterator** cloned)$/;"	f	file:
dlist_iterator_create	dlist_iterator.c	/^Iterator* dlist_iterator_create(DList* dlist)$/;"	f
dlist_iterator_destroy	dlist_iterator.c	/^static void dlist_iterator_destroy(Iterator* thiz)$/;"	f	file:
dlist_iterator_get	dlist_iterator.c	/^static Ret  dlist_iterator_get(Iterator* thiz, void** data)$/;"	f	file:
dlist_iterator_next	dlist_iterator.c	/^static Ret  dlist_iterator_next(Iterator* thiz)$/;"	f	file:
dlist_iterator_offset	dlist_iterator.c	/^static int  dlist_iterator_offset(Iterator* thiz)$/;"	f	file:
dlist_iterator_prev	dlist_iterator.c	/^static Ret  dlist_iterator_prev(Iterator* thiz)$/;"	f	file:
dlist_iterator_set	dlist_iterator.c	/^static Ret  dlist_iterator_set(Iterator* thiz, void* data)$/;"	f	file:
dlist_length	dlist.c	/^size_t dlist_length(DList* thiz)$/;"	f
dlist_prepend	dlist.c	/^Ret dlist_prepend(DList* thiz, void* data)$/;"	f
dlist_set_by_index	dlist.c	/^Ret dlist_set_by_index(DList* thiz, size_t index, void* data)$/;"	f
execute	command_interface.h	/^	CommandExecute execute;$/;"	m	struct:_CommandInterface
first	dlist.c	/^	DListNode* first;$/;"	m	struct:_DList	file:
get	iterator.h	/^	IteratorGetFunc     get;$/;"	m	struct:_Iterator
iterator_advance	iterator.h	/^static inline Ret  iterator_advance(Iterator* thiz, int offset)$/;"	f
iterator_clone	iterator.h	/^static inline Ret  iterator_clone(Iterator* thiz, Iterator** cloned)$/;"	f
iterator_destroy	iterator.h	/^static inline void iterator_destroy(Iterator* thiz)$/;"	f
iterator_get	iterator.h	/^static inline Ret  iterator_get(Iterator* thiz, void** data)$/;"	f
iterator_next	iterator.h	/^static inline Ret  iterator_next(Iterator* thiz)$/;"	f
iterator_offset	iterator.h	/^static inline int  iterator_offset(Iterator* thiz)$/;"	f
iterator_prev	iterator.h	/^static inline Ret  iterator_prev(Iterator* thiz)$/;"	f
iterator_set	iterator.h	/^static inline Ret  iterator_set(Iterator* thiz, void* data)$/;"	f
mEng	sleep_command.c	/^	ActiveObjectEngine* mEng;$/;"	m	struct:__anon1	file:
mWakupCmd	sleep_command.c	/^	CommandInterface* mWakupCmd;$/;"	m	struct:__anon1	file:
main	dlist.c	/^int main(int argc, char* argv[])$/;"	f
main	sleep_command.c	/^int main(int argc, char* argv[])$/;"	f
ms_uptime	sleep_command.c	/^double ms_uptime(void)$/;"	f
msg	type_command.c	/^	char* msg;$/;"	m	struct:__anon2	file:
next	dlist.c	/^	struct _DListNode* next;$/;"	m	struct:_DListNode	typeref:struct:_DListNode::_DListNode	file:
next	iterator.h	/^	IteratorNextFunc    next;$/;"	m	struct:_Iterator
offset	dlist_iterator.c	/^	int offset;$/;"	m	struct:_PrivInfo	file:
offset	iterator.h	/^	IteratorOffsetFunc  offset;$/;"	m	struct:_Iterator
prev	dlist.c	/^	struct _DListNode* prev;$/;"	m	struct:_DListNode	typeref:struct:_DListNode::_DListNode	file:
prev	iterator.h	/^	IteratorPrevFunc    prev;$/;"	m	struct:_Iterator
priv	command_interface.h	/^	char priv[1];$/;"	m	struct:_CommandInterface
priv	iterator.h	/^	char priv[0];$/;"	m	struct:_Iterator
producer	dlist.c	/^static void* producer(void* param)$/;"	f	file:
reader	dlist.c	/^static void* reader(void* param)$/;"	f	file:
return_if_fail	typedef.h	23;"	d
return_val_if_fail	typedef.h	26;"	d
set	iterator.h	/^	IteratorSetFunc     set;$/;"	m	struct:_Iterator
single_thread_test	dlist.c	/^static void single_thread_test(void)$/;"	f	file:
sleep_command_create	sleep_command.c	/^CommandInterface* sleep_command_create(int milliseconds, ActiveObjectEngine* eng, $/;"	f
sleep_command_destroy	sleep_command.c	/^static void sleep_command_destroy(CommandInterface* thiz)$/;"	f	file:
sleep_command_execute	sleep_command.c	/^static Ret sleep_command_execute(CommandInterface* thiz) $/;"	f	file:
sleeptime	sleep_command.c	/^	long sleeptime;$/;"	m	struct:__anon1	file:
started	sleep_command.c	/^	int started;$/;"	m	struct:__anon1	file:
starttime	sleep_command.c	/^	long starttime;$/;"	m	struct:__anon1	file:
test_int_dlist	dlist.c	/^static void test_int_dlist(void)$/;"	f	file:
test_invalid_params	dlist.c	/^static void test_invalid_params(void)$/;"	f	file:
type_command_create	type_command.c	/^CommandInterface* type_command_create(char* msg)$/;"	f
type_command_destroy	type_command.c	/^static void type_command_destroy(CommandInterface* thiz)$/;"	f	file:
type_command_execute	type_command.c	/^static Ret type_command_execute(CommandInterface* thiz)$/;"	f	file:
