!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AAssetManager	include/utils/AssetManager.h	/^struct AAssetManager { };$/;"	s
ABS	utils/LinearTransform.cpp	/^template<class T> static inline T ABS(T x) { return (x < 0) ? -x : x; }$/;"	f	namespace:android
ACCESS_BUFFER	include/utils/Asset.h	/^        ACCESS_BUFFER,$/;"	e	enum:android::Asset::AccessMode
ACCESS_RANDOM	include/utils/Asset.h	/^        ACCESS_RANDOM,$/;"	e	enum:android::Asset::AccessMode
ACCESS_STREAMING	include/utils/Asset.h	/^        ACCESS_STREAMING,$/;"	e	enum:android::Asset::AccessMode
ACCESS_UNKNOWN	include/utils/Asset.h	/^        ACCESS_UNKNOWN = 0,$/;"	e	enum:android::Asset::AccessMode
ALREADY_EXISTS	include/utils/Errors.h	/^    ALREADY_EXISTS      = -EEXIST,$/;"	e	enum:android::__anon17
ALooper	include/utils/Looper.h	/^struct ALooper {$/;"	s
ANDROID_BASIC_TYPES_TRAITS	include/utils/TypeHelpers.h	71;"	d
ANDROID_BLOB_CACHE_H	include/utils/BlobCache.h	18;"	d
ANDROID_BUFFEREDTEXTOUTPUT_H	include/utils/BufferedTextOutput.h	18;"	d
ANDROID_CALLSTACK_H	include/utils/CallStack.h	18;"	d
ANDROID_DEBUG_H	include/utils/Debug.h	18;"	d
ANDROID_ERRORS_H	include/utils/Errors.h	18;"	d
ANDROID_FUNCTOR_H	include/utils/Functor.h	18;"	d
ANDROID_KEYED_VECTOR_H	include/utils/KeyedVector.h	18;"	d
ANDROID_PRIORITY_AUDIO	include/utils/threads.h	/^    ANDROID_PRIORITY_AUDIO          = -16,$/;"	e	enum:__anon7
ANDROID_PRIORITY_BACKGROUND	include/utils/threads.h	/^    ANDROID_PRIORITY_BACKGROUND     =  10,$/;"	e	enum:__anon7
ANDROID_PRIORITY_DEFAULT	include/utils/threads.h	/^    ANDROID_PRIORITY_DEFAULT        = ANDROID_PRIORITY_NORMAL,$/;"	e	enum:__anon7
ANDROID_PRIORITY_DISPLAY	include/utils/threads.h	/^    ANDROID_PRIORITY_DISPLAY        =  -4,$/;"	e	enum:__anon7
ANDROID_PRIORITY_FOREGROUND	include/utils/threads.h	/^    ANDROID_PRIORITY_FOREGROUND     =  -2,$/;"	e	enum:__anon7
ANDROID_PRIORITY_HIGHEST	include/utils/threads.h	/^    ANDROID_PRIORITY_HIGHEST        = -20,$/;"	e	enum:__anon7
ANDROID_PRIORITY_LESS_FAVORABLE	include/utils/threads.h	/^    ANDROID_PRIORITY_LESS_FAVORABLE = +1,$/;"	e	enum:__anon7
ANDROID_PRIORITY_LOWEST	include/utils/threads.h	/^    ANDROID_PRIORITY_LOWEST         =  19,$/;"	e	enum:__anon7
ANDROID_PRIORITY_MORE_FAVORABLE	include/utils/threads.h	/^    ANDROID_PRIORITY_MORE_FAVORABLE = -1,$/;"	e	enum:__anon7
ANDROID_PRIORITY_NORMAL	include/utils/threads.h	/^    ANDROID_PRIORITY_NORMAL         =   0,$/;"	e	enum:__anon7
ANDROID_PRIORITY_URGENT_AUDIO	include/utils/threads.h	/^    ANDROID_PRIORITY_URGENT_AUDIO   = -19,$/;"	e	enum:__anon7
ANDROID_PRIORITY_URGENT_DISPLAY	include/utils/threads.h	/^    ANDROID_PRIORITY_URGENT_DISPLAY =  HAL_PRIORITY_URGENT_DISPLAY,$/;"	e	enum:__anon7
ANDROID_REF_BASE_H	include/utils/RefBase.h	18;"	d
ANDROID_SHARED_BUFFER_H	include/utils/SharedBuffer.h	18;"	d
ANDROID_SINGLETON_STATIC_INSTANCE	include/utils/Singleton.h	66;"	d
ANDROID_SORTED_VECTOR_H	include/utils/SortedVector.h	18;"	d
ANDROID_STOPWATCH_H	include/utils/StopWatch.h	18;"	d
ANDROID_STRING16_H	include/utils/String16.h	18;"	d
ANDROID_STRING8_H	include/utils/String8.h	18;"	d
ANDROID_STRONG_POINTER_H	include/utils/StrongPointer.h	18;"	d
ANDROID_TEXTOUTPUT_H	include/utils/TextOutput.h	18;"	d
ANDROID_TGROUP_BG_NONINTERACT	include/utils/threads.h	/^    ANDROID_TGROUP_BG_NONINTERACT   = 1,$/;"	e	enum:__anon8
ANDROID_TGROUP_DEFAULT	include/utils/threads.h	/^    ANDROID_TGROUP_DEFAULT          = 0,$/;"	e	enum:__anon8
ANDROID_TGROUP_FG_BOOST	include/utils/threads.h	/^    ANDROID_TGROUP_FG_BOOST         = 2,$/;"	e	enum:__anon8
ANDROID_TGROUP_MAX	include/utils/threads.h	/^    ANDROID_TGROUP_MAX              = ANDROID_TGROUP_FG_BOOST,$/;"	e	enum:__anon8
ANDROID_TYPE_HELPERS_H	include/utils/TypeHelpers.h	18;"	d
ANDROID_UNICODE_H	include/utils/Unicode.h	18;"	d
ANDROID_UTILS_ATOMIC_H	include/utils/Atomic.h	18;"	d
ANDROID_UTILS_FLATTENABLE_H	include/utils/Flattenable.h	18;"	d
ANDROID_UTILS_GENERATION_CACHE_H	include/utils/GenerationCache.h	18;"	d
ANDROID_UTILS_SINGLETON_H	include/utils/Singleton.h	18;"	d
ANDROID_UTILS_SYSTEMCLOCK_H	include/utils/SystemClock.h	18;"	d
ANDROID_VECTOR_H	include/utils/Vector.h	18;"	d
ANDROID_VECTOR_IMPL_H	include/utils/VectorImpl.h	18;"	d
ASHMEM_GET_NAME	include/utils/ashmem.h	31;"	d
ASHMEM_GET_PROT_MASK	include/utils/ashmem.h	35;"	d
ASHMEM_GET_SIZE	include/utils/ashmem.h	33;"	d
ASHMEM_ISPINNED	include/utils/ashmem.h	38;"	d
ASHMEM_NAME_DEF	include/utils/ashmem.h	18;"	d
ASHMEM_NAME_LEN	include/utils/ashmem.h	16;"	d
ASHMEM_NOT_REAPED	include/utils/ashmem.h	21;"	d
ASHMEM_NOW_PINNED	include/utils/ashmem.h	26;"	d
ASHMEM_NOW_UNPINNED	include/utils/ashmem.h	25;"	d
ASHMEM_PIN	include/utils/ashmem.h	36;"	d
ASHMEM_PURGE_ALL_CACHES	include/utils/ashmem.h	39;"	d
ASHMEM_SET_NAME	include/utils/ashmem.h	30;"	d
ASHMEM_SET_PROT_MASK	include/utils/ashmem.h	34;"	d
ASHMEM_SET_SIZE	include/utils/ashmem.h	32;"	d
ASHMEM_UNPIN	include/utils/ashmem.h	37;"	d
ASHMEM_WAS_REAPED	include/utils/ashmem.h	22;"	d
ATTR_FEW	include/utils/ResourceTypes.h	/^        ATTR_FEW = Res_MAKEINTERNAL(8),$/;"	e	enum:android::ResTable_map::__anon74
ATTR_L10N	include/utils/ResourceTypes.h	/^        ATTR_L10N = Res_MAKEINTERNAL(3),$/;"	e	enum:android::ResTable_map::__anon74
ATTR_MANY	include/utils/ResourceTypes.h	/^        ATTR_MANY = Res_MAKEINTERNAL(9)$/;"	e	enum:android::ResTable_map::__anon74
ATTR_MAX	include/utils/ResourceTypes.h	/^        ATTR_MAX = Res_MAKEINTERNAL(2),$/;"	e	enum:android::ResTable_map::__anon74
ATTR_MIN	include/utils/ResourceTypes.h	/^        ATTR_MIN = Res_MAKEINTERNAL(1),$/;"	e	enum:android::ResTable_map::__anon74
ATTR_ONE	include/utils/ResourceTypes.h	/^        ATTR_ONE = Res_MAKEINTERNAL(6),$/;"	e	enum:android::ResTable_map::__anon74
ATTR_OTHER	include/utils/ResourceTypes.h	/^        ATTR_OTHER = Res_MAKEINTERNAL(4),$/;"	e	enum:android::ResTable_map::__anon74
ATTR_TWO	include/utils/ResourceTypes.h	/^        ATTR_TWO = Res_MAKEINTERNAL(7),$/;"	e	enum:android::ResTable_map::__anon74
ATTR_TYPE	include/utils/ResourceTypes.h	/^        ATTR_TYPE = Res_MAKEINTERNAL(0),$/;"	e	enum:android::ResTable_map::__anon74
ATTR_ZERO	include/utils/ResourceTypes.h	/^        ATTR_ZERO = Res_MAKEINTERNAL(5),$/;"	e	enum:android::ResTable_map::__anon74
AccessMode	include/utils/Asset.h	/^    typedef enum AccessMode {$/;"	g	class:android::Asset
AccessMode	include/utils/Asset.h	/^    } AccessMode;$/;"	t	class:android::Asset	typeref:enum:android::Asset::AccessMode
AccessMode	include/utils/AssetManager.h	/^    typedef Asset::AccessMode AccessMode;       \/\/ typing shortcut$/;"	t	class:android::AssetManager
Accessor	include/utils/ResourceTypes.h	/^    class Accessor$/;"	c	class:android::ResTable
Asset	include/utils/Asset.h	/^class Asset {$/;"	c	namespace:android
Asset	utils/Asset.cpp	/^Asset::Asset(void)$/;"	f	class:Asset
AssetDir	include/utils/AssetDir.h	/^    AssetDir(void)$/;"	f	class:android::AssetDir
AssetDir	include/utils/AssetDir.h	/^class AssetDir {$/;"	c	namespace:android
AssetManager	include/utils/AssetManager.h	/^class AssetManager : public AAssetManager {$/;"	c	namespace:android
AssetManager	utils/AssetManager.cpp	/^AssetManager::AssetManager(CacheMode cacheMode)$/;"	f	class:AssetManager
AutoMutex	include/utils/threads.h	/^typedef Mutex::Autolock AutoMutex;$/;"	t	namespace:android
AutoRLock	include/utils/threads.h	/^        inline AutoRLock(RWLock& rwlock) : mLock(rwlock)  { mLock.readLock(); }$/;"	f	class:android::RWLock::AutoRLock
AutoRLock	include/utils/threads.h	/^    class AutoRLock {$/;"	c	class:android::RWLock
AutoWLock	include/utils/threads.h	/^        inline AutoWLock(RWLock& rwlock) : mLock(rwlock)  { mLock.writeLock(); }$/;"	f	class:android::RWLock::AutoWLock
AutoWLock	include/utils/threads.h	/^    class AutoWLock {$/;"	c	class:android::RWLock
Autolock	include/utils/threads.h	/^        inline Autolock(Mutex& mutex) : mLock(mutex)  { mLock.lock(); }$/;"	f	class:android::Mutex::Autolock
Autolock	include/utils/threads.h	/^        inline Autolock(Mutex* mutex) : mLock(*mutex) { mLock.lock(); }$/;"	f	class:android::Mutex::Autolock
Autolock	include/utils/threads.h	/^    class Autolock {$/;"	c	class:android::Mutex
BACKUP_HEADER_ENTITY_V1	include/utils/BackupHelpers.h	/^    BACKUP_HEADER_ENTITY_V1 = 0x61746144, \/\/ Data (little endian)$/;"	e	enum:android::__anon30
BAD_DOCUMENT	include/utils/ResourceTypes.h	/^        BAD_DOCUMENT = -1,$/;"	e	enum:android::ResXMLParser::event_code_t
BAD_INDEX	include/utils/Errors.h	/^    BAD_INDEX           = -EOVERFLOW,$/;"	e	enum:android::__anon17
BAD_TYPE	include/utils/Errors.h	/^    BAD_TYPE            = 0x80000001,$/;"	e	enum:android::__anon17
BAD_VALUE	include/utils/Errors.h	/^    BAD_VALUE           = -EINVAL,$/;"	e	enum:android::__anon17
BackupDataReader	include/utils/BackupHelpers.h	/^class BackupDataReader$/;"	c	namespace:android
BackupDataReader	utils/BackupData.cpp	/^BackupDataReader::BackupDataReader(int fd)$/;"	f	class:android::BackupDataReader
BackupDataWriter	include/utils/BackupHelpers.h	/^class BackupDataWriter$/;"	c	namespace:android
BackupDataWriter	utils/BackupData.cpp	/^BackupDataWriter::BackupDataWriter(int fd)$/;"	f	class:android::BackupDataWriter
BitSet32	include/utils/BitSet.h	/^    explicit inline BitSet32(uint32_t value) : value(value) { }$/;"	f	struct:android::BitSet32
BitSet32	include/utils/BitSet.h	/^    inline BitSet32() : value(0) { }$/;"	f	struct:android::BitSet32
BitSet32	include/utils/BitSet.h	/^struct BitSet32 {$/;"	s	namespace:android
Blob	include/utils/BlobCache.h	/^    class Blob : public RefBase {$/;"	c	class:android::BlobCache
Blob	utils/BlobCache.cpp	/^BlobCache::Blob::Blob(const void* data, size_t size, bool copyData):$/;"	f	class:android::BlobCache::Blob
BlobCache	include/utils/BlobCache.h	/^class BlobCache : public RefBase {$/;"	c	namespace:android
BlobCache	utils/BlobCache.cpp	/^BlobCache::BlobCache(size_t maxKeySize, size_t maxValueSize, size_t maxTotalSize):$/;"	f	class:android::BlobCache
BlobCacheTest	utils/tests/BlobCache_test.cpp	/^class BlobCacheTest : public ::testing::Test {$/;"	c	namespace:android	file:
BnMemTest	demo/MemoryHeap/IMemTest.h	/^class BnMemTest : public BnInterface<IMemTest>$/;"	c	namespace:android
BpMemTest	demo/MemoryHeap/IMemTest.cpp	/^	BpMemTest(const sp<IBinder>& impl)$/;"	f	class:android::BpMemTest
BpMemTest	demo/MemoryHeap/IMemTest.cpp	/^class BpMemTest : public BpInterface<IMemTest>$/;"	c	namespace:android	file:
BufferState	utils/BufferedTextOutput.cpp	/^    BufferState(int32_t _seq)$/;"	f	struct:android::BufferedTextOutput::BufferState
BufferState	utils/BufferedTextOutput.cpp	/^struct BufferedTextOutput::BufferState : public RefBase$/;"	s	class:android::BufferedTextOutput	file:
BufferedTextOutput	include/utils/BufferedTextOutput.h	/^class BufferedTextOutput : public TextOutput$/;"	c	namespace:android
BufferedTextOutput	utils/BufferedTextOutput.cpp	/^BufferedTextOutput::BufferedTextOutput(uint32_t flags)$/;"	f	class:android::BufferedTextOutput
Bundle	include/utils/TextOutput.h	/^        inline Bundle(TextOutput& to) : mTO(to) { to.pushBundle(); }$/;"	f	class:android::TextOutput::Bundle
Bundle	include/utils/TextOutput.h	/^    class Bundle {$/;"	c	class:android::TextOutput
CACHE_DEFER	include/utils/AssetManager.h	/^        CACHE_DEFER,        \/\/ construct cache as pieces are needed$/;"	e	enum:android::AssetManager::CacheMode
CACHE_OFF	include/utils/AssetManager.h	/^        CACHE_OFF,          \/\/ don't try to cache file locations$/;"	e	enum:android::AssetManager::CacheMode
CACHE_UNKNOWN	include/utils/AssetManager.h	/^        CACHE_UNKNOWN = 0,$/;"	e	enum:android::AssetManager::CacheMode
CHAR16_ARRAY_EQ	utils/ResourceTypes.cpp	4449;"	d	file:
CHAR16_TO_CSTR	utils/ResourceTypes.cpp	4447;"	d	file:
CHECK_SIZE	utils/BackupData.cpp	203;"	d	file:
COMPARE	include/utils/StrongPointer.h	111;"	d
COMPARE	include/utils/StrongPointer.h	36;"	d
COMPARE_WEAK	include/utils/RefBase.h	289;"	d
COMPARE_WEAK	include/utils/RefBase.h	37;"	d
COMPILE_TIME_ASSERT	include/utils/Debug.h	29;"	d
COMPILE_TIME_ASSERT_FUNCTION_SCOPE	include/utils/Debug.h	32;"	d
COMPLEX_MANTISSA_MASK	include/utils/ResourceTypes.h	/^        COMPLEX_MANTISSA_MASK = 0xffffff$/;"	e	enum:android::Res_value::__anon38
COMPLEX_MANTISSA_SHIFT	include/utils/ResourceTypes.h	/^        COMPLEX_MANTISSA_SHIFT = 8,$/;"	e	enum:android::Res_value::__anon38
COMPLEX_RADIX_0p23	include/utils/ResourceTypes.h	/^        COMPLEX_RADIX_0p23 = 3,$/;"	e	enum:android::Res_value::__anon38
COMPLEX_RADIX_16p7	include/utils/ResourceTypes.h	/^        COMPLEX_RADIX_16p7 = 1,$/;"	e	enum:android::Res_value::__anon38
COMPLEX_RADIX_23p0	include/utils/ResourceTypes.h	/^        COMPLEX_RADIX_23p0 = 0,$/;"	e	enum:android::Res_value::__anon38
COMPLEX_RADIX_8p15	include/utils/ResourceTypes.h	/^        COMPLEX_RADIX_8p15 = 2,$/;"	e	enum:android::Res_value::__anon38
COMPLEX_RADIX_MASK	include/utils/ResourceTypes.h	/^        COMPLEX_RADIX_MASK = 0x3,$/;"	e	enum:android::Res_value::__anon38
COMPLEX_RADIX_SHIFT	include/utils/ResourceTypes.h	/^        COMPLEX_RADIX_SHIFT = 4,$/;"	e	enum:android::Res_value::__anon38
COMPLEX_UNIT_DIP	include/utils/ResourceTypes.h	/^        COMPLEX_UNIT_DIP = 1,$/;"	e	enum:android::Res_value::__anon38
COMPLEX_UNIT_FRACTION	include/utils/ResourceTypes.h	/^        COMPLEX_UNIT_FRACTION = 0,$/;"	e	enum:android::Res_value::__anon38
COMPLEX_UNIT_FRACTION_PARENT	include/utils/ResourceTypes.h	/^        COMPLEX_UNIT_FRACTION_PARENT = 1,$/;"	e	enum:android::Res_value::__anon38
COMPLEX_UNIT_IN	include/utils/ResourceTypes.h	/^        COMPLEX_UNIT_IN = 4,$/;"	e	enum:android::Res_value::__anon38
COMPLEX_UNIT_MASK	include/utils/ResourceTypes.h	/^        COMPLEX_UNIT_MASK = 0xf,$/;"	e	enum:android::Res_value::__anon38
COMPLEX_UNIT_MM	include/utils/ResourceTypes.h	/^        COMPLEX_UNIT_MM = 5,$/;"	e	enum:android::Res_value::__anon38
COMPLEX_UNIT_PT	include/utils/ResourceTypes.h	/^        COMPLEX_UNIT_PT = 3,$/;"	e	enum:android::Res_value::__anon38
COMPLEX_UNIT_PX	include/utils/ResourceTypes.h	/^        COMPLEX_UNIT_PX = 0,$/;"	e	enum:android::Res_value::__anon38
COMPLEX_UNIT_SHIFT	include/utils/ResourceTypes.h	/^        COMPLEX_UNIT_SHIFT = 0,$/;"	e	enum:android::Res_value::__anon38
COMPLEX_UNIT_SP	include/utils/ResourceTypes.h	/^        COMPLEX_UNIT_SP = 2,$/;"	e	enum:android::Res_value::__anon38
CONFIG_DENSITY	include/utils/ResourceTypes.h	/^        CONFIG_DENSITY = ACONFIGURATION_DENSITY,$/;"	e	enum:android::ResTable_config::__anon70
CONFIG_KEYBOARD	include/utils/ResourceTypes.h	/^        CONFIG_KEYBOARD = ACONFIGURATION_KEYBOARD,$/;"	e	enum:android::ResTable_config::__anon70
CONFIG_KEYBOARD_HIDDEN	include/utils/ResourceTypes.h	/^        CONFIG_KEYBOARD_HIDDEN = ACONFIGURATION_KEYBOARD_HIDDEN,$/;"	e	enum:android::ResTable_config::__anon70
CONFIG_LOCALE	include/utils/ResourceTypes.h	/^        CONFIG_LOCALE = ACONFIGURATION_LOCALE,$/;"	e	enum:android::ResTable_config::__anon70
CONFIG_MCC	include/utils/ResourceTypes.h	/^        CONFIG_MCC = ACONFIGURATION_MCC,$/;"	e	enum:android::ResTable_config::__anon70
CONFIG_MNC	include/utils/ResourceTypes.h	/^        CONFIG_MNC = ACONFIGURATION_MCC,$/;"	e	enum:android::ResTable_config::__anon70
CONFIG_NAVIGATION	include/utils/ResourceTypes.h	/^        CONFIG_NAVIGATION = ACONFIGURATION_NAVIGATION,$/;"	e	enum:android::ResTable_config::__anon70
CONFIG_ORIENTATION	include/utils/ResourceTypes.h	/^        CONFIG_ORIENTATION = ACONFIGURATION_ORIENTATION,$/;"	e	enum:android::ResTable_config::__anon70
CONFIG_SCREEN_LAYOUT	include/utils/ResourceTypes.h	/^        CONFIG_SCREEN_LAYOUT = ACONFIGURATION_SCREEN_LAYOUT,$/;"	e	enum:android::ResTable_config::__anon70
CONFIG_SCREEN_SIZE	include/utils/ResourceTypes.h	/^        CONFIG_SCREEN_SIZE = ACONFIGURATION_SCREEN_SIZE,$/;"	e	enum:android::ResTable_config::__anon70
CONFIG_SMALLEST_SCREEN_SIZE	include/utils/ResourceTypes.h	/^        CONFIG_SMALLEST_SCREEN_SIZE = ACONFIGURATION_SMALLEST_SCREEN_SIZE,$/;"	e	enum:android::ResTable_config::__anon70
CONFIG_TOUCHSCREEN	include/utils/ResourceTypes.h	/^        CONFIG_TOUCHSCREEN = ACONFIGURATION_TOUCHSCREEN,$/;"	e	enum:android::ResTable_config::__anon70
CONFIG_UI_MODE	include/utils/ResourceTypes.h	/^        CONFIG_UI_MODE = ACONFIGURATION_UI_MODE$/;"	e	enum:android::ResTable_config::__anon70
CONFIG_VERSION	include/utils/ResourceTypes.h	/^        CONFIG_VERSION = ACONFIGURATION_VERSION,$/;"	e	enum:android::ResTable_config::__anon70
CONST_ITERATOR	include/utils/List.h	/^    struct CONST_ITERATOR {$/;"	s	class:android::List
CURRENT_METADATA_VERSION	utils/BackupHelpers.cpp	/^const static int CURRENT_METADATA_VERSION = 1;$/;"	m	namespace:android	file:
CacheEntry	include/utils/BlobCache.h	/^    class CacheEntry {$/;"	c	class:android::BlobCache
CacheEntry	utils/BlobCache.cpp	/^BlobCache::CacheEntry::CacheEntry() {$/;"	f	class:android::BlobCache::CacheEntry
CacheEntry	utils/BlobCache.cpp	/^BlobCache::CacheEntry::CacheEntry(const CacheEntry& ce):$/;"	f	class:android::BlobCache::CacheEntry
CacheEntry	utils/BlobCache.cpp	/^BlobCache::CacheEntry::CacheEntry(const sp<Blob>& key, const sp<Blob>& value):$/;"	f	class:android::BlobCache::CacheEntry
CacheMode	include/utils/AssetManager.h	/^    typedef enum CacheMode {$/;"	g	class:android::AssetManager
CacheMode	include/utils/AssetManager.h	/^    } CacheMode;$/;"	t	class:android::AssetManager	typeref:enum:android::AssetManager::CacheMode
CallStack	include/utils/CallStack.h	/^class CallStack$/;"	c	namespace:android
CallStack	utils/CallStack.cpp	/^CallStack::CallStack()$/;"	f	class:android::CallStack
CallStack	utils/CallStack.cpp	/^CallStack::CallStack(const CallStack& rhs)$/;"	f	class:android::CallStack
CallbackHandler	utils/tests/Looper_test.cpp	/^class CallbackHandler {$/;"	c	namespace:android	file:
Capacity	include/utils/GenerationCache.h	/^    enum Capacity {$/;"	g	class:android::GenerationCache
CompileTimeAssert	include/utils/Debug.h	/^template<> struct CompileTimeAssert<true> {};$/;"	s	namespace:android
CompileTimeIfElse	include/utils/Debug.h	/^struct CompileTimeIfElse<false, LHS, RHS> { typedef RHS TYPE; };$/;"	s	namespace:android
CompileTimeIfElse	include/utils/Debug.h	/^struct CompileTimeIfElse<true,  LHS, RHS> { typedef LHS TYPE; };$/;"	s	namespace:android
Condition	include/utils/threads.h	/^class Condition {$/;"	c	namespace:android
Condition	include/utils/threads.h	/^inline Condition::Condition() {$/;"	f	class:android::Condition
Condition	include/utils/threads.h	/^inline Condition::Condition(int type) {$/;"	f	class:android::Condition
DATA_GOLDEN_FILE	utils/BackupHelpers.cpp	/^const unsigned char DATA_GOLDEN_FILE[] = {$/;"	m	namespace:android	file:
DATA_GOLDEN_FILE_SIZE	utils/BackupHelpers.cpp	/^const int DATA_GOLDEN_FILE_SIZE = sizeof(DATA_GOLDEN_FILE);$/;"	m	namespace:android	file:
DEAD_OBJECT	include/utils/Errors.h	/^    DEAD_OBJECT         = -EPIPE,$/;"	e	enum:android::__anon17
DEBUG	utils/BackupData.cpp	/^static const bool DEBUG = false;$/;"	m	namespace:android	file:
DEBUG_CALLBACKS	utils/Looper.cpp	14;"	d	file:
DEBUG_PARSER	utils/PropertyMap.cpp	26;"	d	file:
DEBUG_PARSER_PERFORMANCE	utils/PropertyMap.cpp	29;"	d	file:
DEBUG_POLL_AND_WAKE	utils/Looper.cpp	11;"	d	file:
DEBUG_REFS	utils/RefBase.cpp	36;"	d	file:
DEBUG_REFS_CALLSTACK_ENABLED	utils/RefBase.cpp	39;"	d	file:
DEBUG_REFS_ENABLED_BY_DEFAULT	utils/RefBase.cpp	38;"	d	file:
DEBUG_REFS_FATAL_SANITY_CHECKS	utils/RefBase.cpp	37;"	d	file:
DEBUG_TOKENIZER	utils/Tokenizer.cpp	29;"	d	file:
DENSITY_DEFAULT	include/utils/ResourceTypes.h	/^        DENSITY_DEFAULT = ACONFIGURATION_DENSITY_DEFAULT,$/;"	e	enum:android::ResTable_config::__anon47
DENSITY_HIGH	include/utils/ResourceTypes.h	/^        DENSITY_HIGH = ACONFIGURATION_DENSITY_HIGH,$/;"	e	enum:android::ResTable_config::__anon47
DENSITY_LOW	include/utils/ResourceTypes.h	/^        DENSITY_LOW = ACONFIGURATION_DENSITY_LOW,$/;"	e	enum:android::ResTable_config::__anon47
DENSITY_MEDIUM	include/utils/ResourceTypes.h	/^        DENSITY_MEDIUM = ACONFIGURATION_DENSITY_MEDIUM,$/;"	e	enum:android::ResTable_config::__anon47
DENSITY_NONE	include/utils/ResourceTypes.h	/^        DENSITY_NONE = ACONFIGURATION_DENSITY_NONE$/;"	e	enum:android::ResTable_config::__anon47
DENSITY_TV	include/utils/ResourceTypes.h	/^        DENSITY_TV = ACONFIGURATION_DENSITY_TV,$/;"	e	enum:android::ResTable_config::__anon47
DEVICE_BYTE_ORDER	include/utils/ByteOrder.h	51;"	d
DONTNEED	include/utils/FileMap.h	/^        NORMAL, RANDOM, SEQUENTIAL, WILLNEED, DONTNEED$/;"	e	enum:android::FileMap::MapAdvice
DefaultKeyedVector	include/utils/KeyedVector.h	/^DefaultKeyedVector<KEY,VALUE>::DefaultKeyedVector(const VALUE& defValue)$/;"	f	class:android::DefaultKeyedVector
DefaultKeyedVector	include/utils/KeyedVector.h	/^class DefaultKeyedVector : public KeyedVector<KEY, VALUE>$/;"	c	namespace:android
DelayedTask	utils/tests/TestHelpers.h	/^    DelayedTask(int delayMillis) : mDelayMillis(delayMillis) { }$/;"	f	class:android::DelayedTask
DelayedTask	utils/tests/TestHelpers.h	/^class DelayedTask : public Thread {$/;"	c	namespace:android
DelayedWake	utils/tests/Looper_test.cpp	/^    DelayedWake(int delayMillis, const sp<Looper> looper) :$/;"	f	class:android::DelayedWake
DelayedWake	utils/tests/Looper_test.cpp	/^class DelayedWake : public DelayedTask {$/;"	c	namespace:android	file:
DelayedWriteSignal	utils/tests/Looper_test.cpp	/^    DelayedWriteSignal(int delayMillis, Pipe* pipe) :$/;"	f	class:android::DelayedWriteSignal
DelayedWriteSignal	utils/tests/Looper_test.cpp	/^class DelayedWriteSignal : public DelayedTask {$/;"	c	namespace:android	file:
DurationTimer	include/utils/Timers.h	/^    DurationTimer() {}$/;"	f	class:android::DurationTimer
DurationTimer	include/utils/Timers.h	/^class DurationTimer {$/;"	c	namespace:android
END	include/utils/ResourceTypes.h	/^        END = 0xFFFFFFFF$/;"	e	enum:android::ResStringPool_span::__anon40
END_DOCUMENT	include/utils/ResourceTypes.h	/^        END_DOCUMENT = 1,$/;"	e	enum:android::ResXMLParser::event_code_t
END_NAMESPACE	include/utils/ResourceTypes.h	/^        END_NAMESPACE = RES_XML_END_NAMESPACE_TYPE,$/;"	e	enum:android::ResXMLParser::event_code_t
END_TAG	include/utils/ResourceTypes.h	/^        END_TAG = RES_XML_END_ELEMENT_TYPE,$/;"	e	enum:android::ResXMLParser::event_code_t
EPOLL_MAX_EVENTS	utils/Looper.cpp	/^static const int EPOLL_MAX_EVENTS = 16;$/;"	m	namespace:android	file:
EPOLL_SIZE_HINT	utils/Looper.cpp	/^static const int EPOLL_SIZE_HINT = 8;$/;"	m	namespace:android	file:
Entry	include/utils/GenerationCache.h	/^    Entry() { }$/;"	f	struct:android::Entry
Entry	include/utils/GenerationCache.h	/^    Entry(const Entry<EntryKey, EntryValue>& e):$/;"	f	struct:android::Entry
Entry	include/utils/GenerationCache.h	/^    Entry(sp<Entry<EntryKey, EntryValue> > e):$/;"	f	struct:android::Entry
Entry	include/utils/GenerationCache.h	/^struct Entry: public LightRefBase<Entry<EntryKey, EntryValue> > {$/;"	s	namespace:android
FAILED_TRANSACTION	include/utils/Errors.h	/^    FAILED_TRANSACTION  = 0x80000002,$/;"	e	enum:android::__anon17
FDS_NOT_ALLOWED	include/utils/Errors.h	/^    FDS_NOT_ALLOWED     = 0x80000007,$/;"	e	enum:android::__anon17
FIRST_CHUNK_CODE	include/utils/ResourceTypes.h	/^        FIRST_CHUNK_CODE = RES_XML_FIRST_CHUNK_TYPE, $/;"	e	enum:android::ResXMLParser::event_code_t
FIRST_INC_STRONG	include/utils/RefBase.h	/^        FIRST_INC_STRONG = 0x0001$/;"	e	enum:android::RefBase::__anon6
FLAG_COMPLEX	include/utils/ResourceTypes.h	/^        FLAG_COMPLEX = 0x0001,$/;"	e	enum:android::ResTable_entry::__anon73
FLAG_PUBLIC	include/utils/ResourceTypes.h	/^        FLAG_PUBLIC = 0x0002$/;"	e	enum:android::ResTable_entry::__anon73
FdTextOutput	utils/Static.cpp	/^    FdTextOutput(int fd) : BufferedTextOutput(MULTITHREADED), mFD(fd) { }$/;"	f	class:android::FdTextOutput
FdTextOutput	utils/Static.cpp	/^class FdTextOutput : public BufferedTextOutput$/;"	c	namespace:android	file:
FileInfo	include/utils/AssetDir.h	/^        FileInfo(const FileInfo& src) {$/;"	f	class:android::AssetDir::FileInfo
FileInfo	include/utils/AssetDir.h	/^        FileInfo(const String8& path)      \/\/ useful for e.g. svect.indexOf$/;"	f	class:android::AssetDir::FileInfo
FileInfo	include/utils/AssetDir.h	/^        FileInfo(void) {}$/;"	f	class:android::AssetDir::FileInfo
FileInfo	include/utils/AssetDir.h	/^    class FileInfo {$/;"	c	class:android::AssetDir
FileMap	include/utils/FileMap.h	/^class FileMap {$/;"	c	namespace:android
FileMap	utils/FileMap.cpp	/^FileMap::FileMap(void)$/;"	f	class:FileMap
FileRec	include/utils/BackupHelpers.h	/^struct FileRec {$/;"	s	namespace:android
FileState	include/utils/BackupHelpers.h	/^struct FileState {$/;"	s	namespace:android
FileType	include/utils/misc.h	/^typedef enum FileType {$/;"	g	namespace:android
FileType	include/utils/misc.h	/^} FileType;$/;"	t	namespace:android	typeref:enum:android::FileType
Flattenable	include/utils/Flattenable.h	/^class Flattenable$/;"	c	namespace:android
Functor	include/utils/Functor.h	/^    Functor() {}$/;"	f	class:android::Functor
Functor	include/utils/Functor.h	/^class Functor {$/;"	c	namespace:android
GET_MEM	demo/MemoryHeap/IMemTest.h	/^		GET_MEM = IBinder::FIRST_CALL_TRANSACTION$/;"	e	enum:android::BnMemTest::__anon80
GenerationCache	include/utils/GenerationCache.h	/^GenerationCache<K, V>::GenerationCache(uint32_t maxCapacity): mMaxCapacity(maxCapacity),$/;"	f	class:android::GenerationCache
GenerationCache	include/utils/GenerationCache.h	/^class GenerationCache {$/;"	c	namespace:android
HAS_TRIVIAL_COPY	include/utils/VectorImpl.h	/^        HAS_TRIVIAL_COPY    = 0x00000004,$/;"	e	enum:android::VectorImpl::__anon79
HAS_TRIVIAL_CTOR	include/utils/VectorImpl.h	/^        HAS_TRIVIAL_CTOR    = 0x00000001,$/;"	e	enum:android::VectorImpl::__anon79
HAS_TRIVIAL_DTOR	include/utils/VectorImpl.h	/^        HAS_TRIVIAL_DTOR    = 0x00000002,$/;"	e	enum:android::VectorImpl::__anon79
HAVE_CREATETHREAD	utils/Threads.cpp	41;"	d	file:
HasEntities	utils/BackupData.cpp	/^BackupDataReader::HasEntities()$/;"	f	class:android::BackupDataReader
HashEntry	include/utils/ZipFileRO.h	/^    typedef struct HashEntry {$/;"	s	class:android::ZipFileRO
HashEntry	include/utils/ZipFileRO.h	/^    } HashEntry;$/;"	t	class:android::ZipFileRO	typeref:struct:android::ZipFileRO::HashEntry
Header	utils/ResourceTypes.cpp	/^    Header(ResTable* _owner) : owner(_owner), ownedData(NULL), header(NULL),$/;"	f	struct:android::ResTable::Header
Header	utils/ResourceTypes.cpp	/^struct ResTable::Header$/;"	s	class:android::ResTable	file:
HexDump	include/utils/TextOutput.h	/^class HexDump$/;"	c	namespace:android
HexDump	utils/TextOutput.cpp	/^HexDump::HexDump(const void *buf, size_t size, size_t bytesPerLine)$/;"	f	class:android::HexDump
IDMAP_HEADER_SIZE	utils/ResourceTypes.cpp	68;"	d	file:
IDMAP_HEADER_SIZE_BYTES	include/utils/ResourceTypes.h	/^        IDMAP_HEADER_SIZE_BYTES = 3 * sizeof(uint32_t),$/;"	e	enum:android::ResTable::__anon78
IDMAP_MAGIC	utils/ResourceTypes.cpp	66;"	d	file:
ID_NAMES	utils/ResourceTypes.cpp	/^const static id_name_map ID_NAMES[] = {$/;"	m	namespace:android	file:
IMemTest	demo/MemoryHeap/IMemTest.h	/^class IMemTest : public IInterface$/;"	c	namespace:android
INITIAL_STRONG_VALUE	utils/RefBase.cpp	48;"	d	file:
INPUT_CHUNK_SIZE	include/utils/StreamingZipInflater.h	/^    static const size_t INPUT_CHUNK_SIZE = 64 * 1024;$/;"	m	class:android::StreamingZipInflater
INT32_MAX	utils/ResourceTypes.cpp	36;"	d	file:
INVALID_OPERATION	include/utils/Errors.h	/^    INVALID_OPERATION   = -ENOSYS,$/;"	e	enum:android::__anon17
JPARKS_BROKE_IT	include/utils/Errors.h	/^    JPARKS_BROKE_IT     = -EPIPE,$/;"	e	enum:android::__anon17
KEYBOARD_12KEY	include/utils/ResourceTypes.h	/^        KEYBOARD_12KEY  = ACONFIGURATION_KEYBOARD_12KEY,$/;"	e	enum:android::ResTable_config::__anon50
KEYBOARD_ANY	include/utils/ResourceTypes.h	/^        KEYBOARD_ANY  = ACONFIGURATION_KEYBOARD_ANY,$/;"	e	enum:android::ResTable_config::__anon50
KEYBOARD_NOKEYS	include/utils/ResourceTypes.h	/^        KEYBOARD_NOKEYS  = ACONFIGURATION_KEYBOARD_NOKEYS,$/;"	e	enum:android::ResTable_config::__anon50
KEYBOARD_QWERTY	include/utils/ResourceTypes.h	/^        KEYBOARD_QWERTY  = ACONFIGURATION_KEYBOARD_QWERTY,$/;"	e	enum:android::ResTable_config::__anon50
KEYSHIDDEN_ANY	include/utils/ResourceTypes.h	/^        KEYSHIDDEN_ANY = ACONFIGURATION_KEYSHIDDEN_ANY,$/;"	e	enum:android::ResTable_config::__anon52
KEYSHIDDEN_NO	include/utils/ResourceTypes.h	/^        KEYSHIDDEN_NO = ACONFIGURATION_KEYSHIDDEN_NO,$/;"	e	enum:android::ResTable_config::__anon52
KEYSHIDDEN_SOFT	include/utils/ResourceTypes.h	/^        KEYSHIDDEN_SOFT = ACONFIGURATION_KEYSHIDDEN_SOFT,$/;"	e	enum:android::ResTable_config::__anon52
KEYSHIDDEN_YES	include/utils/ResourceTypes.h	/^        KEYSHIDDEN_YES = ACONFIGURATION_KEYSHIDDEN_YES,$/;"	e	enum:android::ResTable_config::__anon52
KeyedVector	include/utils/KeyedVector.h	/^KeyedVector<KEY,VALUE>::KeyedVector()$/;"	f	class:android::KeyedVector
KeyedVector	include/utils/KeyedVector.h	/^class KeyedVector$/;"	c	namespace:android
L10N_NOT_REQUIRED	include/utils/ResourceTypes.h	/^        L10N_NOT_REQUIRED = 0,$/;"	e	enum:android::ResTable_map::__anon76
L10N_SUGGESTED	include/utils/ResourceTypes.h	/^        L10N_SUGGESTED    = 1$/;"	e	enum:android::ResTable_map::__anon76
LOAD_TABLE_NOISY	utils/ResourceTypes.cpp	44;"	d	file:
LOCAL_LDLIBS	utils/Android.mk	/^LOCAL_LDLIBS := -lrt -ldl -lpthread$/;"	m
LOCAL_MODULE	utils/Android.mk	/^LOCAL_MODULE := libutils$/;"	m
LOCAL_MODULE	utils/Android.mk	/^LOCAL_MODULE:= libutils$/;"	m
LOCAL_PATH	utils/Android.mk	/^LOCAL_PATH:= $(call my-dir)$/;"	m
LOCAL_PATH	utils/tests/Android.mk	/^LOCAL_PATH := $(call my-dir)$/;"	m
LOCAL_SHARED_LIBRARIES	utils/Android.mk	/^LOCAL_SHARED_LIBRARIES := \\$/;"	m
LOCAL_SRC_FILES	utils/Android.mk	/^LOCAL_SRC_FILES := $(commonSources) BackupData.cpp BackupHelpers.cpp$/;"	m
LOCAL_SRC_FILES	utils/Android.mk	/^LOCAL_SRC_FILES:= $(commonSources)$/;"	m
LOCAL_SRC_FILES	utils/Android.mk	/^LOCAL_SRC_FILES:= \\$/;"	m
LOGP	utils/BackupHelpers.cpp	72;"	d	file:
LOGP	utils/BackupHelpers.cpp	75;"	d	file:
LOGP	utils/BackupHelpers.cpp	77;"	d	file:
LOG_TAG	utils/Asset.cpp	21;"	d	file:
LOG_TAG	utils/AssetManager.cpp	21;"	d	file:
LOG_TAG	utils/BackupData.cpp	17;"	d	file:
LOG_TAG	utils/BackupHelpers.cpp	17;"	d	file:
LOG_TAG	utils/BlobCache.cpp	17;"	d	file:
LOG_TAG	utils/CallStack.cpp	17;"	d	file:
LOG_TAG	utils/FileMap.cpp	21;"	d	file:
LOG_TAG	utils/Looper.cpp	6;"	d	file:
LOG_TAG	utils/ObbFile.cpp	24;"	d	file:
LOG_TAG	utils/PropertyMap.cpp	17;"	d	file:
LOG_TAG	utils/RefBase.cpp	17;"	d	file:
LOG_TAG	utils/ResourceTypes.cpp	17;"	d	file:
LOG_TAG	utils/StopWatch.cpp	17;"	d	file:
LOG_TAG	utils/StreamingZipInflater.cpp	18;"	d	file:
LOG_TAG	utils/SystemClock.cpp	38;"	d	file:
LOG_TAG	utils/Threads.cpp	18;"	d	file:
LOG_TAG	utils/Tokenizer.cpp	17;"	d	file:
LOG_TAG	utils/VectorImpl.cpp	17;"	d	file:
LOG_TAG	utils/ZipFileRO.cpp	20;"	d	file:
LOG_TAG	utils/ZipUtils.cpp	21;"	d	file:
LOG_TAG	utils/tests/ObbFile_test.cpp	17;"	d	file:
LOG_TAG	utils/tests/String8_test.cpp	17;"	d	file:
LOG_TAG	utils/tests/Unicode_test.cpp	17;"	d	file:
LOG_TAG	utils/tests/ZipFileRO_test.cpp	17;"	d	file:
LOOPER_USES_EPOLL	include/utils/Looper.h	28;"	d
LibUtilsFirstStatics	utils/Static.cpp	/^    LibUtilsFirstStatics()$/;"	f	class:android::LibUtilsFirstStatics
LibUtilsFirstStatics	utils/Static.cpp	/^class LibUtilsFirstStatics$/;"	c	namespace:android	file:
LightRefBase	include/utils/RefBase.h	/^    inline LightRefBase() : mCount(0) { }$/;"	f	class:android::LightRefBase
LightRefBase	include/utils/RefBase.h	/^class LightRefBase$/;"	c	namespace:android
LinearTransform	include/utils/LinearTransform.h	/^struct LinearTransform {$/;"	s	namespace:android
List	include/utils/List.h	/^    List() {$/;"	f	class:android::List
List	include/utils/List.h	/^    List(const List<T>& src) {      \/\/ copy-constructor$/;"	f	class:android::List
List	include/utils/List.h	/^class List $/;"	c	namespace:android
LogTextOutput	utils/Static.cpp	/^    LogTextOutput() : BufferedTextOutput(MULTITHREADED) { }$/;"	f	class:android::LogTextOutput
LogTextOutput	utils/Static.cpp	/^class LogTextOutput : public BufferedTextOutput$/;"	c	namespace:android	file:
Looper	include/utils/Looper.h	/^class Looper : public ALooper, public RefBase {$/;"	c	namespace:android
Looper	utils/Looper.cpp	/^Looper::Looper(bool allowNonCallbacks) :$/;"	f	class:android::Looper
LooperTest	utils/tests/Looper_test.cpp	/^class LooperTest : public testing::Test {$/;"	c	namespace:android	file:
MAGIC0	utils/BackupHelpers.cpp	41;"	d	file:
MAGIC1	utils/BackupHelpers.cpp	42;"	d	file:
MASK_KEYSHIDDEN	include/utils/ResourceTypes.h	/^        MASK_KEYSHIDDEN = 0x0003,$/;"	e	enum:android::ResTable_config::__anon52
MASK_NAVHIDDEN	include/utils/ResourceTypes.h	/^        MASK_NAVHIDDEN = 0x000c,$/;"	e	enum:android::ResTable_config::__anon53
MASK_SCREENLONG	include/utils/ResourceTypes.h	/^        MASK_SCREENLONG = 0x30,$/;"	e	enum:android::ResTable_config::__anon64
MASK_SCREENSIZE	include/utils/ResourceTypes.h	/^        MASK_SCREENSIZE = 0x0f,$/;"	e	enum:android::ResTable_config::__anon64
MASK_UI_MODE_NIGHT	include/utils/ResourceTypes.h	/^        MASK_UI_MODE_NIGHT = 0x30,$/;"	e	enum:android::ResTable_config::__anon65
MASK_UI_MODE_TYPE	include/utils/ResourceTypes.h	/^        MASK_UI_MODE_TYPE = 0x0f,$/;"	e	enum:android::ResTable_config::__anon65
MAX_DEPTH	include/utils/CallStack.h	/^        MAX_DEPTH = 31$/;"	e	enum:android::CallStack::__anon15
MAX_KEY_SIZE	utils/tests/BlobCache_test.cpp	/^        MAX_KEY_SIZE = 6,$/;"	e	enum:android::BlobCacheTest::__anon2	file:
MAX_TOTAL_SIZE	utils/tests/BlobCache_test.cpp	/^        MAX_TOTAL_SIZE = 13,$/;"	e	enum:android::BlobCacheTest::__anon2	file:
MAX_VALUE_SIZE	utils/tests/BlobCache_test.cpp	/^        MAX_VALUE_SIZE = 8,$/;"	e	enum:android::BlobCacheTest::__anon2	file:
MINORVERSION_ANY	include/utils/ResourceTypes.h	/^        MINORVERSION_ANY = 0$/;"	e	enum:android::ResTable_config::__anon61
MSG_TEST1	utils/tests/Looper_test.cpp	/^    MSG_TEST1 = 1,$/;"	e	enum:android::__anon3	file:
MSG_TEST2	utils/tests/Looper_test.cpp	/^    MSG_TEST2 = 2,$/;"	e	enum:android::__anon3	file:
MSG_TEST3	utils/tests/Looper_test.cpp	/^    MSG_TEST3 = 3,$/;"	e	enum:android::__anon3	file:
MSG_TEST4	utils/tests/Looper_test.cpp	/^    MSG_TEST4 = 4,$/;"	e	enum:android::__anon3	file:
MULTITHREADED	include/utils/BufferedTextOutput.h	/^        MULTITHREADED = 0x0001$/;"	e	enum:android::BufferedTextOutput::__anon34
MapAdvice	include/utils/FileMap.h	/^    enum MapAdvice {$/;"	g	class:android::FileMap
MapInfo	utils/CallStack.cpp	/^    MapInfo()$/;"	f	class:android::MapInfo
MapInfo	utils/CallStack.cpp	/^class MapInfo {$/;"	c	namespace:android	file:
Message	include/utils/Looper.h	/^    Message() : what(0) { }$/;"	f	struct:android::Message
Message	include/utils/Looper.h	/^    Message(int what) : what(what) { }$/;"	f	struct:android::Message
Message	include/utils/Looper.h	/^struct Message {$/;"	s	namespace:android
MessageEnvelope	include/utils/Looper.h	/^        MessageEnvelope() : uptime(0) { }$/;"	f	struct:android::Looper::MessageEnvelope
MessageEnvelope	include/utils/Looper.h	/^        MessageEnvelope(nsecs_t uptime, const sp<MessageHandler> handler,$/;"	f	struct:android::Looper::MessageEnvelope
MessageEnvelope	include/utils/Looper.h	/^    struct MessageEnvelope {$/;"	s	class:android::Looper
MessageHandler	include/utils/Looper.h	/^class MessageHandler : public virtual RefBase {$/;"	c	namespace:android
Mutex	include/utils/threads.h	/^class Mutex {$/;"	c	namespace:android
Mutex	include/utils/threads.h	/^inline Mutex::Mutex() {$/;"	f	class:android::Mutex
Mutex	include/utils/threads.h	/^inline Mutex::Mutex(const char* name) {$/;"	f	class:android::Mutex
Mutex	include/utils/threads.h	/^inline Mutex::Mutex(int type, const char* name) {$/;"	f	class:android::Mutex
NAME_NOT_FOUND	include/utils/Errors.h	/^    NAME_NOT_FOUND      = -ENOENT,$/;"	e	enum:android::__anon17
NAVHIDDEN_ANY	include/utils/ResourceTypes.h	/^        NAVHIDDEN_ANY = ACONFIGURATION_NAVHIDDEN_ANY << SHIFT_NAVHIDDEN,$/;"	e	enum:android::ResTable_config::__anon53
NAVHIDDEN_NO	include/utils/ResourceTypes.h	/^        NAVHIDDEN_NO = ACONFIGURATION_NAVHIDDEN_NO << SHIFT_NAVHIDDEN,$/;"	e	enum:android::ResTable_config::__anon53
NAVHIDDEN_YES	include/utils/ResourceTypes.h	/^        NAVHIDDEN_YES = ACONFIGURATION_NAVHIDDEN_YES << SHIFT_NAVHIDDEN,$/;"	e	enum:android::ResTable_config::__anon53
NAVIGATION_ANY	include/utils/ResourceTypes.h	/^        NAVIGATION_ANY  = ACONFIGURATION_NAVIGATION_ANY,$/;"	e	enum:android::ResTable_config::__anon51
NAVIGATION_DPAD	include/utils/ResourceTypes.h	/^        NAVIGATION_DPAD  = ACONFIGURATION_NAVIGATION_DPAD,$/;"	e	enum:android::ResTable_config::__anon51
NAVIGATION_NONAV	include/utils/ResourceTypes.h	/^        NAVIGATION_NONAV  = ACONFIGURATION_NAVIGATION_NONAV,$/;"	e	enum:android::ResTable_config::__anon51
NAVIGATION_TRACKBALL	include/utils/ResourceTypes.h	/^        NAVIGATION_TRACKBALL  = ACONFIGURATION_NAVIGATION_TRACKBALL,$/;"	e	enum:android::ResTable_config::__anon51
NAVIGATION_WHEEL	include/utils/ResourceTypes.h	/^        NAVIGATION_WHEEL  = ACONFIGURATION_NAVIGATION_WHEEL,$/;"	e	enum:android::ResTable_config::__anon51
NELEM	include/utils/misc.h	30;"	d
NON_CONST_ITERATOR	include/utils/List.h	/^    struct NON_CONST_ITERATOR {$/;"	s	class:android::List
NORMAL	include/utils/FileMap.h	/^        NORMAL, RANDOM, SEQUENTIAL, WILLNEED, DONTNEED$/;"	e	enum:android::FileMap::MapAdvice
NOT_ENOUGH_DATA	include/utils/Errors.h	/^    NOT_ENOUGH_DATA     = -ENODATA,$/;"	e	enum:android::__anon17
NO_COLOR	include/utils/ResourceTypes.h	/^        NO_COLOR = 0x00000001,$/;"	e	enum:android::Res_png_9patch::__anon35
NO_ENTRY	include/utils/ResourceTypes.h	/^        NO_ENTRY = 0xFFFFFFFF$/;"	e	enum:android::ResTable_type::__anon72
NO_ERROR	include/utils/Errors.h	/^    NO_ERROR          = 0,    \/\/ No errors.$/;"	e	enum:android::__anon17
NO_ERROR	include/utils/Errors.h	42;"	d
NO_ERROR	include/utils/Errors.h	81;"	d
NO_INIT	include/utils/Errors.h	/^    NO_INIT             = -ENODEV,$/;"	e	enum:android::__anon17
NO_MEMORY	include/utils/Errors.h	/^    NO_MEMORY           = -ENOMEM,$/;"	e	enum:android::__anon17
NodePtr	include/utils/List.h	/^        typedef _Node const * NodePtr;$/;"	t	struct:android::List::CONST_ITERATOR
NodePtr	include/utils/List.h	/^        typedef _Node* NodePtr;$/;"	t	struct:android::List::NON_CONST_ITERATOR
OBBFILE_H_	include/utils/ObbFile.h	18;"	d
OBB_OVERLAY	include/utils/ObbFile.h	29;"	d
OBB_SALTED	include/utils/ObbFile.h	30;"	d
OBJECT_LIFETIME_MASK	include/utils/RefBase.h	/^        OBJECT_LIFETIME_MASK    = 0x0001$/;"	e	enum:android::RefBase::__anon5
OBJECT_LIFETIME_STRONG	include/utils/RefBase.h	/^        OBJECT_LIFETIME_STRONG  = 0x0000,$/;"	e	enum:android::RefBase::__anon5
OBJECT_LIFETIME_WEAK	include/utils/RefBase.h	/^        OBJECT_LIFETIME_WEAK    = 0x0001,$/;"	e	enum:android::RefBase::__anon5
OK	include/utils/Errors.h	/^    OK                = 0,    \/\/ Everything's swell.$/;"	e	enum:android::__anon17
ORIENTATION_ANY	include/utils/ResourceTypes.h	/^        ORIENTATION_ANY  = ACONFIGURATION_ORIENTATION_ANY,$/;"	e	enum:android::ResTable_config::__anon45
ORIENTATION_LAND	include/utils/ResourceTypes.h	/^        ORIENTATION_LAND = ACONFIGURATION_ORIENTATION_LAND,$/;"	e	enum:android::ResTable_config::__anon45
ORIENTATION_PORT	include/utils/ResourceTypes.h	/^        ORIENTATION_PORT = ACONFIGURATION_ORIENTATION_PORT,$/;"	e	enum:android::ResTable_config::__anon45
ORIENTATION_SQUARE	include/utils/ResourceTypes.h	/^        ORIENTATION_SQUARE = ACONFIGURATION_ORIENTATION_SQUARE,$/;"	e	enum:android::ResTable_config::__anon45
OUTPUT_CHUNK_SIZE	include/utils/StreamingZipInflater.h	/^    static const size_t OUTPUT_CHUNK_SIZE = 64 * 1024;$/;"	m	class:android::StreamingZipInflater
O_BINARY	utils/Asset.cpp	45;"	d	file:
O_BINARY	utils/ZipFileRO.cpp	48;"	d	file:
ObbFile	include/utils/ObbFile.h	/^class ObbFile : public RefBase {$/;"	c	namespace:android
ObbFile	utils/ObbFile.cpp	/^ObbFile::ObbFile()$/;"	f	class:android::ObbFile
ObbFileTest	utils/tests/ObbFile_test.cpp	/^class ObbFileTest : public testing::Test {$/;"	c	namespace:android	file:
OnEntryRemoved	include/utils/GenerationCache.h	/^class OnEntryRemoved {$/;"	c	namespace:android
PERMISSION_DENIED	include/utils/Errors.h	/^    PERMISSION_DENIED   = -EPERM,$/;"	e	enum:android::__anon17
POOL_NOISY	utils/ResourceTypes.cpp	39;"	d	file:
PRINT_REFS	utils/RefBase.cpp	42;"	d	file:
PRIORITY_AUDIO	include/utils/threads.h	/^    PRIORITY_AUDIO          = ANDROID_PRIORITY_AUDIO,$/;"	e	enum:android::__anon9
PRIORITY_BACKGROUND	include/utils/threads.h	/^    PRIORITY_BACKGROUND     = ANDROID_PRIORITY_BACKGROUND,$/;"	e	enum:android::__anon9
PRIORITY_DEFAULT	include/utils/threads.h	/^    PRIORITY_DEFAULT        = ANDROID_PRIORITY_DEFAULT,$/;"	e	enum:android::__anon9
PRIORITY_DISPLAY	include/utils/threads.h	/^    PRIORITY_DISPLAY        = ANDROID_PRIORITY_DISPLAY,$/;"	e	enum:android::__anon9
PRIORITY_FOREGROUND	include/utils/threads.h	/^    PRIORITY_FOREGROUND     = ANDROID_PRIORITY_FOREGROUND,$/;"	e	enum:android::__anon9
PRIORITY_HIGHEST	include/utils/threads.h	/^    PRIORITY_HIGHEST        = ANDROID_PRIORITY_HIGHEST,$/;"	e	enum:android::__anon9
PRIORITY_LESS_FAVORABLE	include/utils/threads.h	/^    PRIORITY_LESS_FAVORABLE = ANDROID_PRIORITY_LESS_FAVORABLE,$/;"	e	enum:android::__anon9
PRIORITY_LOWEST	include/utils/threads.h	/^    PRIORITY_LOWEST         = ANDROID_PRIORITY_LOWEST,$/;"	e	enum:android::__anon9
PRIORITY_MORE_FAVORABLE	include/utils/threads.h	/^    PRIORITY_MORE_FAVORABLE = ANDROID_PRIORITY_MORE_FAVORABLE,$/;"	e	enum:android::__anon9
PRIORITY_NORMAL	include/utils/threads.h	/^    PRIORITY_NORMAL         = ANDROID_PRIORITY_NORMAL,$/;"	e	enum:android::__anon9
PRIORITY_URGENT_AUDIO	include/utils/threads.h	/^    PRIORITY_URGENT_AUDIO   = ANDROID_PRIORITY_URGENT_AUDIO,$/;"	e	enum:android::__anon9
PRIORITY_URGENT_DISPLAY	include/utils/threads.h	/^    PRIORITY_URGENT_DISPLAY = ANDROID_PRIORITY_URGENT_DISPLAY,$/;"	e	enum:android::__anon9
PRIVATE	include/utils/threads.h	/^        PRIVATE = 0,$/;"	e	enum:android::Condition::__anon12
PRIVATE	include/utils/threads.h	/^        PRIVATE = 0,$/;"	e	enum:android::Mutex::__anon10
PRIVATE	include/utils/threads.h	/^        PRIVATE = 0,$/;"	e	enum:android::RWLock::__anon11
Package	utils/ResourceTypes.cpp	/^    Package(ResTable* _owner, const Header* _header, const ResTable_package* _package)$/;"	f	struct:android::ResTable::Package
Package	utils/ResourceTypes.cpp	/^struct ResTable::Package$/;"	s	class:android::ResTable	file:
PackageGroup	utils/ResourceTypes.cpp	/^    PackageGroup(ResTable* _owner, const String16& _name, uint32_t _id)$/;"	f	struct:android::ResTable::PackageGroup
PackageGroup	utils/ResourceTypes.cpp	/^struct ResTable::PackageGroup$/;"	s	class:android::ResTable	file:
Parser	include/utils/PropertyMap.h	/^    class Parser {$/;"	c	class:android::PropertyMap
Parser	utils/PropertyMap.cpp	/^PropertyMap::Parser::Parser(PropertyMap* map, Tokenizer* tokenizer) :$/;"	f	class:android::PropertyMap::Parser
Pipe	utils/tests/TestHelpers.h	/^    Pipe() {$/;"	f	class:android::Pipe
Pipe	utils/tests/TestHelpers.h	/^class Pipe {$/;"	c	namespace:android
PropertyMap	include/utils/PropertyMap.h	/^class PropertyMap {$/;"	c	namespace:android
PropertyMap	utils/PropertyMap.cpp	/^PropertyMap::PropertyMap() {$/;"	f	class:android::PropertyMap
RANDOM	include/utils/FileMap.h	/^        NORMAL, RANDOM, SEQUENTIAL, WILLNEED, DONTNEED$/;"	e	enum:android::FileMap::MapAdvice
RESTORE_BUF_SIZE	utils/BackupHelpers.cpp	725;"	d	file:
RES_NULL_TYPE	include/utils/ResourceTypes.h	/^    RES_NULL_TYPE               = 0x0000,$/;"	e	enum:android::__anon36
RES_PATH_SEPARATOR	utils/String8.cpp	41;"	d	file:
RES_STRING_POOL_TYPE	include/utils/ResourceTypes.h	/^    RES_STRING_POOL_TYPE        = 0x0001,$/;"	e	enum:android::__anon36
RES_TABLE_PACKAGE_TYPE	include/utils/ResourceTypes.h	/^    RES_TABLE_PACKAGE_TYPE      = 0x0200,$/;"	e	enum:android::__anon36
RES_TABLE_TYPE	include/utils/ResourceTypes.h	/^    RES_TABLE_TYPE              = 0x0002,$/;"	e	enum:android::__anon36
RES_TABLE_TYPE_SPEC_TYPE	include/utils/ResourceTypes.h	/^    RES_TABLE_TYPE_SPEC_TYPE    = 0x0202$/;"	e	enum:android::__anon36
RES_TABLE_TYPE_TYPE	include/utils/ResourceTypes.h	/^    RES_TABLE_TYPE_TYPE         = 0x0201,$/;"	e	enum:android::__anon36
RES_XML_CDATA_TYPE	include/utils/ResourceTypes.h	/^    RES_XML_CDATA_TYPE          = 0x0104,$/;"	e	enum:android::__anon36
RES_XML_END_ELEMENT_TYPE	include/utils/ResourceTypes.h	/^    RES_XML_END_ELEMENT_TYPE    = 0x0103,$/;"	e	enum:android::__anon36
RES_XML_END_NAMESPACE_TYPE	include/utils/ResourceTypes.h	/^    RES_XML_END_NAMESPACE_TYPE  = 0x0101,$/;"	e	enum:android::__anon36
RES_XML_FIRST_CHUNK_TYPE	include/utils/ResourceTypes.h	/^    RES_XML_FIRST_CHUNK_TYPE    = 0x0100,$/;"	e	enum:android::__anon36
RES_XML_LAST_CHUNK_TYPE	include/utils/ResourceTypes.h	/^    RES_XML_LAST_CHUNK_TYPE     = 0x017f,$/;"	e	enum:android::__anon36
RES_XML_RESOURCE_MAP_TYPE	include/utils/ResourceTypes.h	/^    RES_XML_RESOURCE_MAP_TYPE   = 0x0180,$/;"	e	enum:android::__anon36
RES_XML_START_ELEMENT_TYPE	include/utils/ResourceTypes.h	/^    RES_XML_START_ELEMENT_TYPE  = 0x0102,$/;"	e	enum:android::__anon36
RES_XML_START_NAMESPACE_TYPE	include/utils/ResourceTypes.h	/^    RES_XML_START_NAMESPACE_TYPE= 0x0100,$/;"	e	enum:android::__anon36
RES_XML_TYPE	include/utils/ResourceTypes.h	/^    RES_XML_TYPE                = 0x0003,$/;"	e	enum:android::__anon36
ROUND_UP	utils/BackupData.cpp	/^const static int ROUND_UP[4] = { 0, 3, 2, 1 };$/;"	m	namespace:android	file:
ROUND_UP	utils/BackupHelpers.cpp	/^const static int ROUND_UP[4] = { 0, 3, 2, 1 };$/;"	m	namespace:android	file:
RWLock	include/utils/threads.h	/^class RWLock {$/;"	c	namespace:android
RWLock	include/utils/threads.h	/^inline RWLock::RWLock() {$/;"	f	class:android::RWLock
RWLock	include/utils/threads.h	/^inline RWLock::RWLock(const char* name) {$/;"	f	class:android::RWLock
RWLock	include/utils/threads.h	/^inline RWLock::RWLock(int type, const char* name) {$/;"	f	class:android::RWLock
ReadEntityData	utils/BackupData.cpp	/^BackupDataReader::ReadEntityData(void* data, size_t size)$/;"	f	class:android::BackupDataReader
ReadEntityHeader	utils/BackupData.cpp	/^BackupDataReader::ReadEntityHeader(String8* key, size_t* dataSize)$/;"	f	class:android::BackupDataReader
ReadNextHeader	utils/BackupData.cpp	/^BackupDataReader::ReadNextHeader(bool* done, int* type)$/;"	f	class:android::BackupDataReader
RefBase	include/utils/RefBase.h	/^class RefBase$/;"	c	namespace:android
RefBase	utils/RefBase.cpp	/^RefBase::RefBase()$/;"	f	class:android::RefBase
ReferenceConverterBase	include/utils/RefBase.h	/^class ReferenceConverterBase {$/;"	c	namespace:android
Request	include/utils/Looper.h	/^    struct Request {$/;"	s	class:android::Looper
ResChunk_header	include/utils/ResourceTypes.h	/^struct ResChunk_header$/;"	s	namespace:android
ResStringPool	include/utils/ResourceTypes.h	/^class ResStringPool$/;"	c	namespace:android
ResStringPool	utils/ResourceTypes.cpp	/^ResStringPool::ResStringPool()$/;"	f	class:android::ResStringPool
ResStringPool	utils/ResourceTypes.cpp	/^ResStringPool::ResStringPool(const void* data, size_t size, bool copyData)$/;"	f	class:android::ResStringPool
ResStringPool_header	include/utils/ResourceTypes.h	/^struct ResStringPool_header$/;"	s	namespace:android
ResStringPool_ref	include/utils/ResourceTypes.h	/^struct ResStringPool_ref$/;"	s	namespace:android
ResStringPool_span	include/utils/ResourceTypes.h	/^struct ResStringPool_span$/;"	s	namespace:android
ResTable	include/utils/ResourceTypes.h	/^class ResTable$/;"	c	namespace:android
ResTable	utils/ResourceTypes.cpp	/^ResTable::ResTable()$/;"	f	class:android::ResTable
ResTable	utils/ResourceTypes.cpp	/^ResTable::ResTable(const void* data, size_t size, void* cookie, bool copyData)$/;"	f	class:android::ResTable
ResTable_config	include/utils/ResourceTypes.h	/^struct ResTable_config$/;"	s	namespace:android
ResTable_entry	include/utils/ResourceTypes.h	/^struct ResTable_entry$/;"	s	namespace:android
ResTable_header	include/utils/ResourceTypes.h	/^struct ResTable_header$/;"	s	namespace:android
ResTable_map	include/utils/ResourceTypes.h	/^struct ResTable_map$/;"	s	namespace:android
ResTable_map_entry	include/utils/ResourceTypes.h	/^struct ResTable_map_entry : public ResTable_entry$/;"	s	namespace:android
ResTable_package	include/utils/ResourceTypes.h	/^struct ResTable_package$/;"	s	namespace:android
ResTable_ref	include/utils/ResourceTypes.h	/^struct ResTable_ref$/;"	s	namespace:android
ResTable_type	include/utils/ResourceTypes.h	/^struct ResTable_type$/;"	s	namespace:android
ResTable_typeSpec	include/utils/ResourceTypes.h	/^struct ResTable_typeSpec$/;"	s	namespace:android
ResXMLParser	include/utils/ResourceTypes.h	/^class ResXMLParser$/;"	c	namespace:android
ResXMLParser	utils/ResourceTypes.cpp	/^ResXMLParser::ResXMLParser(const ResXMLTree& tree)$/;"	f	class:android::ResXMLParser
ResXMLPosition	include/utils/ResourceTypes.h	/^    struct ResXMLPosition$/;"	s	class:android::ResXMLParser
ResXMLTree	include/utils/ResourceTypes.h	/^class ResXMLTree : public ResXMLParser$/;"	c	namespace:android
ResXMLTree	utils/ResourceTypes.cpp	/^ResXMLTree::ResXMLTree()$/;"	f	class:android::ResXMLTree
ResXMLTree	utils/ResourceTypes.cpp	/^ResXMLTree::ResXMLTree(const void* data, size_t size, bool copyData)$/;"	f	class:android::ResXMLTree
ResXMLTree_attrExt	include/utils/ResourceTypes.h	/^struct ResXMLTree_attrExt$/;"	s	namespace:android
ResXMLTree_attribute	include/utils/ResourceTypes.h	/^struct ResXMLTree_attribute$/;"	s	namespace:android
ResXMLTree_cdataExt	include/utils/ResourceTypes.h	/^struct ResXMLTree_cdataExt$/;"	s	namespace:android
ResXMLTree_endElementExt	include/utils/ResourceTypes.h	/^struct ResXMLTree_endElementExt$/;"	s	namespace:android
ResXMLTree_header	include/utils/ResourceTypes.h	/^struct ResXMLTree_header$/;"	s	namespace:android
ResXMLTree_namespaceExt	include/utils/ResourceTypes.h	/^struct ResXMLTree_namespaceExt$/;"	s	namespace:android
ResXMLTree_node	include/utils/ResourceTypes.h	/^struct ResXMLTree_node$/;"	s	namespace:android
Res_CHECKID	include/utils/ResourceTypes.h	207;"	d
Res_GETENTRY	include/utils/ResourceTypes.h	212;"	d
Res_GETPACKAGE	include/utils/ResourceTypes.h	210;"	d
Res_GETTYPE	include/utils/ResourceTypes.h	211;"	d
Res_INTERNALID	include/utils/ResourceTypes.h	214;"	d
Res_MAKEARRAY	include/utils/ResourceTypes.h	216;"	d
Res_MAKEID	include/utils/ResourceTypes.h	208;"	d
Res_MAKEINTERNAL	include/utils/ResourceTypes.h	215;"	d
Res_MAXPACKAGE	include/utils/ResourceTypes.h	218;"	d
Res_VALIDID	include/utils/ResourceTypes.h	206;"	d
Res_png_9patch	include/utils/ResourceTypes.h	/^    Res_png_9patch() : wasDeserialized(false), xDivs(NULL),$/;"	f	struct:android::Res_png_9patch
Res_png_9patch	include/utils/ResourceTypes.h	/^struct Res_png_9patch$/;"	s	namespace:android
Res_value	include/utils/ResourceTypes.h	/^struct Res_value$/;"	s	namespace:android
Response	include/utils/Looper.h	/^    struct Response {$/;"	s	class:android::Looper
RestoreHelperBase	include/utils/BackupHelpers.h	/^class RestoreHelperBase$/;"	c	namespace:android
RestoreHelperBase	utils/BackupHelpers.cpp	/^RestoreHelperBase::RestoreHelperBase()$/;"	f	class:android::RestoreHelperBase
SALT_SIZE	utils/tests/ObbFile_test.cpp	67;"	d	file:
SAMPLED_POLLS_TO_AGGREGATE	include/utils/Looper.h	/^    static const int SAMPLED_POLLS_TO_AGGREGATE = 1000;$/;"	m	class:android::Looper
SAMPLED_WAKE_CYCLES_TO_AGGREGATE	include/utils/Looper.h	/^    static const int SAMPLED_WAKE_CYCLES_TO_AGGREGATE = 100;$/;"	m	class:android::Looper
SCRATCH_DIR	utils/BackupHelpers.cpp	826;"	d	file:
SCREENHEIGHT_ANY	include/utils/ResourceTypes.h	/^        SCREENHEIGHT_ANY = 0$/;"	e	enum:android::ResTable_config::__anon57
SCREENLONG_ANY	include/utils/ResourceTypes.h	/^        SCREENLONG_ANY = ACONFIGURATION_SCREENLONG_ANY << SHIFT_SCREENLONG,$/;"	e	enum:android::ResTable_config::__anon64
SCREENLONG_NO	include/utils/ResourceTypes.h	/^        SCREENLONG_NO = ACONFIGURATION_SCREENLONG_NO << SHIFT_SCREENLONG,$/;"	e	enum:android::ResTable_config::__anon64
SCREENLONG_YES	include/utils/ResourceTypes.h	/^        SCREENLONG_YES = ACONFIGURATION_SCREENLONG_YES << SHIFT_SCREENLONG,$/;"	e	enum:android::ResTable_config::__anon64
SCREENSIZE_ANY	include/utils/ResourceTypes.h	/^        SCREENSIZE_ANY = ACONFIGURATION_SCREENSIZE_ANY,$/;"	e	enum:android::ResTable_config::__anon64
SCREENSIZE_LARGE	include/utils/ResourceTypes.h	/^        SCREENSIZE_LARGE = ACONFIGURATION_SCREENSIZE_LARGE,$/;"	e	enum:android::ResTable_config::__anon64
SCREENSIZE_NORMAL	include/utils/ResourceTypes.h	/^        SCREENSIZE_NORMAL = ACONFIGURATION_SCREENSIZE_NORMAL,$/;"	e	enum:android::ResTable_config::__anon64
SCREENSIZE_SMALL	include/utils/ResourceTypes.h	/^        SCREENSIZE_SMALL = ACONFIGURATION_SCREENSIZE_SMALL,$/;"	e	enum:android::ResTable_config::__anon64
SCREENSIZE_XLARGE	include/utils/ResourceTypes.h	/^        SCREENSIZE_XLARGE = ACONFIGURATION_SCREENSIZE_XLARGE,$/;"	e	enum:android::ResTable_config::__anon64
SCREENWIDTH_ANY	include/utils/ResourceTypes.h	/^        SCREENWIDTH_ANY = 0$/;"	e	enum:android::ResTable_config::__anon56
SDKVERSION_ANY	include/utils/ResourceTypes.h	/^        SDKVERSION_ANY = 0$/;"	e	enum:android::ResTable_config::__anon60
SEQUENTIAL	include/utils/FileMap.h	/^        NORMAL, RANDOM, SEQUENTIAL, WILLNEED, DONTNEED$/;"	e	enum:android::FileMap::MapAdvice
SHARED	include/utils/threads.h	/^        SHARED = 1$/;"	e	enum:android::Condition::__anon12
SHARED	include/utils/threads.h	/^        SHARED = 1$/;"	e	enum:android::Mutex::__anon10
SHARED	include/utils/threads.h	/^        SHARED = 1$/;"	e	enum:android::RWLock::__anon11
SHIFT_NAVHIDDEN	include/utils/ResourceTypes.h	/^        SHIFT_NAVHIDDEN = 2,$/;"	e	enum:android::ResTable_config::__anon53
SHIFT_SCREENLONG	include/utils/ResourceTypes.h	/^        SHIFT_SCREENLONG = 4,$/;"	e	enum:android::ResTable_config::__anon64
SHIFT_UI_MODE_NIGHT	include/utils/ResourceTypes.h	/^        SHIFT_UI_MODE_NIGHT = 4,$/;"	e	enum:android::ResTable_config::__anon65
SKIP_PADDING	utils/BackupData.cpp	217;"	d	file:
SORTED_FLAG	include/utils/ResourceTypes.h	/^        SORTED_FLAG = 1<<0,$/;"	e	enum:android::ResStringPool_header::__anon39
SPEC_PUBLIC	include/utils/ResourceTypes.h	/^        SPEC_PUBLIC = 0x40000000$/;"	e	enum:android::ResTable_typeSpec::__anon71
START_DOCUMENT	include/utils/ResourceTypes.h	/^        START_DOCUMENT = 0,$/;"	e	enum:android::ResXMLParser::event_code_t
START_NAMESPACE	include/utils/ResourceTypes.h	/^        START_NAMESPACE = RES_XML_START_NAMESPACE_TYPE,$/;"	e	enum:android::ResXMLParser::event_code_t
START_TAG	include/utils/ResourceTypes.h	/^        START_TAG = RES_XML_START_ELEMENT_TYPE,$/;"	e	enum:android::ResXMLParser::event_code_t
SYSTEM_TIME_MONOTONIC	include/utils/Timers.h	/^    SYSTEM_TIME_MONOTONIC = 1, \/\/ monotonic time since unspecified starting point$/;"	e	enum:__anon13
SYSTEM_TIME_PROCESS	include/utils/Timers.h	/^    SYSTEM_TIME_PROCESS = 2,   \/\/ high-resolution per-process clock$/;"	e	enum:__anon13
SYSTEM_TIME_REALTIME	include/utils/Timers.h	/^    SYSTEM_TIME_REALTIME = 0,  \/\/ system-wide realtime clock$/;"	e	enum:__anon13
SYSTEM_TIME_THREAD	include/utils/Timers.h	/^    SYSTEM_TIME_THREAD = 3     \/\/ high-resolution per-thread clock$/;"	e	enum:__anon13
SetKeyPrefix	utils/BackupData.cpp	/^BackupDataWriter::SetKeyPrefix(const String8& keyPrefix)$/;"	f	class:android::BackupDataWriter
SetUp	utils/tests/BlobCache_test.cpp	/^    virtual void SetUp() {$/;"	f	class:android::BlobCacheTest
SetUp	utils/tests/Looper_test.cpp	/^    virtual void SetUp() {$/;"	f	class:android::LooperTest
SetUp	utils/tests/ObbFile_test.cpp	/^    virtual void SetUp() {$/;"	f	class:android::ObbFileTest
SetUp	utils/tests/String8_test.cpp	/^    virtual void SetUp() {$/;"	f	class:android::String8Test
SetUp	utils/tests/Unicode_test.cpp	/^    virtual void SetUp() {$/;"	f	class:android::UnicodeTest
SetUp	utils/tests/ZipFileRO_test.cpp	/^    virtual void SetUp() {$/;"	f	class:android::ZipFileROTest
SharedBuffer	include/utils/SharedBuffer.h	/^        inline SharedBuffer() { }$/;"	f	class:android::SharedBuffer
SharedBuffer	include/utils/SharedBuffer.h	/^class SharedBuffer$/;"	c	namespace:android
SharedZip	include/utils/AssetManager.h	/^    class SharedZip : public RefBase {$/;"	c	class:android::AssetManager
SharedZip	utils/AssetManager.cpp	/^AssetManager::SharedZip::SharedZip(const String8& path, time_t modWhen)$/;"	f	class:AssetManager::SharedZip
Singleton	include/utils/Singleton.h	/^    Singleton() { };$/;"	f	class:android::Singleton
Singleton	include/utils/Singleton.h	/^class Singleton$/;"	c	namespace:android
SkipEntityData	utils/BackupData.cpp	/^BackupDataReader::SkipEntityData()$/;"	f	class:android::BackupDataReader
SnapshotHeader	include/utils/BackupHelpers.h	/^struct SnapshotHeader {$/;"	s	namespace:android
SortedVector	include/utils/SortedVector.h	/^SortedVector<TYPE>::SortedVector()$/;"	f	class:android::SortedVector
SortedVector	include/utils/SortedVector.h	/^SortedVector<TYPE>::SortedVector(const SortedVector<TYPE>& rhs)$/;"	f	class:android::SortedVector
SortedVector	include/utils/SortedVector.h	/^class SortedVector : private SortedVectorImpl$/;"	c	namespace:android
SortedVectorImpl	include/utils/VectorImpl.h	/^class SortedVectorImpl : public VectorImpl$/;"	c	namespace:android
SortedVectorImpl	utils/VectorImpl.cpp	/^SortedVectorImpl::SortedVectorImpl(const VectorImpl& rhs)$/;"	f	class:android::SortedVectorImpl
SortedVectorImpl	utils/VectorImpl.cpp	/^SortedVectorImpl::SortedVectorImpl(size_t itemSize, uint32_t flags)$/;"	f	class:android::SortedVectorImpl
Status	utils/BackupData.cpp	/^BackupDataReader::Status()$/;"	f	class:android::BackupDataReader
StopWatch	include/utils/StopWatch.h	/^class StopWatch$/;"	c	namespace:android
StopWatch	utils/StopWatch.cpp	/^StopWatch::StopWatch(const char *name, int clock, uint32_t flags)$/;"	f	class:android::StopWatch
StreamingZipInflater	include/utils/StreamingZipInflater.h	/^class StreamingZipInflater {$/;"	c	namespace:android
StreamingZipInflater	utils/StreamingZipInflater.cpp	/^StreamingZipInflater::StreamingZipInflater(FileMap* dataMap, size_t uncompSize) {$/;"	f	class:StreamingZipInflater
StreamingZipInflater	utils/StreamingZipInflater.cpp	/^StreamingZipInflater::StreamingZipInflater(int fd, off64_t compDataStart,$/;"	f	class:StreamingZipInflater
String16	include/utils/String16.h	/^class String16$/;"	c	namespace:android
String16	utils/String16.cpp	/^String16::String16()$/;"	f	class:android::String16
String16	utils/String16.cpp	/^String16::String16(const String16& o)$/;"	f	class:android::String16
String16	utils/String16.cpp	/^String16::String16(const String16& o, size_t len, size_t begin)$/;"	f	class:android::String16
String16	utils/String16.cpp	/^String16::String16(const String8& o)$/;"	f	class:android::String16
String16	utils/String16.cpp	/^String16::String16(const char* o)$/;"	f	class:android::String16
String16	utils/String16.cpp	/^String16::String16(const char* o, size_t len)$/;"	f	class:android::String16
String16	utils/String16.cpp	/^String16::String16(const char16_t* o)$/;"	f	class:android::String16
String16	utils/String16.cpp	/^String16::String16(const char16_t* o, size_t len)$/;"	f	class:android::String16
String8	include/utils/String8.h	/^class String8$/;"	c	namespace:android
String8	utils/String8.cpp	/^String8::String8()$/;"	f	class:android::String8
String8	utils/String8.cpp	/^String8::String8(const String16& o)$/;"	f	class:android::String8
String8	utils/String8.cpp	/^String8::String8(const String8& o)$/;"	f	class:android::String8
String8	utils/String8.cpp	/^String8::String8(const char* o)$/;"	f	class:android::String8
String8	utils/String8.cpp	/^String8::String8(const char* o, size_t len)$/;"	f	class:android::String8
String8	utils/String8.cpp	/^String8::String8(const char16_t* o)$/;"	f	class:android::String8
String8	utils/String8.cpp	/^String8::String8(const char16_t* o, size_t len)$/;"	f	class:android::String8
String8	utils/String8.cpp	/^String8::String8(const char32_t* o)$/;"	f	class:android::String8
String8	utils/String8.cpp	/^String8::String8(const char32_t* o, size_t len)$/;"	f	class:android::String8
String8Test	utils/tests/String8_test.cpp	/^class String8Test : public testing::Test {$/;"	c	namespace:android	file:
StringArray	include/utils/StringArray.h	/^class StringArray {$/;"	c	namespace:android
StringArray	utils/StringArray.cpp	/^StringArray::StringArray()$/;"	f	class:android::StringArray
StubCallbackHandler	utils/tests/Looper_test.cpp	/^    StubCallbackHandler(int nextResult) : nextResult(nextResult),$/;"	f	class:android::StubCallbackHandler
StubCallbackHandler	utils/tests/Looper_test.cpp	/^class StubCallbackHandler : public CallbackHandler {$/;"	c	namespace:android	file:
StubMessageHandler	utils/tests/Looper_test.cpp	/^class StubMessageHandler : public MessageHandler {$/;"	c	namespace:android	file:
TABLE_GETENTRY	utils/ResourceTypes.cpp	42;"	d	file:
TABLE_NOISY	utils/ResourceTypes.cpp	41;"	d	file:
TABLE_SUPER_NOISY	utils/ResourceTypes.cpp	43;"	d	file:
TABLE_THEME	utils/ResourceTypes.cpp	45;"	d	file:
TEMP_FAILURE_RETRY	utils/AssetManager.cpp	46;"	d	file:
TEMP_FAILURE_RETRY	utils/ObbFile.cpp	64;"	d	file:
TEMP_FAILURE_RETRY	utils/ZipFileRO.cpp	58;"	d	file:
TESTHELPERS_H	utils/tests/TestHelpers.h	18;"	d
TEST_BACKUP_HELPERS	include/utils/BackupHelpers.h	155;"	d
TEST_F	utils/tests/BlobCache_test.cpp	/^TEST_F(BlobCacheTest, CacheMaxKeySizeSucceeds) {$/;"	f	namespace:android
TEST_F	utils/tests/BlobCache_test.cpp	/^TEST_F(BlobCacheTest, CacheMaxKeyValuePairSizeSucceeds) {$/;"	f	namespace:android
TEST_F	utils/tests/BlobCache_test.cpp	/^TEST_F(BlobCacheTest, CacheMaxValueSizeSucceeds) {$/;"	f	namespace:android
TEST_F	utils/tests/BlobCache_test.cpp	/^TEST_F(BlobCacheTest, CacheMinKeyAndValueSizeSucceeds) {$/;"	f	namespace:android
TEST_F	utils/tests/BlobCache_test.cpp	/^TEST_F(BlobCacheTest, CacheSingleValueSucceeds) {$/;"	f	namespace:android
TEST_F	utils/tests/BlobCache_test.cpp	/^TEST_F(BlobCacheTest, CacheSizeDoesntExceedTotalLimit) {$/;"	f	namespace:android
TEST_F	utils/tests/BlobCache_test.cpp	/^TEST_F(BlobCacheTest, CacheTwoValuesSucceeds) {$/;"	f	namespace:android
TEST_F	utils/tests/BlobCache_test.cpp	/^TEST_F(BlobCacheTest, DoesntCacheIfKeyIsTooBig) {$/;"	f	namespace:android
TEST_F	utils/tests/BlobCache_test.cpp	/^TEST_F(BlobCacheTest, DoesntCacheIfKeyValuePairIsTooBig) {$/;"	f	namespace:android
TEST_F	utils/tests/BlobCache_test.cpp	/^TEST_F(BlobCacheTest, DoesntCacheIfValueIsTooBig) {$/;"	f	namespace:android
TEST_F	utils/tests/BlobCache_test.cpp	/^TEST_F(BlobCacheTest, ExceedingTotalLimitHalvesCacheSize) {$/;"	f	namespace:android
TEST_F	utils/tests/BlobCache_test.cpp	/^TEST_F(BlobCacheTest, GetDoesntAccessNullBuffer) {$/;"	f	namespace:android
TEST_F	utils/tests/BlobCache_test.cpp	/^TEST_F(BlobCacheTest, GetOnlyWritesIfBufferIsLargeEnough) {$/;"	f	namespace:android
TEST_F	utils/tests/BlobCache_test.cpp	/^TEST_F(BlobCacheTest, GetOnlyWritesInsideBounds) {$/;"	f	namespace:android
TEST_F	utils/tests/BlobCache_test.cpp	/^TEST_F(BlobCacheTest, MultipleSetsCacheLatestValue) {$/;"	f	namespace:android
TEST_F	utils/tests/BlobCache_test.cpp	/^TEST_F(BlobCacheTest, SecondSetKeepsFirstValueIfTooLarge) {$/;"	f	namespace:android
TEST_F	utils/tests/Looper_test.cpp	/^TEST_F(LooperTest, AddFd_WhenCallbackAdded_ReturnsOne) {$/;"	f	namespace:android
TEST_F	utils/tests/Looper_test.cpp	/^TEST_F(LooperTest, AddFd_WhenIdentIsNegativeAndCallbackIsNull_ReturnsError) {$/;"	f	namespace:android
TEST_F	utils/tests/Looper_test.cpp	/^TEST_F(LooperTest, AddFd_WhenNoCallbackAndAllowNonCallbacksIsFalse_ReturnsError) {$/;"	f	namespace:android
TEST_F	utils/tests/Looper_test.cpp	/^TEST_F(LooperTest, PollOnce_WhenCallbackAddedThenRemoved_CallbackShouldNotBeInvoked) {$/;"	f	namespace:android
TEST_F	utils/tests/Looper_test.cpp	/^TEST_F(LooperTest, PollOnce_WhenCallbackAddedTwice_OnlySecondCallbackShouldBeInvoked) {$/;"	f	namespace:android
TEST_F	utils/tests/Looper_test.cpp	/^TEST_F(LooperTest, PollOnce_WhenCallbackReturnsFalse_CallbackShouldNotBeInvokedAgainLater) {$/;"	f	namespace:android
TEST_F	utils/tests/Looper_test.cpp	/^TEST_F(LooperTest, PollOnce_WhenNonCallbackFdIsSignalled_ReturnsIdent) {$/;"	f	namespace:android
TEST_F	utils/tests/Looper_test.cpp	/^TEST_F(LooperTest, PollOnce_WhenNonZeroTimeoutAndAwokenBeforeWaiting_ImmediatelyReturns) {$/;"	f	namespace:android
TEST_F	utils/tests/Looper_test.cpp	/^TEST_F(LooperTest, PollOnce_WhenNonZeroTimeoutAndAwokenWhileWaiting_PromptlyReturns) {$/;"	f	namespace:android
TEST_F	utils/tests/Looper_test.cpp	/^TEST_F(LooperTest, PollOnce_WhenNonZeroTimeoutAndNoSignalledFDs_WaitsForTimeoutAndReturns) {$/;"	f	namespace:android
TEST_F	utils/tests/Looper_test.cpp	/^TEST_F(LooperTest, PollOnce_WhenNonZeroTimeoutAndNotAwoken_WaitsForTimeout) {$/;"	f	namespace:android
TEST_F	utils/tests/Looper_test.cpp	/^TEST_F(LooperTest, PollOnce_WhenNonZeroTimeoutAndSignalledFDBeforeWaiting_ImmediatelyInvokesCallbackAndReturns) {$/;"	f	namespace:android
TEST_F	utils/tests/Looper_test.cpp	/^TEST_F(LooperTest, PollOnce_WhenNonZeroTimeoutAndSignalledFDWhileWaiting_PromptlyInvokesCallbackAndReturns) {$/;"	f	namespace:android
TEST_F	utils/tests/Looper_test.cpp	/^TEST_F(LooperTest, PollOnce_WhenZeroTimeoutAndNoRegisteredFDs_ImmediatelyReturns) {$/;"	f	namespace:android
TEST_F	utils/tests/Looper_test.cpp	/^TEST_F(LooperTest, PollOnce_WhenZeroTimeoutAndNoSignalledFDs_ImmediatelyReturns) {$/;"	f	namespace:android
TEST_F	utils/tests/Looper_test.cpp	/^TEST_F(LooperTest, PollOnce_WhenZeroTimeoutAndSignalledFD_ImmediatelyInvokesCallbackAndReturns) {$/;"	f	namespace:android
TEST_F	utils/tests/Looper_test.cpp	/^TEST_F(LooperTest, RemoveFd_WhenCallbackAddedThenRemovedTwice_ReturnsOnceFirstTimeAndReturnsZeroSecondTime) {$/;"	f	namespace:android
TEST_F	utils/tests/Looper_test.cpp	/^TEST_F(LooperTest, RemoveFd_WhenCallbackNotAdded_ReturnsZero) {$/;"	f	namespace:android
TEST_F	utils/tests/Looper_test.cpp	/^TEST_F(LooperTest, RemoveMessage_WhenRemovingAllMessagesForHandler_ShouldRemoveThoseMessage) {$/;"	f	namespace:android
TEST_F	utils/tests/Looper_test.cpp	/^TEST_F(LooperTest, RemoveMessage_WhenRemovingSomeMessagesForHandler_ShouldRemoveThoseMessage) {$/;"	f	namespace:android
TEST_F	utils/tests/Looper_test.cpp	/^TEST_F(LooperTest, SendMessageAtTime_WhenSentToTheFuture_ShouldInvokeHandlerAfterDelayTime) {$/;"	f	namespace:android
TEST_F	utils/tests/Looper_test.cpp	/^TEST_F(LooperTest, SendMessageAtTime_WhenSentToThePast_ShouldInvokeHandlerDuringNextPoll) {$/;"	f	namespace:android
TEST_F	utils/tests/Looper_test.cpp	/^TEST_F(LooperTest, SendMessageAtTime_WhenSentToThePresent_ShouldInvokeHandlerDuringNextPoll) {$/;"	f	namespace:android
TEST_F	utils/tests/Looper_test.cpp	/^TEST_F(LooperTest, SendMessageDelayed_WhenSentToTheFuture_ShouldInvokeHandlerAfterDelayTime) {$/;"	f	namespace:android
TEST_F	utils/tests/Looper_test.cpp	/^TEST_F(LooperTest, SendMessageDelayed_WhenSentToThePast_ShouldInvokeHandlerDuringNextPoll) {$/;"	f	namespace:android
TEST_F	utils/tests/Looper_test.cpp	/^TEST_F(LooperTest, SendMessageDelayed_WhenSentToThePresent_ShouldInvokeHandlerDuringNextPoll) {$/;"	f	namespace:android
TEST_F	utils/tests/Looper_test.cpp	/^TEST_F(LooperTest, SendMessage_WhenMultipleMessagesAreEnqueued_ShouldInvokeHandlersInOrderDuringNextPoll) {$/;"	f	namespace:android
TEST_F	utils/tests/Looper_test.cpp	/^TEST_F(LooperTest, SendMessage_WhenOneMessageIsEnqueue_ShouldInvokeHandlerDuringNextPoll) {$/;"	f	namespace:android
TEST_F	utils/tests/ObbFile_test.cpp	/^TEST_F(ObbFileTest, ReadFailure) {$/;"	f	namespace:android
TEST_F	utils/tests/ObbFile_test.cpp	/^TEST_F(ObbFileTest, WriteThenRead) {$/;"	f	namespace:android
TEST_F	utils/tests/String8_test.cpp	/^TEST_F(String8Test, Cstr) {$/;"	f	namespace:android
TEST_F	utils/tests/String8_test.cpp	/^TEST_F(String8Test, OperatorPlus) {$/;"	f	namespace:android
TEST_F	utils/tests/String8_test.cpp	/^TEST_F(String8Test, OperatorPlusEquals) {$/;"	f	namespace:android
TEST_F	utils/tests/Unicode_test.cpp	/^TEST_F(UnicodeTest, UTF8toUTF16ASCIILength) {$/;"	f	namespace:android
TEST_F	utils/tests/Unicode_test.cpp	/^TEST_F(UnicodeTest, UTF8toUTF16Normal) {$/;"	f	namespace:android
TEST_F	utils/tests/Unicode_test.cpp	/^TEST_F(UnicodeTest, UTF8toUTF16Plane1Length) {$/;"	f	namespace:android
TEST_F	utils/tests/Unicode_test.cpp	/^TEST_F(UnicodeTest, UTF8toUTF16SurrogateLength) {$/;"	f	namespace:android
TEST_F	utils/tests/Unicode_test.cpp	/^TEST_F(UnicodeTest, UTF8toUTF16TruncatedUTF8) {$/;"	f	namespace:android
TEST_F	utils/tests/Unicode_test.cpp	/^TEST_F(UnicodeTest, UTF8toUTF16ZeroLength) {$/;"	f	namespace:android
TEST_F	utils/tests/ZipFileRO_test.cpp	/^TEST_F(ZipFileROTest, ZipTimeConvertSuccess) {$/;"	f	namespace:android
TEST_FILENAME	utils/tests/ObbFile_test.cpp	30;"	d	file:
TEXT	include/utils/ResourceTypes.h	/^        TEXT = RES_XML_CDATA_TYPE$/;"	e	enum:android::ResXMLParser::event_code_t
TIMED_OUT	include/utils/Errors.h	/^    TIMED_OUT           = -ETIMEDOUT,$/;"	e	enum:android::__anon17
TIMING_TOLERANCE_MS	utils/tests/Looper_test.cpp	15;"	d	file:
TMP_BUFFER_SIZE	include/utils/ResourceTypes.h	/^        TMP_BUFFER_SIZE = 16$/;"	e	enum:android::ResTable::__anon77
TOUCHSCREEN_ANY	include/utils/ResourceTypes.h	/^        TOUCHSCREEN_ANY  = ACONFIGURATION_TOUCHSCREEN_ANY,$/;"	e	enum:android::ResTable_config::__anon46
TOUCHSCREEN_FINGER	include/utils/ResourceTypes.h	/^        TOUCHSCREEN_FINGER  = ACONFIGURATION_TOUCHSCREEN_FINGER,$/;"	e	enum:android::ResTable_config::__anon46
TOUCHSCREEN_NOTOUCH	include/utils/ResourceTypes.h	/^        TOUCHSCREEN_NOTOUCH  = ACONFIGURATION_TOUCHSCREEN_NOTOUCH,$/;"	e	enum:android::ResTable_config::__anon46
TOUCHSCREEN_STYLUS	include/utils/ResourceTypes.h	/^        TOUCHSCREEN_STYLUS  = ACONFIGURATION_TOUCHSCREEN_STYLUS,$/;"	e	enum:android::ResTable_config::__anon46
TRANSPARENT_COLOR	include/utils/ResourceTypes.h	/^        TRANSPARENT_COLOR = 0x00000000$/;"	e	enum:android::Res_png_9patch::__anon35
TYPE	include/utils/Debug.h	/^struct CompileTimeIfElse<false, LHS, RHS> { typedef RHS TYPE; };$/;"	t	struct:android::CompileTimeIfElse
TYPE	include/utils/Debug.h	/^struct CompileTimeIfElse<true,  LHS, RHS> { typedef LHS TYPE; };$/;"	t	struct:android::CompileTimeIfElse
TYPE_ANY	include/utils/ResourceTypes.h	/^        TYPE_ANY = 0x0000FFFF,$/;"	e	enum:android::ResTable_map::__anon75
TYPE_ATTRIBUTE	include/utils/ResourceTypes.h	/^        TYPE_ATTRIBUTE = 0x02,$/;"	e	enum:android::Res_value::__anon37
TYPE_BOOLEAN	include/utils/ResourceTypes.h	/^        TYPE_BOOLEAN = 1<<3,$/;"	e	enum:android::ResTable_map::__anon75
TYPE_COLOR	include/utils/ResourceTypes.h	/^        TYPE_COLOR = 1<<4,$/;"	e	enum:android::ResTable_map::__anon75
TYPE_DIMENSION	include/utils/ResourceTypes.h	/^        TYPE_DIMENSION = 0x05,$/;"	e	enum:android::Res_value::__anon37
TYPE_DIMENSION	include/utils/ResourceTypes.h	/^        TYPE_DIMENSION = 1<<6,$/;"	e	enum:android::ResTable_map::__anon75
TYPE_ENUM	include/utils/ResourceTypes.h	/^        TYPE_ENUM = 1<<16,$/;"	e	enum:android::ResTable_map::__anon75
TYPE_FIRST_COLOR_INT	include/utils/ResourceTypes.h	/^        TYPE_FIRST_COLOR_INT = 0x1c,$/;"	e	enum:android::Res_value::__anon37
TYPE_FIRST_INT	include/utils/ResourceTypes.h	/^        TYPE_FIRST_INT = 0x10,$/;"	e	enum:android::Res_value::__anon37
TYPE_FLAGS	include/utils/ResourceTypes.h	/^        TYPE_FLAGS = 1<<17$/;"	e	enum:android::ResTable_map::__anon75
TYPE_FLOAT	include/utils/ResourceTypes.h	/^        TYPE_FLOAT = 0x04,$/;"	e	enum:android::Res_value::__anon37
TYPE_FLOAT	include/utils/ResourceTypes.h	/^        TYPE_FLOAT = 1<<5,$/;"	e	enum:android::ResTable_map::__anon75
TYPE_FRACTION	include/utils/ResourceTypes.h	/^        TYPE_FRACTION = 0x06,$/;"	e	enum:android::Res_value::__anon37
TYPE_FRACTION	include/utils/ResourceTypes.h	/^        TYPE_FRACTION = 1<<7,$/;"	e	enum:android::ResTable_map::__anon75
TYPE_INTEGER	include/utils/ResourceTypes.h	/^        TYPE_INTEGER = 1<<2,$/;"	e	enum:android::ResTable_map::__anon75
TYPE_INT_BOOLEAN	include/utils/ResourceTypes.h	/^        TYPE_INT_BOOLEAN = 0x12,$/;"	e	enum:android::Res_value::__anon37
TYPE_INT_COLOR_ARGB4	include/utils/ResourceTypes.h	/^        TYPE_INT_COLOR_ARGB4 = 0x1e,$/;"	e	enum:android::Res_value::__anon37
TYPE_INT_COLOR_ARGB8	include/utils/ResourceTypes.h	/^        TYPE_INT_COLOR_ARGB8 = 0x1c,$/;"	e	enum:android::Res_value::__anon37
TYPE_INT_COLOR_RGB4	include/utils/ResourceTypes.h	/^        TYPE_INT_COLOR_RGB4 = 0x1f,$/;"	e	enum:android::Res_value::__anon37
TYPE_INT_COLOR_RGB8	include/utils/ResourceTypes.h	/^        TYPE_INT_COLOR_RGB8 = 0x1d,$/;"	e	enum:android::Res_value::__anon37
TYPE_INT_DEC	include/utils/ResourceTypes.h	/^        TYPE_INT_DEC = 0x10,$/;"	e	enum:android::Res_value::__anon37
TYPE_INT_HEX	include/utils/ResourceTypes.h	/^        TYPE_INT_HEX = 0x11,$/;"	e	enum:android::Res_value::__anon37
TYPE_LAST_COLOR_INT	include/utils/ResourceTypes.h	/^        TYPE_LAST_COLOR_INT = 0x1f,$/;"	e	enum:android::Res_value::__anon37
TYPE_LAST_INT	include/utils/ResourceTypes.h	/^        TYPE_LAST_INT = 0x1f$/;"	e	enum:android::Res_value::__anon37
TYPE_NULL	include/utils/ResourceTypes.h	/^        TYPE_NULL = 0x00,$/;"	e	enum:android::Res_value::__anon37
TYPE_REFERENCE	include/utils/ResourceTypes.h	/^        TYPE_REFERENCE = 0x01,$/;"	e	enum:android::Res_value::__anon37
TYPE_REFERENCE	include/utils/ResourceTypes.h	/^        TYPE_REFERENCE = 1<<0,$/;"	e	enum:android::ResTable_map::__anon75
TYPE_STRING	include/utils/ResourceTypes.h	/^        TYPE_STRING = 0x03,$/;"	e	enum:android::Res_value::__anon37
TYPE_STRING	include/utils/ResourceTypes.h	/^        TYPE_STRING = 1<<1,$/;"	e	enum:android::ResTable_map::__anon75
T_MEMTEST_H	demo/MemoryHeap/IMemTest.h	2;"	d
TearDown	utils/tests/BlobCache_test.cpp	/^    virtual void TearDown() {$/;"	f	class:android::BlobCacheTest
TearDown	utils/tests/Looper_test.cpp	/^    virtual void TearDown() {$/;"	f	class:android::LooperTest
TearDown	utils/tests/ObbFile_test.cpp	/^    virtual void TearDown() {$/;"	f	class:android::ObbFileTest
TearDown	utils/tests/String8_test.cpp	/^    virtual void TearDown() {$/;"	f	class:android::String8Test
TearDown	utils/tests/Unicode_test.cpp	/^    virtual void TearDown() {$/;"	f	class:android::UnicodeTest
TearDown	utils/tests/ZipFileRO_test.cpp	/^    virtual void TearDown() {$/;"	f	class:android::ZipFileROTest
TextOutput	include/utils/TextOutput.h	/^class TextOutput$/;"	c	namespace:android
TextOutput	utils/TextOutput.cpp	/^TextOutput::TextOutput() { $/;"	f	class:android::TextOutput
TextOutputManipFunc	include/utils/TextOutput.h	/^typedef TextOutput& (*TextOutputManipFunc)(TextOutput&);$/;"	t	namespace:android
Theme	include/utils/ResourceTypes.h	/^    class Theme {$/;"	c	class:android::ResTable
Theme	utils/ResourceTypes.cpp	/^ResTable::Theme::Theme(const ResTable& table)$/;"	f	class:android::ResTable::Theme
Thread	include/utils/threads.h	/^class Thread : virtual public RefBase$/;"	c	namespace:android
Thread	utils/Threads.cpp	/^Thread::Thread(bool canCallJava)$/;"	f	class:android::Thread
ThreadState	utils/BufferedTextOutput.cpp	/^struct BufferedTextOutput::ThreadState$/;"	s	class:android::BufferedTextOutput	file:
Tokenizer	include/utils/Tokenizer.h	/^class Tokenizer {$/;"	c	namespace:android
Tokenizer	utils/Tokenizer.cpp	/^Tokenizer::Tokenizer(const String8& filename, FileMap* fileMap, char* buffer, size_t length) :$/;"	f	class:android::Tokenizer
Type	include/utils/List.h	/^        typedef TYPE Type;$/;"	t	struct:android::List::NON_CONST_ITERATOR
Type	include/utils/List.h	/^        typedef const TYPE Type;$/;"	t	struct:android::List::CONST_ITERATOR
Type	utils/ResourceTypes.cpp	/^    Type(const Header* _header, const Package* _package, size_t count)$/;"	f	struct:android::ResTable::Type
Type	utils/ResourceTypes.cpp	/^struct ResTable::Type$/;"	s	class:android::ResTable	file:
TypeCode	include/utils/TextOutput.h	/^class TypeCode $/;"	c	namespace:android
TypeCode	include/utils/TextOutput.h	/^inline TypeCode::TypeCode(uint32_t code) : mCode(code) { }$/;"	f	class:android::TypeCode
UI_MODE_NIGHT_ANY	include/utils/ResourceTypes.h	/^        UI_MODE_NIGHT_ANY = ACONFIGURATION_UI_MODE_NIGHT_ANY << SHIFT_UI_MODE_NIGHT,$/;"	e	enum:android::ResTable_config::__anon65
UI_MODE_NIGHT_NO	include/utils/ResourceTypes.h	/^        UI_MODE_NIGHT_NO = ACONFIGURATION_UI_MODE_NIGHT_NO << SHIFT_UI_MODE_NIGHT,$/;"	e	enum:android::ResTable_config::__anon65
UI_MODE_NIGHT_YES	include/utils/ResourceTypes.h	/^        UI_MODE_NIGHT_YES = ACONFIGURATION_UI_MODE_NIGHT_YES << SHIFT_UI_MODE_NIGHT,$/;"	e	enum:android::ResTable_config::__anon65
UI_MODE_TYPE_ANY	include/utils/ResourceTypes.h	/^        UI_MODE_TYPE_ANY = ACONFIGURATION_UI_MODE_TYPE_ANY,$/;"	e	enum:android::ResTable_config::__anon65
UI_MODE_TYPE_CAR	include/utils/ResourceTypes.h	/^        UI_MODE_TYPE_CAR = ACONFIGURATION_UI_MODE_TYPE_CAR,$/;"	e	enum:android::ResTable_config::__anon65
UI_MODE_TYPE_DESK	include/utils/ResourceTypes.h	/^        UI_MODE_TYPE_DESK = ACONFIGURATION_UI_MODE_TYPE_DESK,$/;"	e	enum:android::ResTable_config::__anon65
UI_MODE_TYPE_NORMAL	include/utils/ResourceTypes.h	/^        UI_MODE_TYPE_NORMAL = ACONFIGURATION_UI_MODE_TYPE_NORMAL,$/;"	e	enum:android::ResTable_config::__anon65
UI_MODE_TYPE_TELEVISION	include/utils/ResourceTypes.h	/^        UI_MODE_TYPE_TELEVISION = ACONFIGURATION_UI_MODE_TYPE_TELEVISION,$/;"	e	enum:android::ResTable_config::__anon65
UNKNOWN_ERROR	include/utils/Errors.h	/^    UNKNOWN_ERROR       = 0x80000000,$/;"	e	enum:android::__anon17
UNKNOWN_TRANSACTION	include/utils/Errors.h	/^    UNKNOWN_TRANSACTION = -EBADMSG,$/;"	e	enum:android::__anon17
UTF8_FLAG	include/utils/ResourceTypes.h	/^        UTF8_FLAG = 1<<8$/;"	e	enum:android::ResStringPool_header::__anon39
UTILS_BITSET_H	include/utils/BitSet.h	18;"	d
UTILS_LOOPER_H	include/utils/Looper.h	18;"	d
UnicodeTest	utils/tests/Unicode_test.cpp	/^class UnicodeTest : public testing::Test {$/;"	c	namespace:android	file:
Vector	include/utils/Vector.h	/^Vector<TYPE>::Vector()$/;"	f	class:android::Vector
Vector	include/utils/Vector.h	/^Vector<TYPE>::Vector(const SortedVector<TYPE>& rhs)$/;"	f	class:android::Vector
Vector	include/utils/Vector.h	/^Vector<TYPE>::Vector(const Vector<TYPE>& rhs)$/;"	f	class:android::Vector
Vector	include/utils/Vector.h	/^class Vector : private VectorImpl$/;"	c	namespace:android
VectorImpl	include/utils/VectorImpl.h	/^class VectorImpl$/;"	c	namespace:android
VectorImpl	utils/VectorImpl.cpp	/^VectorImpl::VectorImpl(const VectorImpl& rhs)$/;"	f	class:android::VectorImpl
VectorImpl	utils/VectorImpl.cpp	/^VectorImpl::VectorImpl(size_t itemSize, uint32_t flags)$/;"	f	class:android::VectorImpl
WHITESPACE	utils/PropertyMap.cpp	/^static const char* WHITESPACE = " \\t\\r";$/;"	m	namespace:android	file:
WHITESPACE_OR_PROPERTY_DELIMITER	utils/PropertyMap.cpp	/^static const char* WHITESPACE_OR_PROPERTY_DELIMITER = " \\t\\r=";$/;"	m	namespace:android	file:
WILLNEED	include/utils/FileMap.h	/^        NORMAL, RANDOM, SEQUENTIAL, WILLNEED, DONTNEED$/;"	e	enum:android::FileMap::MapAdvice
WOULD_BLOCK	include/utils/Errors.h	/^    WOULD_BLOCK         = -EWOULDBLOCK, $/;"	e	enum:android::__anon17
WeakMessageHandler	include/utils/Looper.h	/^class WeakMessageHandler : public MessageHandler {$/;"	c	namespace:android
WeakMessageHandler	utils/Looper.cpp	/^WeakMessageHandler::WeakMessageHandler(const wp<MessageHandler>& handler) :$/;"	f	class:android::WeakMessageHandler
WriteEntityData	utils/BackupData.cpp	/^BackupDataWriter::WriteEntityData(const void* data, size_t size)$/;"	f	class:android::BackupDataWriter
WriteEntityHeader	utils/BackupData.cpp	/^BackupDataWriter::WriteEntityHeader(const String8& key, size_t dataSize)$/;"	f	class:android::BackupDataWriter
WriteFile	utils/BackupHelpers.cpp	/^RestoreHelperBase::WriteFile(const String8& filename, BackupDataReader* in)$/;"	f	class:android::RestoreHelperBase
WriteSnapshot	utils/BackupHelpers.cpp	/^RestoreHelperBase::WriteSnapshot(int fd)$/;"	f	class:android::RestoreHelperBase
XML_NOISY	utils/ResourceTypes.cpp	40;"	d	file:
ZD	utils/ZipFileRO.cpp	36;"	d	file:
ZD	utils/ZipFileRO.cpp	39;"	d	file:
ZD_TYPE	utils/ZipFileRO.cpp	37;"	d	file:
ZD_TYPE	utils/ZipFileRO.cpp	40;"	d	file:
ZipEntryCRO	include/utils/ZipFileCRO.h	/^typedef void* ZipEntryCRO;$/;"	t
ZipEntryRO	include/utils/ZipFileRO.h	/^typedef void* ZipEntryRO;$/;"	t	namespace:android
ZipFileCRO	include/utils/ZipFileCRO.h	/^typedef void* ZipFileCRO;$/;"	t
ZipFileCRO_destroy	utils/ZipFileCRO.cpp	/^void ZipFileCRO_destroy(ZipFileCRO zipToken) {$/;"	f
ZipFileCRO_findEntryByName	utils/ZipFileCRO.cpp	/^ZipEntryCRO ZipFileCRO_findEntryByName(ZipFileCRO zipToken,$/;"	f
ZipFileCRO_getEntryInfo	utils/ZipFileCRO.cpp	/^bool ZipFileCRO_getEntryInfo(ZipFileCRO zipToken, ZipEntryRO entryToken,$/;"	f
ZipFileCRO_uncompressEntry	utils/ZipFileCRO.cpp	/^bool ZipFileCRO_uncompressEntry(ZipFileCRO zipToken, ZipEntryRO entryToken, int fd) {$/;"	f
ZipFileRO	include/utils/ZipFileRO.h	/^    ZipFileRO()$/;"	f	class:android::ZipFileRO
ZipFileRO	include/utils/ZipFileRO.h	/^class ZipFileRO {$/;"	c	namespace:android
ZipFileROTest	utils/tests/ZipFileRO_test.cpp	/^class ZipFileROTest : public testing::Test {$/;"	c	namespace:android	file:
ZipFileXRO_open	utils/ZipFileCRO.cpp	/^ZipFileCRO ZipFileXRO_open(const char* path) {$/;"	f
ZipSet	include/utils/AssetManager.h	/^    class ZipSet {$/;"	c	class:android::AssetManager
ZipSet	utils/AssetManager.cpp	/^AssetManager::ZipSet::ZipSet(void)$/;"	f	class:AssetManager::ZipSet
ZipUtils	include/utils/ZipUtils.h	/^    ZipUtils() {}$/;"	f	class:android::ZipUtils
ZipUtils	include/utils/ZipUtils.h	/^class ZipUtils {$/;"	c	namespace:android
_CompressedAsset	include/utils/Asset.h	/^class _CompressedAsset : public Asset {$/;"	c	namespace:android
_CompressedAsset	utils/Asset.cpp	/^_CompressedAsset::_CompressedAsset(void)$/;"	f	class:_CompressedAsset
_FileAsset	include/utils/Asset.h	/^class _FileAsset : public Asset {$/;"	c	namespace:android
_FileAsset	utils/Asset.cpp	/^_FileAsset::_FileAsset(void)$/;"	f	class:_FileAsset
_Iter	include/utils/List.h	/^        typedef _ListIterator<U, Constness>     _Iter;$/;"	t	class:android::List::_ListIterator
_LIBS_UTILS_BYTE_ORDER_H	include/utils/ByteOrder.h	20;"	d
_LIBS_UTILS_ENDIAN_H	include/utils/Endian.h	21;"	d
_LIBS_UTILS_LINEAR_TRANSFORM_H	include/utils/LinearTransform.h	18;"	d
_LIBS_UTILS_LIST_H	include/utils/List.h	28;"	d
_LIBS_UTILS_LOG_H	include/utils/Log.h	29;"	d
_LIBS_UTILS_MISC_H	include/utils/misc.h	21;"	d
_LIBS_UTILS_RESOURCE_TYPES_H	include/utils/ResourceTypes.h	21;"	d
_LIBS_UTILS_STRING_ARRAY_H	include/utils/StringArray.h	21;"	d
_LIBS_UTILS_THREADS_H	include/utils/threads.h	18;"	d
_LIBS_UTILS_TIMERS_H	include/utils/Timers.h	21;"	d
_ListIterator	include/utils/List.h	/^        _ListIterator() {}$/;"	f	class:android::List::_ListIterator
_ListIterator	include/utils/List.h	/^        _ListIterator(const V& rhs) : mpNode(rhs.mpNode) {}$/;"	f	class:android::List::_ListIterator
_ListIterator	include/utils/List.h	/^        _ListIterator(const _Iter& rhs) : mpNode(rhs.mpNode) {}$/;"	f	class:android::List::_ListIterator
_ListIterator	include/utils/List.h	/^        explicit _ListIterator(_NodePtr ptr) : mpNode(ptr) {}$/;"	f	class:android::List::_ListIterator
_ListIterator	include/utils/List.h	/^    class _ListIterator {$/;"	c	class:android::List
_Node	include/utils/List.h	/^        explicit _Node(const T& val) : mVal(val) {}$/;"	f	class:android::List::_Node
_Node	include/utils/List.h	/^    class _Node {$/;"	c	class:android::List
_NodePtr	include/utils/List.h	/^        typedef typename Constness<U>::NodePtr  _NodePtr;$/;"	t	class:android::List::_ListIterator
_Type	include/utils/List.h	/^        typedef typename Constness<U>::Type     _Type;$/;"	t	class:android::List::_ListIterator
_UTILS_ASHMEM_H	include/utils/ashmem.h	11;"	d
_UTILS_BACKUP_HELPERS_H	include/utils/BackupHelpers.h	18;"	d
_UTILS_PROPERTY_MAP_H	include/utils/PropertyMap.h	18;"	d
_UTILS_TOKENIZER_H	include/utils/Tokenizer.h	18;"	d
__ASHMEMIOC	include/utils/ashmem.h	28;"	d
__BIG_ENDIAN	include/utils/Endian.h	29;"	d
__BYTE_ORDER	include/utils/Endian.h	33;"	d
__BYTE_ORDER	include/utils/Endian.h	35;"	d
__LIBS_ASSETDIR_H	include/utils/AssetDir.h	21;"	d
__LIBS_ASSETMANAGER_H	include/utils/AssetManager.h	21;"	d
__LIBS_ASSET_H	include/utils/Asset.h	22;"	d
__LIBS_FILE_MAP_H	include/utils/FileMap.h	21;"	d
__LIBS_STREAMINGZIPINFLATER_H	include/utils/StreamingZipInflater.h	18;"	d
__LIBS_ZIPFILECRO_H	include/utils/ZipFileCRO.h	21;"	d
__LIBS_ZIPFILERO_H	include/utils/ZipFileRO.h	31;"	d
__LIBS_ZIPUTILS_H	include/utils/ZipUtils.h	21;"	d
__LIB_UTILS_COMPAT_H	include/utils/Compat.h	18;"	d
__LITTLE_ENDIAN	include/utils/Endian.h	30;"	d
__STDC_LIMIT_MACROS	utils/LinearTransform.cpp	17;"	d	file:
_do_construct	utils/VectorImpl.cpp	/^void VectorImpl::_do_construct(void* storage, size_t num) const$/;"	f	class:android::VectorImpl
_do_copy	utils/VectorImpl.cpp	/^void VectorImpl::_do_copy(void* dest, const void* from, size_t num) const$/;"	f	class:android::VectorImpl
_do_destroy	utils/VectorImpl.cpp	/^void VectorImpl::_do_destroy(void* storage, size_t num) const$/;"	f	class:android::VectorImpl
_do_move_backward	utils/VectorImpl.cpp	/^void VectorImpl::_do_move_backward(void* dest, const void* from, size_t num) const {$/;"	f	class:android::VectorImpl
_do_move_forward	utils/VectorImpl.cpp	/^void VectorImpl::_do_move_forward(void* dest, const void* from, size_t num) const {$/;"	f	class:android::VectorImpl
_do_splat	utils/VectorImpl.cpp	/^void VectorImpl::_do_splat(void* dest, const void* item, size_t num) const {$/;"	f	class:android::VectorImpl
_grow	utils/VectorImpl.cpp	/^void* VectorImpl::_grow(size_t where, size_t amount)$/;"	f	class:android::VectorImpl
_indexOrderOf	utils/VectorImpl.cpp	/^ssize_t SortedVectorImpl::_indexOrderOf(const void* item, size_t* order) const$/;"	f	class:android::SortedVectorImpl
_shrink	utils/VectorImpl.cpp	/^void VectorImpl::_shrink(size_t where, size_t amount)$/;"	f	class:android::VectorImpl
_threadLoop	utils/Threads.cpp	/^int Thread::_threadLoop(void* user)$/;"	f	class:android::Thread
a	demo/MemoryHeap/IMemTest.h	/^	int a;$/;"	m	struct:android::priv_info
a_to_b_denom	include/utils/LinearTransform.h	/^  uint32_t a_to_b_denom;$/;"	m	struct:android::LinearTransform
a_to_b_numer	include/utils/LinearTransform.h	/^  int32_t  a_to_b_numer;$/;"	m	struct:android::LinearTransform
a_zero	include/utils/LinearTransform.h	/^  int64_t  a_zero;$/;"	m	struct:android::LinearTransform
acquire	include/utils/FileMap.h	/^    FileMap* acquire(void) { mRefCount++; return this; }$/;"	f	class:android::FileMap
acquire	utils/SharedBuffer.cpp	/^void SharedBuffer::acquire() const {$/;"	f	class:android::SharedBuffer
add	include/utils/KeyedVector.h	/^ssize_t KeyedVector<KEY,VALUE>::add(const KEY& key, const VALUE& value) {$/;"	f	class:android::KeyedVector
add	include/utils/SortedVector.h	/^ssize_t SortedVector<TYPE>::add(const TYPE& item) {$/;"	f	class:android::SortedVector
add	include/utils/Vector.h	/^ssize_t Vector<TYPE>::add() {$/;"	f	class:android::Vector
add	include/utils/Vector.h	/^ssize_t Vector<TYPE>::add(const TYPE& item) {$/;"	f	class:android::Vector
add	utils/ResourceTypes.cpp	/^status_t ResTable::add(Asset* asset, void* cookie, bool copyData, const void* idmap)$/;"	f	class:android::ResTable
add	utils/ResourceTypes.cpp	/^status_t ResTable::add(ResTable* src)$/;"	f	class:android::ResTable
add	utils/ResourceTypes.cpp	/^status_t ResTable::add(const void* data, size_t size, void* cookie, bool copyData,$/;"	f	class:android::ResTable
add	utils/ResourceTypes.cpp	/^status_t ResTable::add(const void* data, size_t size, void* cookie,$/;"	f	class:android::ResTable
add	utils/VectorImpl.cpp	/^ssize_t SortedVectorImpl::add(const void* item)$/;"	f	class:android::SortedVectorImpl
add	utils/VectorImpl.cpp	/^ssize_t VectorImpl::add()$/;"	f	class:android::VectorImpl
add	utils/VectorImpl.cpp	/^ssize_t VectorImpl::add(const void* item)$/;"	f	class:android::VectorImpl
addAll	utils/PropertyMap.cpp	/^void PropertyMap::addAll(const PropertyMap* map) {$/;"	f	class:android::PropertyMap
addAssetPath	utils/AssetManager.cpp	/^bool AssetManager::addAssetPath(const String8& path, void** cookie)$/;"	f	class:AssetManager
addDefaultAssets	utils/AssetManager.cpp	/^bool AssetManager::addDefaultAssets()$/;"	f	class:AssetManager
addFd	utils/Looper.cpp	/^int Looper::addFd(int fd, int ident, int events, ALooper_callbackFunc callback, void* data) {$/;"	f	class:android::Looper
addProperty	utils/PropertyMap.cpp	/^void PropertyMap::addProperty(const String8& key, const String8& value) {$/;"	f	class:android::PropertyMap
addRef	utils/RefBase.cpp	/^    void addRef(ref_entry** refs, const void* id, int32_t mRef)$/;"	f	class:android::RefBase::weakref_impl	file:
addStrongRef	utils/RefBase.cpp	/^    void addStrongRef(const void* \/*id*\/) { }$/;"	f	class:android::RefBase::weakref_impl
addStrongRef	utils/RefBase.cpp	/^    void addStrongRef(const void* id) {$/;"	f	class:android::RefBase::weakref_impl
addToCache	include/utils/GenerationCache.h	/^void GenerationCache<K, V>::addToCache(sp<Entry<K, V> > entry, K key, V value) {$/;"	f	class:android::GenerationCache
addToHash	utils/ZipFileRO.cpp	/^void ZipFileRO::addToHash(const char* str, int strLen, unsigned int hash)$/;"	f	class:ZipFileRO
addToTimeval	utils/Timers.cpp	/^\/*static*\/ void DurationTimer::addToTimeval(struct timeval* ptv, long usec)$/;"	f	class:DurationTimer
addWeakRef	utils/RefBase.cpp	/^    void addWeakRef(const void* \/*id*\/) { }$/;"	f	class:android::RefBase::weakref_impl
addWeakRef	utils/RefBase.cpp	/^    void addWeakRef(const void* id) {$/;"	f	class:android::RefBase::weakref_impl
addrs	utils/CallStack.cpp	/^    const void** addrs;$/;"	m	struct:android::__anon4	file:
advise	utils/FileMap.cpp	/^int FileMap::advise(MapAdvice advice)$/;"	f	class:FileMap
aggregate_traits	include/utils/TypeHelpers.h	/^struct aggregate_traits {$/;"	s	namespace:android
alignment	include/utils/TextOutput.h	/^inline size_t HexDump::alignment() const { return mAlignment; }$/;"	f	class:android::HexDump
alloc	utils/SharedBuffer.cpp	/^SharedBuffer* SharedBuffer::alloc(size_t size)$/;"	f	class:android::SharedBuffer
allocBufferIndex	utils/BufferedTextOutput.cpp	/^static int32_t allocBufferIndex()$/;"	f	namespace:android
allocFromUTF16	utils/String8.cpp	/^static char* allocFromUTF16(const char16_t* in, size_t len)$/;"	f	namespace:android
allocFromUTF32	utils/String8.cpp	/^static char* allocFromUTF32(const char32_t* in, size_t len)$/;"	f	namespace:android
allocFromUTF8	utils/String16.cpp	/^static char16_t* allocFromUTF8(const char* u8str, size_t u8len)$/;"	f	namespace:android
allocFromUTF8	utils/String8.cpp	/^static char* allocFromUTF8(const char* in, size_t len)$/;"	f	namespace:android
android	demo/MemoryHeap/IMemTest.cpp	/^namespace android {$/;"	n	file:
android	demo/MemoryHeap/IMemTest.h	/^namespace android {$/;"	n
android	include/utils/Asset.h	/^namespace android {$/;"	n
android	include/utils/AssetDir.h	/^namespace android {$/;"	n
android	include/utils/AssetManager.h	/^namespace android {$/;"	n
android	include/utils/BackupHelpers.h	/^namespace android {$/;"	n
android	include/utils/BitSet.h	/^namespace android {$/;"	n
android	include/utils/BlobCache.h	/^namespace android {$/;"	n
android	include/utils/BufferedTextOutput.h	/^namespace android {$/;"	n
android	include/utils/CallStack.h	/^namespace android {$/;"	n
android	include/utils/Debug.h	/^namespace android {$/;"	n
android	include/utils/Errors.h	/^namespace android {$/;"	n
android	include/utils/FileMap.h	/^namespace android {$/;"	n
android	include/utils/Flattenable.h	/^namespace android {$/;"	n
android	include/utils/Functor.h	/^namespace  android {$/;"	n
android	include/utils/GenerationCache.h	/^namespace android {$/;"	n
android	include/utils/KeyedVector.h	/^namespace android {$/;"	n
android	include/utils/LinearTransform.h	/^namespace android {$/;"	n
android	include/utils/List.h	/^namespace android {$/;"	n
android	include/utils/Looper.h	/^namespace android {$/;"	n
android	include/utils/ObbFile.h	/^namespace android {$/;"	n
android	include/utils/PropertyMap.h	/^namespace android {$/;"	n
android	include/utils/RefBase.h	/^namespace android {$/;"	n
android	include/utils/ResourceTypes.h	/^namespace android {$/;"	n
android	include/utils/SharedBuffer.h	/^namespace android {$/;"	n
android	include/utils/Singleton.h	/^namespace android {$/;"	n
android	include/utils/SortedVector.h	/^namespace android {$/;"	n
android	include/utils/StopWatch.h	/^namespace android {$/;"	n
android	include/utils/StreamingZipInflater.h	/^namespace android {$/;"	n
android	include/utils/String16.h	/^namespace android {$/;"	n
android	include/utils/String8.h	/^namespace android {$/;"	n
android	include/utils/StringArray.h	/^namespace android {$/;"	n
android	include/utils/StrongPointer.h	/^namespace android {$/;"	n
android	include/utils/SystemClock.h	/^namespace android {$/;"	n
android	include/utils/TextOutput.h	/^namespace android {$/;"	n
android	include/utils/Timers.h	/^namespace android {$/;"	n
android	include/utils/Tokenizer.h	/^namespace android {$/;"	n
android	include/utils/TypeHelpers.h	/^namespace android {$/;"	n
android	include/utils/Vector.h	/^namespace android {$/;"	n
android	include/utils/VectorImpl.h	/^namespace android {$/;"	n
android	include/utils/ZipFileRO.h	/^namespace android {$/;"	n
android	include/utils/ZipUtils.h	/^namespace android {$/;"	n
android	include/utils/misc.h	/^namespace android {$/;"	n
android	include/utils/threads.h	/^namespace android {$/;"	n
android	utils/BackupData.cpp	/^namespace android {$/;"	n	file:
android	utils/BackupHelpers.cpp	/^namespace android {$/;"	n	file:
android	utils/BlobCache.cpp	/^namespace android {$/;"	n	file:
android	utils/BufferedTextOutput.cpp	/^namespace android {$/;"	n	file:
android	utils/CallStack.cpp	/^namespace android {$/;"	n	file:
android	utils/Debug.cpp	/^namespace android {$/;"	n	file:
android	utils/Flattenable.cpp	/^namespace android {$/;"	n	file:
android	utils/LinearTransform.cpp	/^namespace android {$/;"	n	file:
android	utils/Looper.cpp	/^namespace android {$/;"	n	file:
android	utils/ObbFile.cpp	/^namespace android {$/;"	n	file:
android	utils/PropertyMap.cpp	/^namespace android {$/;"	n	file:
android	utils/RefBase.cpp	/^namespace android {$/;"	n	file:
android	utils/ResourceTypes.cpp	/^namespace android {$/;"	n	file:
android	utils/SharedBuffer.cpp	/^namespace android {$/;"	n	file:
android	utils/Static.cpp	/^namespace android {$/;"	n	file:
android	utils/StopWatch.cpp	/^namespace android {$/;"	n	file:
android	utils/String16.cpp	/^namespace android {$/;"	n	file:
android	utils/String8.cpp	/^namespace android {$/;"	n	file:
android	utils/StringArray.cpp	/^namespace android {$/;"	n	file:
android	utils/SystemClock.cpp	/^namespace android {$/;"	n	file:
android	utils/TextOutput.cpp	/^namespace android {$/;"	n	file:
android	utils/Threads.cpp	/^namespace android {$/;"	n	file:
android	utils/Tokenizer.cpp	/^namespace android {$/;"	n	file:
android	utils/VectorImpl.cpp	/^namespace android {$/;"	n	file:
android	utils/misc.cpp	/^namespace android {$/;"	n	file:
android	utils/tests/BlobCache_test.cpp	/^namespace android {$/;"	n	file:
android	utils/tests/Looper_test.cpp	/^namespace android {$/;"	n	file:
android	utils/tests/ObbFile_test.cpp	/^namespace android {$/;"	n	file:
android	utils/tests/String8_test.cpp	/^namespace android {$/;"	n	file:
android	utils/tests/TestHelpers.h	/^namespace android {$/;"	n
android	utils/tests/Unicode_test.cpp	/^namespace android {$/;"	n	file:
android	utils/tests/ZipFileRO_test.cpp	/^namespace android {$/;"	n	file:
androidCreateRawThreadEtc	utils/Threads.cpp	/^int androidCreateRawThreadEtc(android_thread_func_t entryFunction,$/;"	f
androidCreateThread	utils/Threads.cpp	/^int androidCreateThread(android_thread_func_t fn, void* arg)$/;"	f
androidCreateThreadEtc	utils/Threads.cpp	/^int androidCreateThreadEtc(android_thread_func_t entryFunction,$/;"	f
androidCreateThreadGetID	utils/Threads.cpp	/^int androidCreateThreadGetID(android_thread_func_t fn, void *arg, android_thread_id_t *id)$/;"	f
androidGetThreadId	utils/Threads.cpp	/^android_thread_id_t androidGetThreadId()$/;"	f
androidGetThreadPriority	utils/Threads.cpp	/^int androidGetThreadPriority(pid_t tid) {$/;"	f
androidGetThreadSchedulingGroup	utils/Threads.cpp	/^int androidGetThreadSchedulingGroup(pid_t tid)$/;"	f
androidGetTid	utils/Threads.cpp	/^pid_t androidGetTid()$/;"	f
androidSetCreateThreadFunc	utils/Threads.cpp	/^void androidSetCreateThreadFunc(android_create_thread_fn func)$/;"	f
androidSetThreadPriority	utils/Threads.cpp	/^int androidSetThreadPriority(pid_t tid, int pri)$/;"	f
androidSetThreadSchedulingGroup	utils/Threads.cpp	/^int androidSetThreadSchedulingGroup(pid_t tid, int grp)$/;"	f
android_create_thread_fn	include/utils/threads.h	/^typedef int (*android_create_thread_fn)(android_thread_func_t entryFunction,$/;"	t
android_pthread_entry	utils/Threads.cpp	/^typedef void* (*android_pthread_entry)(void*);$/;"	t	file:
android_swap_long	include/utils/ByteOrder.h	/^static inline uint32_t android_swap_long(uint32_t v)$/;"	f
android_swap_short	include/utils/ByteOrder.h	/^static inline uint16_t android_swap_short(uint16_t v)$/;"	f
android_thread_func_t	include/utils/threads.h	/^typedef int (*android_thread_func_t)(void*);$/;"	t
android_thread_id_t	include/utils/threads.h	/^typedef void* android_thread_id_t;$/;"	t
append	utils/BufferedTextOutput.cpp	/^    status_t append(const char* txt, size_t len) {$/;"	f	struct:android::BufferedTextOutput::BufferState
append	utils/String16.cpp	/^status_t String16::append(const String16& other)$/;"	f	class:android::String16
append	utils/String16.cpp	/^status_t String16::append(const char16_t* chrs, size_t otherLen)$/;"	f	class:android::String16
append	utils/String8.cpp	/^status_t String8::append(const String8& other)$/;"	f	class:android::String8
append	utils/String8.cpp	/^status_t String8::append(const char* other)$/;"	f	class:android::String8
append	utils/String8.cpp	/^status_t String8::append(const char* other, size_t otherLen)$/;"	f	class:android::String8
appendArray	include/utils/Vector.h	/^ssize_t Vector<TYPE>::appendArray(const TYPE* array, size_t length) {$/;"	f	class:android::Vector
appendArray	utils/VectorImpl.cpp	/^ssize_t VectorImpl::appendArray(const void* array, size_t length)$/;"	f	class:android::VectorImpl
appendFormat	utils/String8.cpp	/^status_t String8::appendFormat(const char* fmt, ...)$/;"	f	class:android::String8
appendFormatV	utils/String8.cpp	/^status_t String8::appendFormatV(const char* fmt, va_list args)$/;"	f	class:android::String8
appendPath	include/utils/String8.h	/^    String8& appendPath(const String8& leaf)  { return appendPath(leaf.string()); }$/;"	f	class:android::String8
appendPath	utils/String8.cpp	/^String8& String8::appendPath(const char* name)$/;"	f	class:android::String8
appendPathCopy	include/utils/String8.h	/^    String8 appendPathCopy(const String8& leaf) const { return appendPathCopy(leaf.string()); }$/;"	f	class:android::String8
appendPathCopy	include/utils/String8.h	/^    String8 appendPathCopy(const char* leaf) const$/;"	f	class:android::String8
appendVector	include/utils/Vector.h	/^ssize_t Vector<TYPE>::appendVector(const Vector<TYPE>& vector) {$/;"	f	class:android::Vector
appendVector	utils/VectorImpl.cpp	/^ssize_t VectorImpl::appendVector(const VectorImpl& vector)$/;"	f	class:android::VectorImpl
appendcharornum	utils/Debug.cpp	/^static char* appendcharornum(char c, char* out, bool skipzero = true)$/;"	f	namespace:android
appendhexnum	utils/Debug.cpp	/^static char* appendhexnum(uint32_t val, char* out)$/;"	f	namespace:android
appendupperhexnum	utils/Debug.cpp	/^static char* appendupperhexnum(uint32_t val, char* out)$/;"	f	namespace:android
applyStyle	utils/ResourceTypes.cpp	/^status_t ResTable::Theme::applyStyle(uint32_t resID, bool force)$/;"	f	class:android::ResTable::Theme
array	include/utils/SortedVector.h	/^const TYPE* SortedVector<TYPE>::array() const {$/;"	f	class:android::SortedVector
array	include/utils/Vector.h	/^const TYPE* Vector<TYPE>::array() const {$/;"	f	class:android::Vector
arrayImpl	include/utils/VectorImpl.h	/^    inline  const void*     arrayImpl() const       { return mStorage; }$/;"	f	class:android::VectorImpl
assertIdmapHeader	utils/ResourceTypes.cpp	/^static bool assertIdmapHeader(const uint32_t* map, size_t sizeBytes)$/;"	f	namespace:android
asset_path	include/utils/AssetManager.h	/^    struct asset_path$/;"	s	class:android::AssetManager
atFront	utils/BufferedTextOutput.cpp	/^    bool atFront;$/;"	m	struct:android::BufferedTextOutput::BufferState	file:
attachToCache	include/utils/GenerationCache.h	/^void GenerationCache<K, V>::attachToCache(sp<Entry<K, V> > entry) {$/;"	f	class:android::GenerationCache
attemptEdit	utils/SharedBuffer.cpp	/^SharedBuffer* SharedBuffer::attemptEdit() const$/;"	f	class:android::SharedBuffer
attemptIncStrong	utils/RefBase.cpp	/^bool RefBase::weakref_type::attemptIncStrong(const void* id)$/;"	f	class:android::RefBase::weakref_type
attemptIncWeak	utils/RefBase.cpp	/^bool RefBase::weakref_type::attemptIncWeak(const void* id)$/;"	f	class:android::RefBase::weakref_type
attributeCount	include/utils/ResourceTypes.h	/^    uint16_t attributeCount;$/;"	m	struct:android::ResXMLTree_attrExt
attributeSize	include/utils/ResourceTypes.h	/^    uint16_t attributeSize;$/;"	m	struct:android::ResXMLTree_attrExt
attributeStart	include/utils/ResourceTypes.h	/^    uint16_t attributeStart;$/;"	m	struct:android::ResXMLTree_attrExt
availAttrs	utils/ResourceTypes.cpp	/^    size_t availAttrs;  \/\/ total space in array$/;"	m	struct:android::ResTable::bag_set	file:
awoken	utils/Looper.cpp	/^void Looper::awoken() {$/;"	f	class:android::Looper
b_zero	include/utils/LinearTransform.h	/^  int64_t  b_zero;$/;"	m	struct:android::LinearTransform
back_up_files	utils/BackupHelpers.cpp	/^back_up_files(int oldSnapshotFD, BackupDataWriter* dataStream, int newSnapshotFD,$/;"	f	namespace:android
backtrace	utils/CallStack.cpp	/^int backtrace(const void** addrs, size_t ignore, size_t size)$/;"	f	namespace:android
backup_helper_test_data_reader	utils/BackupHelpers.cpp	/^backup_helper_test_data_reader()$/;"	f	namespace:android
backup_helper_test_data_writer	utils/BackupHelpers.cpp	/^backup_helper_test_data_writer()$/;"	f	namespace:android
backup_helper_test_empty	utils/BackupHelpers.cpp	/^backup_helper_test_empty()$/;"	f	namespace:android
backup_helper_test_files	utils/BackupHelpers.cpp	/^backup_helper_test_files()$/;"	f	namespace:android
backup_helper_test_four	utils/BackupHelpers.cpp	/^backup_helper_test_four()$/;"	f	namespace:android
backup_helper_test_missing_file	utils/BackupHelpers.cpp	/^backup_helper_test_missing_file()$/;"	f	namespace:android
backup_helper_test_null_base	utils/BackupHelpers.cpp	/^backup_helper_test_null_base()$/;"	f	namespace:android
bag_entry	include/utils/ResourceTypes.h	/^    struct bag_entry {$/;"	s	class:android::ResTable
bag_set	utils/ResourceTypes.cpp	/^struct ResTable::bag_set$/;"	s	class:android::ResTable	file:
bags	utils/ResourceTypes.cpp	/^    bag_set***                      bags;$/;"	m	struct:android::ResTable::PackageGroup	file:
basePackage	utils/ResourceTypes.cpp	/^    Package*                        basePackage;$/;"	m	struct:android::ResTable::PackageGroup	file:
basetype	include/utils/RefBase.h	/^    typedef LightRefBase<T> basetype;$/;"	t	class:android::LightRefBase
basetype	include/utils/RefBase.h	/^    typedef RefBase basetype;$/;"	t	class:android::RefBase
begin	include/utils/List.h	/^    inline const_iterator begin() const { $/;"	f	class:android::List
begin	include/utils/List.h	/^    inline iterator begin() { $/;"	f	class:android::List
begin	include/utils/Vector.h	/^     inline const_iterator begin() const { return array(); }$/;"	f	class:android::Vector
begin	include/utils/Vector.h	/^     inline iterator begin() { return editArray(); }$/;"	f	class:android::Vector
blob_random	utils/BlobCache.cpp	/^long int BlobCache::blob_random() {$/;"	f	class:android::BlobCache
broadcast	include/utils/threads.h	/^inline void Condition::broadcast() {$/;"	f	class:android::Condition
buffer	include/utils/TextOutput.h	/^inline const void* HexDump::buffer() const { return mBuffer; }$/;"	f	class:android::HexDump
buffer	utils/BufferedTextOutput.cpp	/^    char* buffer;$/;"	m	struct:android::BufferedTextOutput::BufferState	file:
bufferFromData	include/utils/SharedBuffer.h	/^SharedBuffer* SharedBuffer::bufferFromData(void* data)$/;"	f	class:android::SharedBuffer
bufferFromData	include/utils/SharedBuffer.h	/^const SharedBuffer* SharedBuffer::bufferFromData(const void* data)$/;"	f	class:android::SharedBuffer
bufferPos	utils/BufferedTextOutput.cpp	/^    size_t bufferPos;$/;"	m	struct:android::BufferedTextOutput::BufferState	file:
bufferSize	utils/BufferedTextOutput.cpp	/^    size_t bufferSize;$/;"	m	struct:android::BufferedTextOutput::BufferState	file:
bundle	utils/BufferedTextOutput.cpp	/^    int32_t bundle;$/;"	m	struct:android::BufferedTextOutput::BufferState	file:
bytes	include/utils/String8.h	/^inline size_t String8::bytes() const$/;"	f	class:android::String8
bytesPerLine	include/utils/TextOutput.h	/^inline size_t HexDump::bytesPerLine() const { return mBytesPerLine; }$/;"	f	class:android::HexDump
c	demo/MemoryHeap/IMemTest.h	/^	char c;$/;"	m	struct:android::priv_info
c_includes	utils/tests/Android.mk	/^c_includes := \\$/;"	m
calc_tar_checksum	utils/BackupHelpers.cpp	/^static void calc_tar_checksum(char* buf) {$/;"	f	namespace:android
callback	include/utils/Looper.h	/^        ALooper_callbackFunc callback;$/;"	m	struct:android::Looper::Request
callbackCount	utils/tests/Looper_test.cpp	/^    int callbackCount;$/;"	m	class:android::StubCallbackHandler	file:
capacity	include/utils/KeyedVector.h	/^    inline  size_t          capacity() const            { return mVector.capacity(); }$/;"	f	class:android::KeyedVector
capacity	include/utils/SortedVector.h	/^    inline  size_t          capacity() const            { return VectorImpl::capacity(); }$/;"	f	class:android::SortedVector
capacity	include/utils/Vector.h	/^    inline  size_t          capacity() const            { return VectorImpl::capacity(); }$/;"	f	class:android::Vector
capacity	utils/VectorImpl.cpp	/^size_t VectorImpl::capacity() const$/;"	f	class:android::VectorImpl
carrayStyle	include/utils/TextOutput.h	/^inline bool HexDump::carrayStyle() const { return mCArrayStyle; }$/;"	f	class:android::HexDump
char16_t	include/utils/Unicode.h	/^typedef uint16_t char16_t;$/;"	t
char32_t	include/utils/Unicode.h	/^typedef uint32_t char32_t;$/;"	t
checkDoSchedulingGroup	utils/Threads.cpp	/^static void checkDoSchedulingGroup(void) {$/;"	f	file:
child	include/utils/GenerationCache.h	/^    sp<Entry<EntryKey, EntryValue> > child;$/;"	m	struct:android::Entry
classIndex	include/utils/ResourceTypes.h	/^    uint16_t classIndex;$/;"	m	struct:android::ResXMLTree_attrExt
clean	utils/BlobCache.cpp	/^void BlobCache::clean() {$/;"	f	class:android::BlobCache
clear	include/utils/BitSet.h	/^    inline void clear() { value = 0; }$/;"	f	struct:android::BitSet32
clear	include/utils/GenerationCache.h	/^void GenerationCache<K, V>::clear() {$/;"	f	class:android::GenerationCache
clear	include/utils/KeyedVector.h	/^    inline  void            clear()                     { mVector.clear(); }$/;"	f	class:android::KeyedVector
clear	include/utils/List.h	/^    void clear() {$/;"	f	class:android::List
clear	include/utils/SortedVector.h	/^    inline  void            clear()             { VectorImpl::clear(); }$/;"	f	class:android::SortedVector
clear	include/utils/StrongPointer.h	/^void sp<T>::clear()$/;"	f	class:android::sp
clear	include/utils/Vector.h	/^    inline  void            clear()             { VectorImpl::clear(); }$/;"	f	class:android::Vector
clear	utils/CallStack.cpp	/^void CallStack::clear()$/;"	f	class:android::CallStack
clear	utils/PropertyMap.cpp	/^void PropertyMap::clear() {$/;"	f	class:android::PropertyMap
clear	utils/String8.cpp	/^void String8::clear() {$/;"	f	class:android::String8
clear	utils/VectorImpl.cpp	/^void VectorImpl::clear()$/;"	f	class:android::VectorImpl
clearBagCache	utils/ResourceTypes.cpp	/^    void clearBagCache() {$/;"	f	struct:android::ResTable::PackageGroup
clearBit	include/utils/BitSet.h	/^    inline void clearBit(uint32_t n) { value &= ~ valueForBit(n); }$/;"	f	struct:android::BitSet32
clearFirstMarkedBit	include/utils/BitSet.h	/^    inline uint32_t clearFirstMarkedBit() {$/;"	f	struct:android::BitSet32
clearLastMarkedBit	include/utils/BitSet.h	/^    inline uint32_t clearLastMarkedBit() {$/;"	f	struct:android::BitSet32
close	utils/Asset.cpp	/^void _CompressedAsset::close(void)$/;"	f	class:_CompressedAsset
close	utils/Asset.cpp	/^void _FileAsset::close(void)$/;"	f	class:_FileAsset
closeZip	utils/AssetManager.cpp	/^void AssetManager::ZipSet::closeZip(int idx)$/;"	f	class:AssetManager::ZipSet
cmpAscendingAlpha	utils/StringArray.cpp	/^int StringArray::cmpAscendingAlpha(const void* pstr1, const void* pstr2) {$/;"	f	class:android::StringArray
collectString	utils/ResourceTypes.cpp	/^bool ResTable::collectString(String16* outString,$/;"	f	class:android::ResTable
colors	include/utils/ResourceTypes.h	/^    uint32_t* colors;$/;"	m	struct:android::Res_png_9patch
comment	include/utils/ResourceTypes.h	/^    struct ResStringPool_ref comment;$/;"	m	struct:android::ResXMLTree_node	typeref:struct:android::ResXMLTree_node::ResStringPool_ref
commonSources	utils/Android.mk	/^commonSources:= \\$/;"	m
compar_r_t	include/utils/Vector.h	/^     typedef int (*compar_r_t)(const TYPE* lhs, const TYPE* rhs, void* state);$/;"	t	class:android::Vector
compar_r_t	include/utils/VectorImpl.h	/^            typedef int (*compar_r_t)(const void* lhs, const void* rhs, void* state);$/;"	t	class:android::VectorImpl
compar_t	include/utils/Vector.h	/^     typedef int (*compar_t)(const TYPE* lhs, const TYPE* rhs);$/;"	t	class:android::Vector
compar_t	include/utils/VectorImpl.h	/^            typedef int (*compar_t)(const void* lhs, const void* rhs);$/;"	t	class:android::VectorImpl
compare	include/utils/ResourceTypes.h	/^    inline int compare(const ResTable_config& o) const {$/;"	f	struct:android::ResTable_config
compare	include/utils/String16.h	/^inline int String16::compare(const String16& other) const$/;"	f	class:android::String16
compare	include/utils/String8.h	/^inline int String8::compare(const String8& other) const$/;"	f	class:android::String8
compare_file	utils/BackupHelpers.cpp	/^compare_file(const char* path, const unsigned char* data, int len)$/;"	f	namespace:android
compare_type	include/utils/String16.h	/^inline int compare_type(const String16& lhs, const String16& rhs)$/;"	f	namespace:android
compare_type	include/utils/String8.h	/^inline int compare_type(const String8& lhs, const String8& rhs)$/;"	f	namespace:android
compare_type	include/utils/TypeHelpers.h	/^int compare_type(const TYPE& lhs, const TYPE& rhs) {$/;"	f	namespace:android
computeHash	utils/ZipFileRO.cpp	/^\/*static*\/ unsigned int ZipFileRO::computeHash(const char* str, int len)$/;"	f	class:ZipFileRO
compute_crc32	utils/BackupHelpers.cpp	/^compute_crc32(int fd)$/;"	f	namespace:android
concatArgv	utils/misc.cpp	/^char* concatArgv(int argc, const char* const argv[])$/;"	f	namespace:android
config	include/utils/ResourceTypes.h	/^    ResTable_config config;$/;"	m	struct:android::ResTable_type
configs	utils/ResourceTypes.cpp	/^    Vector<const ResTable_type*>    configs;$/;"	m	struct:android::ResTable::Type	file:
const_iterator	include/utils/List.h	/^    typedef _ListIterator<T, CONST_ITERATOR> const_iterator;$/;"	t	class:android::List
const_iterator	include/utils/Vector.h	/^     typedef TYPE const* const_iterator;$/;"	t	class:android::Vector
construct_type	include/utils/TypeHelpers.h	/^void construct_type(TYPE* p, size_t n) {$/;"	f	namespace:android
contains	include/utils/GenerationCache.h	/^bool GenerationCache<K, V>::contains(K key) const {$/;"	f	class:android::GenerationCache
convertToResPath	utils/String8.cpp	/^String8& String8::convertToResPath()$/;"	f	class:android::String8
cookie	utils/ResourceTypes.cpp	/^    void*                           cookie;$/;"	m	struct:android::ResTable::Header	file:
copyFromDeviceNoSwap	include/utils/ResourceTypes.h	/^    inline void copyFromDeviceNoSwap(const ResTable_config& o) {$/;"	f	struct:android::ResTable_config
copyFromDtoH	include/utils/ResourceTypes.h	/^    inline void copyFromDtoH(const ResTable_config& o) {$/;"	f	struct:android::ResTable_config
copyFrom_dtoh	utils/ResourceTypes.cpp	/^inline void Res_value::copyFrom_dtoh(const Res_value& src)$/;"	f	class:android::Res_value
copyMembers	include/utils/AssetDir.h	/^        void copyMembers(const FileInfo& src) {$/;"	f	class:android::AssetDir::FileInfo
copy_package	utils/ResourceTypes.cpp	/^ResTable::Theme::package_info* ResTable::Theme::copy_package(package_info* pi)$/;"	f	class:android::ResTable::Theme
copy_type	include/utils/TypeHelpers.h	/^void copy_type(TYPE* d, const TYPE* s, size_t n) {$/;"	f	namespace:android
count	include/utils/BitSet.h	/^    inline uint32_t count() const { return __builtin_popcount(value); }$/;"	f	struct:android::BitSet32
count	include/utils/ResourceTypes.h	/^    uint32_t count;$/;"	m	struct:android::ResTable_map_entry
count	utils/CallStack.cpp	/^    size_t count;$/;"	m	struct:android::__anon4	file:
countArgv	utils/misc.cpp	/^int countArgv(const char* const argv[])$/;"	f	namespace:android
country	include/utils/ResourceTypes.h	/^            char country[2];$/;"	m	struct:android::ResTable_config::__anon43::__anon44
crc32	include/utils/BackupHelpers.h	/^    int crc32;$/;"	m	struct:android::FileState
create	utils/FileMap.cpp	/^bool FileMap::create(const char* origFileName, int fd, off64_t offset, size_t length,$/;"	f	class:FileMap
createEntryFileMap	utils/ZipFileRO.cpp	/^FileMap* ZipFileRO::createEntryFileMap(ZipEntryRO entry) const$/;"	f	class:ZipFileRO
createFromCompressedFile	utils/Asset.cpp	/^\/*static*\/ Asset* Asset::createFromCompressedFile(const char* fileName,$/;"	f	class:Asset
createFromCompressedMap	utils/Asset.cpp	/^\/*static*\/ Asset* Asset::createFromCompressedMap(FileMap* dataMap,$/;"	f	class:Asset
createFromFile	utils/Asset.cpp	/^\/*static*\/ Asset* Asset::createFromFile(const char* fileName, AccessMode mode)$/;"	f	class:Asset
createFromUncompressedMap	utils/Asset.cpp	/^\/*static*\/ Asset* Asset::createFromUncompressedMap(FileMap* dataMap,$/;"	f	class:Asset
createIdmap	utils/ResourceTypes.cpp	/^status_t ResTable::createIdmap(const ResTable& overlay, uint32_t originalCrc, uint32_t overlayCrc,$/;"	f	class:android::ResTable
createIdmapFileLocked	utils/AssetManager.cpp	/^bool AssetManager::createIdmapFileLocked(const String8& originalPath, const String8& overlayPath,$/;"	f	class:AssetManager
createPathNameLocked	utils/AssetManager.cpp	/^String8 AssetManager::createPathNameLocked(const asset_path& ap, const char* locale,$/;"	f	class:AssetManager
createPathNameLocked	utils/AssetManager.cpp	/^String8 AssetManager::createPathNameLocked(const asset_path& ap, const char* rootDir)$/;"	f	class:AssetManager
createThread	include/utils/threads.h	/^inline bool createThread(thread_func_t f, void *a) {$/;"	f	namespace:android
createThreadEtc	include/utils/threads.h	/^inline bool createThreadEtc(thread_func_t entryFunction,$/;"	f	namespace:android
createWeak	utils/RefBase.cpp	/^RefBase::weakref_type* RefBase::createWeak(const void* id) const$/;"	f	class:android::RefBase
createZipSourceNameLocked	utils/AssetManager.cpp	/^String8 AssetManager::createZipSourceNameLocked(const String8& zipFileName,$/;"	f	class:AssetManager
curExt	include/utils/ResourceTypes.h	/^        const void*                 curExt;$/;"	m	struct:android::ResXMLParser::ResXMLPosition
curNode	include/utils/ResourceTypes.h	/^        const ResXMLTree_node*      curNode;$/;"	m	struct:android::ResXMLParser::ResXMLPosition
data	include/utils/Looper.h	/^        void* data;$/;"	m	struct:android::Looper::Request
data	include/utils/ResourceTypes.h	/^    struct ResStringPool_ref data;$/;"	m	struct:android::ResXMLTree_cdataExt	typeref:struct:android::ResXMLTree_cdataExt::ResStringPool_ref
data	include/utils/ResourceTypes.h	/^    uint32_t data;$/;"	m	struct:android::Res_value
data	include/utils/SharedBuffer.h	/^const void* SharedBuffer::data() const {$/;"	f	class:android::SharedBuffer
data	include/utils/SharedBuffer.h	/^void* SharedBuffer::data() {$/;"	f	class:android::SharedBuffer
dataEnd	utils/ResourceTypes.cpp	/^    const uint8_t*                  dataEnd;$/;"	m	struct:android::ResTable::Header	file:
dataSize	include/utils/BackupHelpers.h	/^    int dataSize; \/\/ size of the data, not including the padding, -1 means delete$/;"	m	struct:android::__anon31
dataType	include/utils/ResourceTypes.h	/^    uint8_t dataType;$/;"	m	struct:android::Res_value
dealloc	utils/SharedBuffer.cpp	/^ssize_t SharedBuffer::dealloc(const SharedBuffer* released)$/;"	f	class:android::SharedBuffer
debugPrintFunc	include/utils/Debug.h	/^typedef void (*debugPrintFunc)(void* cookie, const char* txt);$/;"	t
decStrong	include/utils/RefBase.h	/^    inline void decStrong(const void* id) const {$/;"	f	class:android::LightRefBase
decStrong	utils/RefBase.cpp	/^void RefBase::decStrong(const void* id) const$/;"	f	class:android::RefBase
decWeak	utils/RefBase.cpp	/^void RefBase::weakref_type::decWeak(const void* id)$/;"	f	class:android::RefBase::weakref_type
decodeLength	utils/ResourceTypes.cpp	/^decodeLength(const char16_t** str)$/;"	f	namespace:android
decodeLength	utils/ResourceTypes.cpp	/^decodeLength(const uint8_t** str)$/;"	f	namespace:android
dedent	include/utils/TextOutput.h	/^inline TextOutput& dedent(TextOutput& to)$/;"	f	namespace:android
defaultPrintFunc	utils/Debug.cpp	/^static void defaultPrintFunc(void* cookie, const char* txt)$/;"	f	namespace:android
deleted	include/utils/BackupHelpers.h	/^    bool deleted;$/;"	m	struct:android::FileRec
density	include/utils/ResourceTypes.h	/^            uint16_t density;$/;"	m	struct:android::ResTable_config::__anon48::__anon49
deserialize	utils/ResourceTypes.cpp	/^Res_png_9patch* Res_png_9patch::deserialize(const void* inData)$/;"	f	class:android::Res_png_9patch
deserializeInternal	utils/ResourceTypes.cpp	/^static void deserializeInternal(const void* inData, Res_png_9patch* outData) {$/;"	f	namespace:android
destroy_type	include/utils/TypeHelpers.h	/^void destroy_type(TYPE* p, size_t n) {$/;"	f	namespace:android
detachFromCache	include/utils/GenerationCache.h	/^void GenerationCache<K, V>::detachFromCache(sp<Entry<K, V> > entry) {$/;"	f	class:android::GenerationCache
deviceToFile	utils/ResourceTypes.cpp	/^void Res_png_9patch::deviceToFile()$/;"	f	class:android::Res_png_9patch
diff	include/utils/ResourceTypes.h	/^    inline int diff(const ResTable_config& o) const {$/;"	f	struct:android::ResTable_config
distance	include/utils/List.h	/^    ptrdiff_t distance($/;"	f	class:android::List
doForwardTransform	utils/LinearTransform.cpp	/^bool LinearTransform::doForwardTransform(int64_t a_in, int64_t* b_out) const {$/;"	f	class:android::LinearTransform
doReverseTransform	utils/LinearTransform.cpp	/^bool LinearTransform::doReverseTransform(int64_t b_in, int64_t* a_out) const {$/;"	f	class:android::LinearTransform
doTask	utils/tests/Looper_test.cpp	/^    virtual void doTask() {$/;"	f	class:android::DelayedWake
doTask	utils/tests/Looper_test.cpp	/^    virtual void doTask() {$/;"	f	class:android::DelayedWriteSignal
do_compare	include/utils/SortedVector.h	/^int SortedVector<TYPE>::do_compare(const void* lhs, const void* rhs) const {$/;"	f	class:android::SortedVector
do_construct	include/utils/SortedVector.h	/^void SortedVector<TYPE>::do_construct(void* storage, size_t num) const {$/;"	f	class:android::SortedVector
do_construct	include/utils/Vector.h	/^void Vector<TYPE>::do_construct(void* storage, size_t num) const {$/;"	f	class:android::Vector
do_copy	include/utils/SortedVector.h	/^void SortedVector<TYPE>::do_copy(void* dest, const void* from, size_t num) const {$/;"	f	class:android::SortedVector
do_copy	include/utils/Vector.h	/^void Vector<TYPE>::do_copy(void* dest, const void* from, size_t num) const {$/;"	f	class:android::Vector
do_destroy	include/utils/SortedVector.h	/^void SortedVector<TYPE>::do_destroy(void* storage, size_t num) const {$/;"	f	class:android::SortedVector
do_destroy	include/utils/Vector.h	/^void Vector<TYPE>::do_destroy(void* storage, size_t num) const {$/;"	f	class:android::Vector
do_move_backward	include/utils/SortedVector.h	/^void SortedVector<TYPE>::do_move_backward(void* dest, const void* from, size_t num) const {$/;"	f	class:android::SortedVector
do_move_backward	include/utils/Vector.h	/^void Vector<TYPE>::do_move_backward(void* dest, const void* from, size_t num) const {$/;"	f	class:android::Vector
do_move_forward	include/utils/SortedVector.h	/^void SortedVector<TYPE>::do_move_forward(void* dest, const void* from, size_t num) const {$/;"	f	class:android::SortedVector
do_move_forward	include/utils/Vector.h	/^void Vector<TYPE>::do_move_forward(void* dest, const void* from, size_t num) const {$/;"	f	class:android::Vector
do_splat	include/utils/SortedVector.h	/^void SortedVector<TYPE>::do_splat(void* dest, const void* item, size_t num) const {$/;"	f	class:android::SortedVector
do_splat	include/utils/Vector.h	/^void Vector<TYPE>::do_splat(void* dest, const void* item, size_t num) const {$/;"	f	class:android::Vector
dtohl	include/utils/ByteOrder.h	55;"	d
dtohl	include/utils/ByteOrder.h	62;"	d
dtohs	include/utils/ByteOrder.h	56;"	d
dtohs	include/utils/ByteOrder.h	63;"	d
dump	utils/CallStack.cpp	/^void CallStack::dump(const char* prefix) const$/;"	f	class:android::CallStack
dumpToLog	utils/ResourceTypes.cpp	/^void ResTable::Theme::dumpToLog() const$/;"	f	class:android::ResTable::Theme
durationUsecs	utils/Timers.cpp	/^long long DurationTimer::durationUsecs(void) const$/;"	f	class:DurationTimer
eKeepStorage	include/utils/SharedBuffer.h	/^        eKeepStorage = 0x00000001$/;"	e	enum:android::SharedBuffer::__anon14
edit	utils/SharedBuffer.cpp	/^SharedBuffer* SharedBuffer::edit() const$/;"	f	class:android::SharedBuffer
editArray	include/utils/SortedVector.h	/^TYPE* SortedVector<TYPE>::editArray() {$/;"	f	class:android::SortedVector
editArray	include/utils/Vector.h	/^TYPE* Vector<TYPE>::editArray() {$/;"	f	class:android::Vector
editArrayImpl	utils/VectorImpl.cpp	/^void* VectorImpl::editArrayImpl()$/;"	f	class:android::VectorImpl
editItemAt	include/utils/SortedVector.h	/^            TYPE&           editItemAt(size_t index) {$/;"	f	class:android::SortedVector
editItemAt	include/utils/Vector.h	/^TYPE& Vector<TYPE>::editItemAt(size_t index) {$/;"	f	class:android::Vector
editItemLocation	utils/VectorImpl.cpp	/^void* VectorImpl::editItemLocation(size_t index)$/;"	f	class:android::VectorImpl
editResize	utils/SharedBuffer.cpp	/^SharedBuffer* SharedBuffer::editResize(size_t newSize) const$/;"	f	class:android::SharedBuffer
editTop	include/utils/Vector.h	/^TYPE& Vector<TYPE>::editTop() {$/;"	f	class:android::Vector
editValueAt	include/utils/KeyedVector.h	/^VALUE& KeyedVector<KEY,VALUE>::editValueAt(size_t index) {$/;"	f	class:android::KeyedVector
editValueFor	include/utils/KeyedVector.h	/^VALUE& KeyedVector<KEY,VALUE>::editValueFor(const KEY& key) {$/;"	f	class:android::KeyedVector
elapsedRealtime	utils/SystemClock.cpp	/^int64_t elapsedRealtime()$/;"	f	namespace:android
elapsedTime	utils/StopWatch.cpp	/^nsecs_t StopWatch::elapsedTime() const$/;"	f	class:android::StopWatch
empty	include/utils/List.h	/^    inline bool empty() const { return mpMiddle->getNext() == mpMiddle; }$/;"	f	class:android::List
empty	include/utils/String8.h	/^inline const String8 String8::empty() {$/;"	f	class:android::String8
empty	include/utils/Vector.h	/^     inline bool empty() const{ return isEmpty(); }$/;"	f	class:android::Vector
end	include/utils/List.h	/^    inline const_iterator end() const { $/;"	f	class:android::List
end	include/utils/List.h	/^    inline iterator end() { $/;"	f	class:android::List
end	include/utils/Vector.h	/^     inline const_iterator end() const   { return array() + size(); }$/;"	f	class:android::Vector
end	include/utils/Vector.h	/^     inline iterator end()   { return editArray() + size(); }$/;"	f	class:android::Vector
end	utils/CallStack.cpp	/^        uint64_t end;$/;"	m	struct:android::MapInfo::mapinfo	file:
endl	include/utils/TextOutput.h	/^inline TextOutput& endl(TextOutput& to)$/;"	f	namespace:android
ensureAlignment	utils/Asset.cpp	/^const void* _FileAsset::ensureAlignment(FileMap* map)$/;"	f	class:_FileAsset
entity	include/utils/BackupHelpers.h	/^        entity_header_v1 entity;$/;"	m	union:android::BackupDataReader::__anon32
entity_header_v1	include/utils/BackupHelpers.h	/^} entity_header_v1;$/;"	t	namespace:android	typeref:struct:android::__anon31
entries	include/utils/ResourceTypes.h	/^            theme_entry* entries;$/;"	m	struct:android::ResTable::Theme::type_info
entriesStart	include/utils/ResourceTypes.h	/^    uint32_t entriesStart;$/;"	m	struct:android::ResTable_type
entryCount	include/utils/ResourceTypes.h	/^    uint32_t entryCount;$/;"	m	struct:android::ResTable_type
entryCount	include/utils/ResourceTypes.h	/^    uint32_t entryCount;$/;"	m	struct:android::ResTable_typeSpec
entryCount	utils/ResourceTypes.cpp	/^    const size_t                    entryCount;$/;"	m	struct:android::ResTable::Type	file:
entryFunction	utils/Threads.cpp	/^    thread_func_t   entryFunction;$/;"	m	struct:thread_data_t	file:
entryToIndex	utils/ZipFileRO.cpp	/^int ZipFileRO::entryToIndex(const ZipEntryRO entry) const$/;"	f	class:ZipFileRO
erase	include/utils/List.h	/^    iterator erase(iterator first, iterator last) {$/;"	f	class:android::List
erase	include/utils/List.h	/^    iterator erase(iterator posn) {$/;"	f	class:android::List
erase	include/utils/Vector.h	/^     inline iterator erase(iterator pos) {$/;"	f	class:android::Vector
erase	utils/StringArray.cpp	/^void StringArray::erase(int idx) {$/;"	f	class:android::StringArray
eventCode	include/utils/ResourceTypes.h	/^        event_code_t                eventCode;$/;"	m	struct:android::ResXMLParser::ResXMLPosition
event_code_t	include/utils/ResourceTypes.h	/^    enum event_code_t {$/;"	g	class:android::ResXMLParser
events	include/utils/Looper.h	/^        int events;$/;"	m	struct:android::Looper::Response
events	utils/tests/Looper_test.cpp	/^    int events;$/;"	m	class:android::StubCallbackHandler	file:
examineGzip	utils/ZipUtils.cpp	/^\/*static*\/ bool ZipUtils::examineGzip(FILE* fp, int* pCompressionMethod,$/;"	f	class:ZipUtils
exitPending	utils/Threads.cpp	/^bool Thread::exitPending() const$/;"	f	class:android::Thread
expandResourceRef	utils/ResourceTypes.cpp	/^bool ResTable::expandResourceRef(const uint16_t* refStr, size_t refLen,$/;"	f	class:android::ResTable
extendObjectLifetime	utils/RefBase.cpp	/^void RefBase::extendObjectLifetime(int32_t mode)$/;"	f	class:android::RefBase
fd	include/utils/Looper.h	/^        int fd;$/;"	m	struct:android::Looper::Request
fd	utils/tests/Looper_test.cpp	/^    int fd;$/;"	m	class:android::StubCallbackHandler	file:
file	include/utils/BackupHelpers.h	/^    String8 file;$/;"	m	struct:android::FileRec
fileCount	include/utils/BackupHelpers.h	/^    int fileCount;$/;"	m	struct:android::SnapshotHeader
fileToDevice	utils/ResourceTypes.cpp	/^void Res_png_9patch::fileToDevice()$/;"	f	class:android::Res_png_9patch
file_metadata_v1	utils/BackupHelpers.cpp	/^struct file_metadata_v1 {$/;"	s	namespace:android	file:
find	utils/String8.cpp	/^ssize_t String8::find(const char* other, size_t start) const$/;"	f	class:android::String8
findEntry	utils/AssetDir.cpp	/^\/*static*\/ int AssetDir::FileInfo::findEntry(const SortedVector<FileInfo>* pVector,$/;"	f	class:AssetDir::FileInfo
findEntryByIndex	utils/ZipFileRO.cpp	/^ZipEntryRO ZipFileRO::findEntryByIndex(int idx) const$/;"	f	class:ZipFileRO
findEntryByName	utils/ZipFileRO.cpp	/^ZipEntryRO ZipFileRO::findEntryByName(const char* fileName) const$/;"	f	class:ZipFileRO
findFirst	utils/String16.cpp	/^ssize_t String16::findFirst(char16_t c) const$/;"	f	class:android::String16
findLast	utils/String16.cpp	/^ssize_t String16::findLast(char16_t c) const$/;"	f	class:android::String16
find_extension	utils/String8.cpp	/^char* String8::find_extension(void) const$/;"	f	class:android::String8
finish_vector	utils/VectorImpl.cpp	/^void VectorImpl::finish_vector()$/;"	f	class:android::VectorImpl
firstChar	include/utils/ResourceTypes.h	/^    uint32_t firstChar, lastChar;$/;"	m	struct:android::ResStringPool_span
firstMarkedBit	include/utils/BitSet.h	/^    inline uint32_t firstMarkedBit() const { return __builtin_clz(value); }$/;"	f	struct:android::BitSet32
firstUnmarkedBit	include/utils/BitSet.h	/^    inline uint32_t firstUnmarkedBit() const { return __builtin_clz(~ value); }$/;"	f	struct:android::BitSet32
flags	include/utils/ResourceTypes.h	/^    uint16_t flags;$/;"	m	struct:android::ResTable_entry
flags	include/utils/ResourceTypes.h	/^    uint32_t flags;$/;"	m	struct:android::ResStringPool_header
fncScanAndMergeDirLocked	utils/AssetManager.cpp	/^bool AssetManager::fncScanAndMergeDirLocked($/;"	f	class:AssetManager
fncScanLocked	utils/AssetManager.cpp	/^void AssetManager::fncScanLocked(SortedVector<AssetDir::FileInfo>* pMergedInfo,$/;"	f	class:AssetManager
forceIncStrong	utils/RefBase.cpp	/^void RefBase::forceIncStrong(const void* id) const$/;"	f	class:android::RefBase
force_set	include/utils/StrongPointer.h	/^void sp<T>::force_set(T* other)$/;"	f	class:android::sp
format	utils/String8.cpp	/^String8 String8::format(const char* fmt, ...)$/;"	f	class:android::String8
formatV	utils/String8.cpp	/^String8 String8::formatV(const char* fmt, va_list args)$/;"	f	class:android::String8
freeBufferIndex	utils/BufferedTextOutput.cpp	/^static void freeBufferIndex(int32_t idx)$/;"	f	namespace:android
free_package	utils/ResourceTypes.cpp	/^void ResTable::Theme::free_package(package_info* pi)$/;"	f	class:android::ResTable::Theme
fromlel	include/utils/ByteOrder.h	70;"	d
fromlel	include/utils/ByteOrder.h	75;"	d
fromles	include/utils/ByteOrder.h	71;"	d
fromles	include/utils/ByteOrder.h	76;"	d
gAssetLock	utils/Asset.cpp	/^static Mutex gAssetLock;$/;"	v	file:
gCount	utils/Asset.cpp	/^static int32_t gCount = 0;$/;"	v	file:
gCount	utils/AssetManager.cpp	/^static volatile int32_t gCount = 0;$/;"	v	file:
gCount	utils/ResourceTypes.cpp	/^static volatile int32_t gCount = 0;$/;"	m	namespace:android	file:
gCreateThreadFn	utils/Threads.cpp	/^static android_create_thread_fn gCreateThreadFn = androidCreateRawThreadEtc;$/;"	v	file:
gDarwinCantLoadAllObjects	utils/Static.cpp	/^int gDarwinCantLoadAllObjects = 1;$/;"	m	namespace:android	file:
gDarwinIsReallyAnnoying	utils/String8.cpp	/^int gDarwinIsReallyAnnoying;$/;"	m	namespace:android	file:
gDoSchedulingGroup	utils/Threads.cpp	/^static bool gDoSchedulingGroup = true;$/;"	v	file:
gDoSchedulingGroupOnce	utils/Threads.cpp	/^static pthread_once_t gDoSchedulingGroupOnce = PTHREAD_ONCE_INIT;$/;"	v	file:
gEmptyString	utils/String16.cpp	/^static char16_t* gEmptyString = NULL;$/;"	m	namespace:android	file:
gEmptyString	utils/String8.cpp	/^static char* gEmptyString = NULL;$/;"	m	namespace:android	file:
gEmptyStringBuf	utils/String16.cpp	/^static SharedBuffer* gEmptyStringBuf = NULL;$/;"	m	namespace:android	file:
gEmptyStringBuf	utils/String8.cpp	/^static SharedBuffer* gEmptyStringBuf = NULL;$/;"	m	namespace:android	file:
gFirstStatics	utils/Static.cpp	/^static LibUtilsFirstStatics gFirstStatics;$/;"	m	namespace:android	file:
gFreeBufferIndex	utils/BufferedTextOutput.cpp	/^static volatile int32_t gFreeBufferIndex = -1;$/;"	m	namespace:android	file:
gHead	utils/Asset.cpp	/^static Asset* gHead = NULL;$/;"	v	file:
gLock	include/utils/AssetManager.h	/^        static Mutex gLock;$/;"	m	class:android::AssetManager::SharedZip
gLock	utils/AssetManager.cpp	/^Mutex AssetManager::SharedZip::gLock;$/;"	m	class:AssetManager::SharedZip	file:
gLogTextOutput	utils/Static.cpp	/^static LogTextOutput gLogTextOutput;$/;"	m	namespace:android	file:
gMutex	utils/BufferedTextOutput.cpp	/^static mutex_t          gMutex;$/;"	m	namespace:android	file:
gOpen	include/utils/AssetManager.h	/^        static DefaultKeyedVector<String8, wp<SharedZip> > gOpen;$/;"	m	class:android::AssetManager::SharedZip
gOpen	utils/AssetManager.cpp	/^DefaultKeyedVector<String8, wp<AssetManager::SharedZip> > AssetManager::SharedZip::gOpen;$/;"	m	class:AssetManager::SharedZip	file:
gSequence	utils/BufferedTextOutput.cpp	/^static volatile int32_t gSequence = 0;$/;"	m	namespace:android	file:
gTLSKey	utils/Looper.cpp	/^static pthread_key_t gTLSKey = 0;$/;"	m	namespace:android	file:
gTLSOnce	utils/Looper.cpp	/^static pthread_once_t gTLSOnce = PTHREAD_ONCE_INIT;$/;"	m	namespace:android	file:
gTail	utils/Asset.cpp	/^static Asset* gTail = NULL;$/;"	v	file:
gTextBuffers	utils/Static.cpp	/^Vector<int32_t> gTextBuffers;$/;"	m	namespace:android	file:
get	include/utils/GenerationCache.h	/^V GenerationCache<K, V>::get(K key) {$/;"	f	class:android::GenerationCache
get	include/utils/StrongPointer.h	/^    inline  T*      get() const         { return m_ptr; }$/;"	f	class:android::sp
get	utils/AssetManager.cpp	/^sp<AssetManager::SharedZip> AssetManager::SharedZip::get(const String8& path)$/;"	f	class:AssetManager::SharedZip
get	utils/BlobCache.cpp	/^size_t BlobCache::get(const void* key, size_t keySize, void* value,$/;"	f	class:android::BlobCache
get2LE	include/utils/ZipFileRO.h	/^    static inline unsigned short get2LE(const unsigned char* buf) {$/;"	f	class:android::ZipFileRO
get4LE	include/utils/ObbFile.h	/^    static inline uint32_t get4LE(const unsigned char* buf) {$/;"	f	class:android::ObbFile
get4LE	include/utils/ZipFileRO.h	/^    static inline unsigned long get4LE(const unsigned char* buf) {$/;"	f	class:android::ZipFileRO
getAccessMode	include/utils/Asset.h	/^    AccessMode getAccessMode(void) const { return mAccessMode; }$/;"	f	class:android::Asset
getAllowNonCallbacks	utils/Looper.cpp	/^bool Looper::getAllowNonCallbacks() const {$/;"	f	class:android::Looper
getAssetAllocations	utils/Asset.cpp	/^String8 Asset::getAssetAllocations()$/;"	f	class:Asset
getAssetPath	utils/AssetManager.cpp	/^String8 AssetManager::getAssetPath(void* cookie) const$/;"	f	class:AssetManager
getAssetSource	include/utils/Asset.h	/^    const char* getAssetSource(void) const { return mAssetSource.string(); }$/;"	f	class:android::Asset
getAttribute	utils/ResourceTypes.cpp	/^ssize_t ResTable::Theme::getAttribute(uint32_t resID, Res_value* outValue,$/;"	f	class:android::ResTable::Theme
getAttributeCount	utils/ResourceTypes.cpp	/^size_t ResXMLParser::getAttributeCount() const$/;"	f	class:android::ResXMLParser
getAttributeData	utils/ResourceTypes.cpp	/^int32_t ResXMLParser::getAttributeData(size_t idx) const$/;"	f	class:android::ResXMLParser
getAttributeDataType	utils/ResourceTypes.cpp	/^int32_t ResXMLParser::getAttributeDataType(size_t idx) const$/;"	f	class:android::ResXMLParser
getAttributeName	utils/ResourceTypes.cpp	/^const uint16_t* ResXMLParser::getAttributeName(size_t idx, size_t* outLen) const$/;"	f	class:android::ResXMLParser
getAttributeNameID	utils/ResourceTypes.cpp	/^int32_t ResXMLParser::getAttributeNameID(size_t idx) const$/;"	f	class:android::ResXMLParser
getAttributeNameResID	utils/ResourceTypes.cpp	/^uint32_t ResXMLParser::getAttributeNameResID(size_t idx) const$/;"	f	class:android::ResXMLParser
getAttributeNamespace	utils/ResourceTypes.cpp	/^const uint16_t* ResXMLParser::getAttributeNamespace(size_t idx, size_t* outLen) const$/;"	f	class:android::ResXMLParser
getAttributeNamespaceID	utils/ResourceTypes.cpp	/^int32_t ResXMLParser::getAttributeNamespaceID(size_t idx) const$/;"	f	class:android::ResXMLParser
getAttributeStringValue	utils/ResourceTypes.cpp	/^const uint16_t* ResXMLParser::getAttributeStringValue(size_t idx, size_t* outLen) const$/;"	f	class:android::ResXMLParser
getAttributeValue	utils/ResourceTypes.cpp	/^ssize_t ResXMLParser::getAttributeValue(size_t idx, Res_value* outValue) const$/;"	f	class:android::ResXMLParser
getAttributeValueStringID	utils/ResourceTypes.cpp	/^int32_t ResXMLParser::getAttributeValueStringID(size_t idx) const$/;"	f	class:android::ResXMLParser
getBagLocked	utils/ResourceTypes.cpp	/^ssize_t ResTable::getBagLocked(uint32_t resID, const bag_entry** outBag,$/;"	f	class:android::ResTable
getBasePackageCount	utils/ResourceTypes.cpp	/^size_t ResTable::getBasePackageCount() const$/;"	f	class:android::ResTable
getBasePackageId	utils/ResourceTypes.cpp	/^uint32_t ResTable::getBasePackageId(size_t idx) const$/;"	f	class:android::ResTable
getBasePackageName	utils/ResourceTypes.cpp	/^const char16_t* ResTable::getBasePackageName(size_t idx) const$/;"	f	class:android::ResTable
getBasePath	utils/String8.cpp	/^String8 String8::getBasePath(void) const$/;"	f	class:android::String8
getBuffer	utils/Asset.cpp	/^const void* _CompressedAsset::getBuffer(bool wordAligned)$/;"	f	class:_CompressedAsset
getBuffer	utils/Asset.cpp	/^const void* _FileAsset::getBuffer(bool wordAligned)$/;"	f	class:_FileAsset
getBuffer	utils/BufferedTextOutput.cpp	/^BufferedTextOutput::BufferState* BufferedTextOutput::getBuffer() const$/;"	f	class:android::BufferedTextOutput
getComment	utils/ResourceTypes.cpp	/^const uint16_t* ResXMLParser::getComment(size_t* outLen) const$/;"	f	class:android::ResXMLParser
getCommentID	utils/ResourceTypes.cpp	/^int32_t ResXMLParser::getCommentID() const$/;"	f	class:android::ResXMLParser
getConfiguration	utils/AssetManager.cpp	/^void AssetManager::getConfiguration(ResTable_config* outConfig) const$/;"	f	class:AssetManager
getConfigurations	utils/ResourceTypes.cpp	/^void ResTable::getConfigurations(Vector<ResTable_config>* configs) const$/;"	f	class:android::ResTable
getData	utils/BlobCache.cpp	/^const void* BlobCache::Blob::getData() const {$/;"	f	class:android::BlobCache::Blob
getDataLength	include/utils/FileMap.h	/^    size_t getDataLength(void) const { return mDataLength; }$/;"	f	class:android::FileMap
getDataOffset	include/utils/FileMap.h	/^    off64_t getDataOffset(void) const { return mDataOffset; }$/;"	f	class:android::FileMap
getDataPtr	include/utils/FileMap.h	/^    void* getDataPtr(void) const { return mDataPtr; }$/;"	f	class:android::FileMap
getElementName	utils/ResourceTypes.cpp	/^const uint16_t* ResXMLParser::getElementName(size_t* outLen) const$/;"	f	class:android::ResXMLParser
getElementNameID	utils/ResourceTypes.cpp	/^int32_t ResXMLParser::getElementNameID() const$/;"	f	class:android::ResXMLParser
getElementNamespace	utils/ResourceTypes.cpp	/^const uint16_t* ResXMLParser::getElementNamespace(size_t* outLen) const$/;"	f	class:android::ResXMLParser
getElementNamespaceID	utils/ResourceTypes.cpp	/^int32_t ResXMLParser::getElementNamespaceID() const$/;"	f	class:android::ResXMLParser
getEmptyString	utils/String16.cpp	/^static inline char16_t* getEmptyString()$/;"	f	namespace:android
getEmptyString	utils/String8.cpp	/^static inline char* getEmptyString()$/;"	f	namespace:android
getEnd	include/utils/Tokenizer.h	/^    inline const char* getEnd() const { return mBuffer + mLength; }$/;"	f	class:android::Tokenizer
getEntry	include/utils/StringArray.h	/^    const char* getEntry(int idx) const {$/;"	f	class:android::StringArray
getEntry	utils/ResourceTypes.cpp	/^ssize_t ResTable::getEntry($/;"	f	class:android::ResTable
getEntryFileName	utils/ZipFileRO.cpp	/^int ZipFileRO::getEntryFileName(ZipEntryRO entry, char* buffer, int bufLen)$/;"	f	class:ZipFileRO
getEntryInfo	utils/ZipFileRO.cpp	/^bool ZipFileRO::getEntryInfo(ZipEntryRO entry, int* pMethod, size_t* pUncompLen,$/;"	f	class:ZipFileRO
getError	utils/ResourceTypes.cpp	/^status_t ResStringPool::getError() const$/;"	f	class:android::ResStringPool
getError	utils/ResourceTypes.cpp	/^status_t ResTable::getError() const$/;"	f	class:android::ResTable
getError	utils/ResourceTypes.cpp	/^status_t ResXMLTree::getError() const$/;"	f	class:android::ResXMLTree
getEventType	utils/ResourceTypes.cpp	/^ResXMLParser::event_code_t ResXMLParser::getEventType() const$/;"	f	class:android::ResXMLParser
getFileCount	include/utils/AssetDir.h	/^    size_t getFileCount(void) { return mFileInfo->size(); }$/;"	f	class:android::AssetDir
getFileModDate	utils/misc.cpp	/^time_t getFileModDate(const char* fileName)$/;"	f	namespace:android
getFileName	include/utils/AssetDir.h	/^        const String8& getFileName(void) const { return mFileName; }$/;"	f	class:android::AssetDir::FileInfo
getFileName	include/utils/AssetDir.h	/^    const String8& getFileName(int idx) {$/;"	f	class:android::AssetDir
getFileName	include/utils/FileMap.h	/^    const char* getFileName(void) const { return mFileName; }$/;"	f	class:android::FileMap
getFileName	include/utils/ObbFile.h	/^    const char* getFileName() const {$/;"	f	class:android::ObbFile
getFileType	include/utils/AssetDir.h	/^        FileType getFileType(void) const { return mFileType; }$/;"	f	class:android::AssetDir::FileInfo
getFileType	include/utils/AssetDir.h	/^    FileType getFileType(int idx) {$/;"	f	class:android::AssetDir
getFileType	utils/AssetManager.cpp	/^FileType AssetManager::getFileType(const char* fileName)$/;"	f	class:AssetManager
getFileType	utils/misc.cpp	/^FileType getFileType(const char* fileName)$/;"	f	namespace:android
getFilename	include/utils/Tokenizer.h	/^    inline String8 getFilename() const { return mFilename; }$/;"	f	class:android::Tokenizer
getFlags	include/utils/ObbFile.h	/^    int32_t getFlags() const {$/;"	f	class:android::ObbFile
getForThread	utils/Looper.cpp	/^sp<Looper> Looper::getForThread() {$/;"	f	class:android::Looper
getGlobalCount	utils/Asset.cpp	/^int32_t Asset::getGlobalCount()$/;"	f	class:Asset
getGlobalCount	utils/AssetManager.cpp	/^int32_t AssetManager::getGlobalCount()$/;"	f	class:AssetManager
getIdmapInfo	utils/ResourceTypes.cpp	/^bool ResTable::getIdmapInfo(const void* idmap, size_t sizeBytes,$/;"	f	class:android::ResTable
getIdmapPackageId	utils/ResourceTypes.cpp	/^static status_t getIdmapPackageId(const uint32_t* map, size_t mapSize, uint32_t *outId)$/;"	f	namespace:android
getIndex	utils/AssetManager.cpp	/^int AssetManager::ZipSet::getIndex(const String8& zip) const$/;"	f	class:AssetManager::ZipSet
getIndexOfBit	include/utils/BitSet.h	/^    inline uint32_t getIndexOfBit(uint32_t n) const {$/;"	f	struct:android::BitSet32
getInstance	include/utils/Singleton.h	/^    static TYPE& getInstance() {$/;"	f	class:android::Singleton
getItemSize	include/utils/Vector.h	/^     inline size_t getItemSize() const { return itemSize(); }$/;"	f	class:android::Vector
getKey	utils/BlobCache.cpp	/^sp<BlobCache::Blob> BlobCache::CacheEntry::getKey() const {$/;"	f	class:android::BlobCache::CacheEntry
getKeyAt	include/utils/GenerationCache.h	/^K GenerationCache<K, V>::getKeyAt(uint32_t index) const {$/;"	f	class:android::GenerationCache
getLength	include/utils/Asset.h	/^    virtual off64_t getLength(void) const { return mLength; }$/;"	f	class:android::_FileAsset
getLength	include/utils/Asset.h	/^    virtual off64_t getLength(void) const { return mUncompressedLen; }$/;"	f	class:android::_CompressedAsset
getLineNumber	include/utils/Tokenizer.h	/^    inline int32_t getLineNumber() const { return mLineNumber; }$/;"	f	class:android::Tokenizer
getLineNumber	utils/ResourceTypes.cpp	/^uint32_t ResXMLParser::getLineNumber() const$/;"	f	class:android::ResXMLParser
getLocale	include/utils/ResourceTypes.h	/^    void getLocale(char str[6]) const {$/;"	f	struct:android::ResTable_config
getLocales	utils/AssetManager.cpp	/^void AssetManager::getLocales(Vector<String8>* locales) const$/;"	f	class:AssetManager
getLocales	utils/ResourceTypes.cpp	/^void ResTable::getLocales(Vector<String8>* locales) const$/;"	f	class:android::ResTable
getLocation	utils/Tokenizer.cpp	/^String8 Tokenizer::getLocation() const {$/;"	f	class:android::Tokenizer
getMapInfoList	utils/CallStack.cpp	/^    mapinfo* getMapInfoList() {$/;"	f	class:android::MapInfo	file:
getMem	demo/MemoryHeap/IMemTest.cpp	/^	virtual sp<IMemoryHeap> getMem() const $/;"	f	class:android::BpMemTest
getNamespacePrefix	utils/ResourceTypes.cpp	/^const uint16_t* ResXMLParser::getNamespacePrefix(size_t* outLen) const$/;"	f	class:android::ResXMLParser
getNamespacePrefixID	utils/ResourceTypes.cpp	/^int32_t ResXMLParser::getNamespacePrefixID() const$/;"	f	class:android::ResXMLParser
getNamespaceUri	utils/ResourceTypes.cpp	/^const uint16_t* ResXMLParser::getNamespaceUri(size_t* outLen) const$/;"	f	class:android::ResXMLParser
getNamespaceUriID	utils/ResourceTypes.cpp	/^int32_t ResXMLParser::getNamespaceUriID() const$/;"	f	class:android::ResXMLParser
getNext	include/utils/List.h	/^        inline _Node* getNext() const { return mpNext; }$/;"	f	class:android::List::_Node
getNode	include/utils/List.h	/^        inline _NodePtr getNode() const { return mpNode; }$/;"	f	class:android::List::_ListIterator
getNumEntries	include/utils/ZipFileRO.h	/^    int getNumEntries(void) const {$/;"	f	class:android::ZipFileRO
getPackageName	include/utils/ObbFile.h	/^    const String8 getPackageName() const {$/;"	f	class:android::ObbFile
getParameters	utils/ResourceTypes.cpp	/^void ResTable::getParameters(ResTable_config* params) const$/;"	f	class:android::ResTable
getPathDir	utils/String8.cpp	/^String8 String8::getPathDir(void) const$/;"	f	class:android::String8
getPathExtension	utils/String8.cpp	/^String8 String8::getPathExtension(void) const$/;"	f	class:android::String8
getPathLeaf	utils/String8.cpp	/^String8 String8::getPathLeaf(void) const$/;"	f	class:android::String8
getPathName	utils/AssetManager.cpp	/^\/*static*\/ String8 AssetManager::ZipSet::getPathName(const char* zipPath)$/;"	f	class:AssetManager::ZipSet
getPosition	utils/ResourceTypes.cpp	/^void ResXMLParser::getPosition(ResXMLParser::ResXMLPosition* pos) const$/;"	f	class:android::ResXMLParser
getPrev	include/utils/List.h	/^        inline _Node* getPrev() const { return mpPrev; }$/;"	f	class:android::List::_Node
getProperties	include/utils/PropertyMap.h	/^    inline const KeyedVector<String8, String8>& getProperties() const { return mProperties; }$/;"	f	class:android::PropertyMap
getRef	include/utils/List.h	/^        inline T& getRef() { return mVal; }$/;"	f	class:android::List::_Node
getRef	include/utils/List.h	/^        inline const T& getRef() const { return mVal; }$/;"	f	class:android::List::_Node
getRemainingLength	include/utils/Asset.h	/^    virtual off64_t getRemainingLength(void) const { return mLength-mOffset; }$/;"	f	class:android::_FileAsset
getRemainingLength	include/utils/Asset.h	/^    virtual off64_t getRemainingLength(void) const { return mUncompressedLen-mOffset; }$/;"	f	class:android::_CompressedAsset
getRequestIndexLocked	utils/Looper.cpp	/^ssize_t Looper::getRequestIndexLocked(int fd) {$/;"	f	class:android::Looper
getResTable	include/utils/ResourceTypes.h	/^        inline const ResTable& getResTable() const { return mTable; }$/;"	f	class:android::ResTable::Theme
getResTable	utils/AssetManager.cpp	/^const ResTable* AssetManager::getResTable(bool required) const$/;"	f	class:AssetManager
getResource	include/utils/ResourceTypes.h	/^    inline ssize_t getResource(const ResTable_ref& res, Res_value* outValue,$/;"	f	class:android::ResTable
getResource	utils/ResourceTypes.cpp	/^ssize_t ResTable::getResource(uint32_t resID, Res_value* outValue, bool mayBeBag, uint16_t density,$/;"	f	class:android::ResTable
getResourceName	utils/ResourceTypes.cpp	/^bool ResTable::getResourceName(uint32_t resID, resource_name* outName) const$/;"	f	class:android::ResTable
getResourcePackageIndex	utils/ResourceTypes.cpp	/^inline ssize_t ResTable::getResourcePackageIndex(uint32_t resID) const$/;"	f	class:android::ResTable
getResourceTable	utils/AssetManager.cpp	/^ResTable* AssetManager::SharedZip::getResourceTable()$/;"	f	class:AssetManager::SharedZip
getResourceTableAsset	utils/AssetManager.cpp	/^Asset* AssetManager::SharedZip::getResourceTableAsset()$/;"	f	class:AssetManager::SharedZip
getResources	utils/AssetManager.cpp	/^const ResTable& AssetManager::getResources(bool required) const$/;"	f	class:AssetManager
getSalt	include/utils/ObbFile.h	/^    const unsigned char* getSalt(size_t* length) const {$/;"	f	class:android::ObbFile
getSize	utils/BlobCache.cpp	/^size_t BlobCache::Blob::getSize() const {$/;"	f	class:android::BlobCache::Blob
getSourceName	include/utils/AssetDir.h	/^        const String8& getSourceName(void) const { return mSourceName; }$/;"	f	class:android::AssetDir::FileInfo
getSourceName	include/utils/AssetDir.h	/^    const String8& getSourceName(int idx) {$/;"	f	class:android::AssetDir
getStrings	utils/ResourceTypes.cpp	/^const ResStringPool& ResXMLParser::getStrings() const$/;"	f	class:android::ResXMLParser
getStrongCount	include/utils/RefBase.h	/^    inline int32_t getStrongCount() const {$/;"	f	class:android::LightRefBase
getStrongCount	utils/RefBase.cpp	/^int32_t RefBase::getStrongCount() const$/;"	f	class:android::RefBase
getTableCookie	utils/ResourceTypes.cpp	/^void* ResTable::getTableCookie(size_t index) const$/;"	f	class:android::ResTable
getTableCount	utils/ResourceTypes.cpp	/^size_t ResTable::getTableCount() const$/;"	f	class:android::ResTable
getTableStringBlock	utils/ResourceTypes.cpp	/^const ResStringPool* ResTable::getTableStringBlock(size_t index) const$/;"	f	class:android::ResTable
getText	utils/ResourceTypes.cpp	/^const uint16_t* ResXMLParser::getText(size_t* outLen) const$/;"	f	class:android::ResXMLParser
getTextID	utils/ResourceTypes.cpp	/^int32_t ResXMLParser::getTextID() const$/;"	f	class:android::ResXMLParser
getTextValue	utils/ResourceTypes.cpp	/^ssize_t ResXMLParser::getTextValue(Res_value* outValue) const$/;"	f	class:android::ResXMLParser
getThreadId	include/utils/threads.h	/^inline thread_id_t getThreadId() {$/;"	f	namespace:android
getThreadState	utils/BufferedTextOutput.cpp	/^BufferedTextOutput::ThreadState* BufferedTextOutput::getThreadState()$/;"	f	class:android::BufferedTextOutput
getType	utils/ResourceTypes.cpp	/^    const Type* getType(size_t idx) const {$/;"	f	struct:android::ResTable::Package
getUtf32	utils/String8.cpp	/^void String8::getUtf32(char32_t* dst) const$/;"	f	class:android::String8
getUtf32At	utils/String8.cpp	/^int32_t String8::getUtf32At(size_t index, size_t *next_index) const$/;"	f	class:android::String8
getUtf32Length	utils/String8.cpp	/^size_t String8::getUtf32Length() const$/;"	f	class:android::String8
getValue	utils/BlobCache.cpp	/^sp<BlobCache::Blob> BlobCache::CacheEntry::getValue() const {$/;"	f	class:android::BlobCache::CacheEntry
getValueAt	include/utils/GenerationCache.h	/^V GenerationCache<K, V>::getValueAt(uint32_t index) const {$/;"	f	class:android::GenerationCache
getVersion	include/utils/ObbFile.h	/^    int32_t getVersion() const {$/;"	f	class:android::ObbFile
getWeakCount	utils/RefBase.cpp	/^int32_t RefBase::weakref_type::getWeakCount() const$/;"	f	class:android::RefBase::weakref_type
getWeakRefs	utils/RefBase.cpp	/^RefBase::weakref_type* RefBase::getWeakRefs() const$/;"	f	class:android::RefBase
getZip	utils/AssetManager.cpp	/^ZipFileRO* AssetManager::SharedZip::getZip()$/;"	f	class:AssetManager::SharedZip
getZip	utils/AssetManager.cpp	/^ZipFileRO* AssetManager::ZipSet::getZip(const String8& path)$/;"	f	class:AssetManager::ZipSet
getZipEntryCrcLocked	utils/AssetManager.cpp	/^bool AssetManager::getZipEntryCrcLocked(const String8& zipPath, const char* entryFilename,$/;"	f	class:AssetManager
getZipFileLocked	utils/AssetManager.cpp	/^ZipFileRO* AssetManager::getZipFileLocked(const asset_path& ap)$/;"	f	class:AssetManager
getZipResourceTable	utils/AssetManager.cpp	/^ResTable* AssetManager::ZipSet::getZipResourceTable(const String8& path)$/;"	f	class:AssetManager::ZipSet
getZipResourceTableAsset	utils/AssetManager.cpp	/^Asset* AssetManager::ZipSet::getZipResourceTableAsset(const String8& path)$/;"	f	class:AssetManager::ZipSet
get_hex	utils/ResourceTypes.cpp	/^static uint32_t get_hex(char c, bool* outError)$/;"	f	namespace:android
get_mod_time	utils/BackupHelpers.cpp	/^get_mod_time(const char* filename, struct timeval times[2])$/;"	f	namespace:android
get_refs	include/utils/RefBase.h	/^    inline  weakref_type* get_refs() const { return m_refs; }$/;"	f	class:android::wp
handleMessage	utils/Looper.cpp	/^void WeakMessageHandler::handleMessage(const Message& message) {$/;"	f	class:android::WeakMessageHandler
handleMessage	utils/tests/Looper_test.cpp	/^    virtual void handleMessage(const Message& message) {$/;"	f	class:android::StubMessageHandler
handleSeek	utils/Asset.cpp	/^off64_t Asset::handleSeek(off64_t offset, int whence, off64_t curPosn, off64_t maxPosn)$/;"	f	class:Asset
handler	include/utils/Looper.h	/^        sp<MessageHandler> handler;$/;"	m	struct:android::Looper::MessageEnvelope
handler	utils/tests/Looper_test.cpp	/^    virtual int handler(int fd, int events) {$/;"	f	class:android::StubCallbackHandler
hasBit	include/utils/BitSet.h	/^    inline bool hasBit(uint32_t n) const { return value & valueForBit(n); }$/;"	f	struct:android::BitSet32
hasInstance	include/utils/Singleton.h	/^    static bool hasInstance() {$/;"	f	class:android::Singleton
hasProperty	utils/PropertyMap.cpp	/^bool PropertyMap::hasProperty(const String8& key) const {$/;"	f	class:android::PropertyMap
has_trivial_copy	include/utils/TypeHelpers.h	/^        has_trivial_copy    = $/;"	e	enum:android::aggregate_traits::__anon25
has_trivial_copy	include/utils/TypeHelpers.h	/^        has_trivial_copy    = is_pointer || trait_trivial_copy<TYPE>::value,$/;"	e	enum:android::traits::__anon24
has_trivial_ctor	include/utils/TypeHelpers.h	/^        has_trivial_ctor    = $/;"	e	enum:android::aggregate_traits::__anon25
has_trivial_ctor	include/utils/TypeHelpers.h	/^        has_trivial_ctor    = is_pointer || trait_trivial_ctor<TYPE>::value,$/;"	e	enum:android::traits::__anon24
has_trivial_dtor	include/utils/TypeHelpers.h	/^        has_trivial_dtor    = $/;"	e	enum:android::aggregate_traits::__anon25
has_trivial_dtor	include/utils/TypeHelpers.h	/^        has_trivial_dtor    = is_pointer || trait_trivial_dtor<TYPE>::value,$/;"	e	enum:android::traits::__anon24
has_trivial_move	include/utils/TypeHelpers.h	/^        has_trivial_move    = $/;"	e	enum:android::aggregate_traits::__anon25
has_trivial_move	include/utils/TypeHelpers.h	/^        has_trivial_move    = is_pointer || trait_trivial_move<TYPE>::value$/;"	e	enum:android::traits::__anon24
header	include/utils/ResourceTypes.h	/^    struct ResChunk_header header;$/;"	m	struct:android::ResStringPool_header	typeref:struct:android::ResStringPool_header::ResChunk_header
header	include/utils/ResourceTypes.h	/^    struct ResChunk_header header;$/;"	m	struct:android::ResTable_header	typeref:struct:android::ResTable_header::ResChunk_header
header	include/utils/ResourceTypes.h	/^    struct ResChunk_header header;$/;"	m	struct:android::ResTable_package	typeref:struct:android::ResTable_package::ResChunk_header
header	include/utils/ResourceTypes.h	/^    struct ResChunk_header header;$/;"	m	struct:android::ResTable_type	typeref:struct:android::ResTable_type::ResChunk_header
header	include/utils/ResourceTypes.h	/^    struct ResChunk_header header;$/;"	m	struct:android::ResTable_typeSpec	typeref:struct:android::ResTable_typeSpec::ResChunk_header
header	include/utils/ResourceTypes.h	/^    struct ResChunk_header header;$/;"	m	struct:android::ResXMLTree_header	typeref:struct:android::ResXMLTree_header::ResChunk_header
header	include/utils/ResourceTypes.h	/^    struct ResChunk_header header;$/;"	m	struct:android::ResXMLTree_node	typeref:struct:android::ResXMLTree_node::ResChunk_header
header	utils/ResourceTypes.cpp	/^    const Header* const             header;$/;"	m	struct:android::ResTable::Package	file:
header	utils/ResourceTypes.cpp	/^    const Header* const             header;$/;"	m	struct:android::ResTable::Type	file:
header	utils/ResourceTypes.cpp	/^    const ResTable_header*          header;$/;"	m	struct:android::ResTable::Header	file:
headerSize	include/utils/ResourceTypes.h	/^    uint16_t headerSize;$/;"	m	struct:android::ResChunk_header
htodl	include/utils/ByteOrder.h	57;"	d
htodl	include/utils/ByteOrder.h	64;"	d
htods	include/utils/ByteOrder.h	58;"	d
htods	include/utils/ByteOrder.h	65;"	d
htonl	utils/ResourceTypes.cpp	51;"	d	file:
htonl	utils/ResourceTypes.cpp	55;"	d	file:
htonl	utils/Unicode.cpp	23;"	d	file:
htonl	utils/Unicode.cpp	29;"	d	file:
htonl	utils/Unicode.cpp	34;"	d	file:
htons	utils/ResourceTypes.cpp	57;"	d	file:
htons	utils/Unicode.cpp	25;"	d	file:
htons	utils/Unicode.cpp	31;"	d	file:
htons	utils/Unicode.cpp	36;"	d	file:
id	include/utils/ResourceTypes.h	/^    uint32_t id;$/;"	m	struct:android::ResTable_package
id	include/utils/ResourceTypes.h	/^    uint8_t id;$/;"	m	struct:android::ResTable_type
id	include/utils/ResourceTypes.h	/^    uint8_t id;$/;"	m	struct:android::ResTable_typeSpec
id	utils/RefBase.cpp	/^        const void* id;$/;"	m	struct:android::RefBase::weakref_impl::ref_entry	file:
id	utils/ResourceTypes.cpp	/^    uint32_t const                  id;$/;"	m	struct:android::ResTable::PackageGroup	file:
id	utils/ResourceTypes.cpp	/^    uint32_t id;$/;"	m	struct:android::id_name_map	file:
idIndex	include/utils/ResourceTypes.h	/^    uint16_t idIndex;$/;"	m	struct:android::ResXMLTree_attrExt
id_name_map	utils/ResourceTypes.cpp	/^struct id_name_map {$/;"	s	namespace:android	file:
ident	include/utils/Looper.h	/^        int ident;$/;"	m	struct:android::Looper::Request
ident	include/utils/ResourceTypes.h	/^    uint32_t ident;$/;"	m	struct:android::ResTable_ref
identifierForName	utils/ResourceTypes.cpp	/^uint32_t ResTable::identifierForName(const char16_t* name, size_t nameLen,$/;"	f	class:android::ResTable
idmap	include/utils/AssetManager.h	/^        String8 idmap;$/;"	m	struct:android::AssetManager::asset_path
idmapLookup	utils/ResourceTypes.cpp	/^static status_t idmapLookup(const uint32_t* map, size_t sizeBytes, uint32_t key, uint32_t* outValue)$/;"	f	namespace:android
idmapPathForPackagePath	utils/AssetManager.cpp	/^    String8 idmapPathForPackagePath(const String8& pkgPath)$/;"	f	namespace:__anon1
ignore	utils/CallStack.cpp	/^    size_t ignore;$/;"	m	struct:android::__anon4	file:
imsi	include/utils/ResourceTypes.h	/^        uint32_t imsi;$/;"	m	union:android::ResTable_config::__anon41
incStrong	include/utils/RefBase.h	/^    inline void incStrong(const void* id) const {$/;"	f	class:android::LightRefBase
incStrong	utils/RefBase.cpp	/^void RefBase::incStrong(const void* id) const$/;"	f	class:android::RefBase
incWeak	utils/RefBase.cpp	/^void RefBase::weakref_type::incWeak(const void* id)$/;"	f	class:android::RefBase::weakref_type
indent	include/utils/TextOutput.h	/^inline TextOutput& indent(TextOutput& to)$/;"	f	namespace:android
indent	utils/BufferedTextOutput.cpp	/^    int32_t indent;$/;"	m	struct:android::BufferedTextOutput::BufferState	file:
indentStr	utils/Debug.cpp	/^static const char indentStr[] =$/;"	m	namespace:android	file:
index	include/utils/ResourceTypes.h	/^    uint32_t index;$/;"	m	struct:android::ResStringPool_ref
index	utils/ResourceTypes.cpp	/^    size_t                          index;$/;"	m	struct:android::ResTable::Header	file:
indexOf	include/utils/SortedVector.h	/^ssize_t SortedVector<TYPE>::indexOf(const TYPE& item) const {$/;"	f	class:android::SortedVector
indexOf	utils/VectorImpl.cpp	/^ssize_t SortedVectorImpl::indexOf(const void* item) const$/;"	f	class:android::SortedVectorImpl
indexOfAttribute	utils/ResourceTypes.cpp	/^ssize_t ResXMLParser::indexOfAttribute(const char* ns, const char* attr) const$/;"	f	class:android::ResXMLParser
indexOfAttribute	utils/ResourceTypes.cpp	/^ssize_t ResXMLParser::indexOfAttribute(const char16_t* ns, size_t nsLen,$/;"	f	class:android::ResXMLParser
indexOfClass	utils/ResourceTypes.cpp	/^ssize_t ResXMLParser::indexOfClass() const$/;"	f	class:android::ResXMLParser
indexOfID	utils/ResourceTypes.cpp	/^ssize_t ResXMLParser::indexOfID() const$/;"	f	class:android::ResXMLParser
indexOfKey	include/utils/KeyedVector.h	/^ssize_t KeyedVector<KEY,VALUE>::indexOfKey(const KEY& key) const {$/;"	f	class:android::KeyedVector
indexOfString	utils/ResourceTypes.cpp	/^ssize_t ResStringPool::indexOfString(const char16_t* str, size_t strLen) const$/;"	f	class:android::ResStringPool
indexOfStyle	utils/ResourceTypes.cpp	/^ssize_t ResXMLParser::indexOfStyle() const$/;"	f	class:android::ResXMLParser
inflateBuffer	utils/ZipFileRO.cpp	/^\/*static*\/ bool ZipFileRO::inflateBuffer(int fd, const void* inBuf,$/;"	f	class:ZipFileRO
inflateBuffer	utils/ZipFileRO.cpp	/^\/*static*\/ bool ZipFileRO::inflateBuffer(void* outBuf, const void* inBuf,$/;"	f	class:ZipFileRO
inflateToBuffer	utils/ZipUtils.cpp	/^\/*static*\/ bool ZipUtils::inflateToBuffer(FILE* fp, void* buf,$/;"	f	class:ZipUtils
inflateToBuffer	utils/ZipUtils.cpp	/^\/*static*\/ bool ZipUtils::inflateToBuffer(int fd, void* buf,$/;"	f	class:ZipUtils
initInflateState	utils/StreamingZipInflater.cpp	/^void StreamingZipInflater::initInflateState() {$/;"	f	class:StreamingZipInflater
initTLSKey	utils/Looper.cpp	/^void Looper::initTLSKey() {$/;"	f	class:android::Looper
initialize_string16	utils/String16.cpp	/^void initialize_string16()$/;"	f	namespace:android
initialize_string8	utils/String8.cpp	/^void initialize_string8()$/;"	f	namespace:android
input	include/utils/ResourceTypes.h	/^        uint32_t input;$/;"	m	union:android::ResTable_config::__anon54
inputFlags	include/utils/ResourceTypes.h	/^            uint8_t inputFlags;$/;"	m	struct:android::ResTable_config::__anon54::__anon55
inputPad0	include/utils/ResourceTypes.h	/^            uint8_t inputPad0;$/;"	m	struct:android::ResTable_config::__anon54::__anon55
insert	include/utils/List.h	/^    iterator insert(iterator posn, const T& val) $/;"	f	class:android::List
insert	include/utils/List.h	/^    void insert(iterator posn, const_iterator first, const_iterator last) {$/;"	f	class:android::List
insert	utils/String16.cpp	/^status_t String16::insert(size_t pos, const char16_t* chrs)$/;"	f	class:android::String16
insert	utils/String16.cpp	/^status_t String16::insert(size_t pos, const char16_t* chrs, size_t len)$/;"	f	class:android::String16
insertArrayAt	include/utils/Vector.h	/^ssize_t Vector<TYPE>::insertArrayAt(const TYPE* array, size_t index, size_t length) {$/;"	f	class:android::Vector
insertArrayAt	utils/VectorImpl.cpp	/^ssize_t VectorImpl::insertArrayAt(const void* array, size_t index, size_t length)$/;"	f	class:android::VectorImpl
insertAt	include/utils/Vector.h	/^ssize_t Vector<TYPE>::insertAt(const TYPE& item, size_t index, size_t numItems) {$/;"	f	class:android::Vector
insertAt	include/utils/Vector.h	/^ssize_t Vector<TYPE>::insertAt(size_t index, size_t numItems) {$/;"	f	class:android::Vector
insertAt	utils/VectorImpl.cpp	/^ssize_t VectorImpl::insertAt(const void* item, size_t index, size_t numItems)$/;"	f	class:android::VectorImpl
insertAt	utils/VectorImpl.cpp	/^ssize_t VectorImpl::insertAt(size_t index, size_t numItems)$/;"	f	class:android::VectorImpl
insertVectorAt	include/utils/Vector.h	/^ssize_t Vector<TYPE>::insertVectorAt(const Vector<TYPE>& vector, size_t index) {$/;"	f	class:android::Vector
insertVectorAt	utils/VectorImpl.cpp	/^ssize_t VectorImpl::insertVectorAt(const VectorImpl& vector, size_t index)$/;"	f	class:android::VectorImpl
isAllocated	include/utils/Asset.h	/^    virtual bool isAllocated(void) const { return false; }$/;"	f	class:android::Asset
isAllocated	include/utils/Asset.h	/^    virtual bool isAllocated(void) const { return mBuf != NULL; }$/;"	f	class:android::_CompressedAsset
isAllocated	include/utils/Asset.h	/^    virtual bool isAllocated(void) const { return mBuf != NULL; }$/;"	f	class:android::_FileAsset
isBetterThan	include/utils/ResourceTypes.h	/^    isBetterThan(const ResTable_config& o,$/;"	f	struct:android::ResTable_config
isCleanable	utils/BlobCache.cpp	/^bool BlobCache::isCleanable() const {$/;"	f	class:android::BlobCache
isDelimiter	utils/Tokenizer.cpp	/^static inline bool isDelimiter(char ch, const char* delimiters) {$/;"	f	namespace:android
isEmpty	include/utils/BitSet.h	/^    inline bool isEmpty() const { return ! value; }$/;"	f	struct:android::BitSet32
isEmpty	include/utils/KeyedVector.h	/^    inline  bool            isEmpty() const             { return mVector.isEmpty(); }$/;"	f	class:android::KeyedVector
isEmpty	include/utils/SortedVector.h	/^    inline  bool            isEmpty() const             { return VectorImpl::isEmpty(); }$/;"	f	class:android::SortedVector
isEmpty	include/utils/String8.h	/^inline bool String8::isEmpty() const$/;"	f	class:android::String8
isEmpty	include/utils/Vector.h	/^    inline  bool            isEmpty() const             { return VectorImpl::isEmpty(); }$/;"	f	class:android::Vector
isEmpty	include/utils/VectorImpl.h	/^    inline  bool            isEmpty() const     { return mCount == 0; }$/;"	f	class:android::VectorImpl
isEof	include/utils/Tokenizer.h	/^    inline bool isEof() const { return mCurrent == getEnd(); }$/;"	f	class:android::Tokenizer
isEol	include/utils/Tokenizer.h	/^    inline bool isEol() const { return isEof() || *mCurrent == '\\n'; }$/;"	f	class:android::Tokenizer
isFull	include/utils/BitSet.h	/^    inline bool isFull() const { return value == 0xffffffff; }$/;"	f	struct:android::BitSet32
isIdmapStaleLocked	utils/AssetManager.cpp	/^bool AssetManager::isIdmapStaleLocked(const String8& originalPath, const String8& overlayPath,$/;"	f	class:AssetManager
isMoreSpecificThan	include/utils/ResourceTypes.h	/^    isMoreSpecificThan(const ResTable_config& o) const {$/;"	f	struct:android::ResTable_config
isOverlay	include/utils/ObbFile.h	/^    bool isOverlay() {$/;"	f	class:android::ObbFile
isUTF8	utils/ResourceTypes.cpp	/^bool ResStringPool::isUTF8() const$/;"	f	class:android::ResStringPool
isUpToDate	utils/AssetManager.cpp	/^bool AssetManager::SharedZip::isUpToDate()$/;"	f	class:AssetManager::SharedZip
isUpToDate	utils/AssetManager.cpp	/^bool AssetManager::ZipSet::isUpToDate()$/;"	f	class:AssetManager::ZipSet
isUpToDate	utils/AssetManager.cpp	/^bool AssetManager::isUpToDate()$/;"	f	class:AssetManager
is_pointer	include/utils/TypeHelpers.h	/^        is_pointer          = false,$/;"	e	enum:android::aggregate_traits::__anon25
is_pointer	include/utils/TypeHelpers.h	/^        is_pointer          = trait_pointer<TYPE>::value,$/;"	e	enum:android::traits::__anon24
isasciitype	utils/Debug.cpp	/^static inline bool isasciitype(char c)$/;"	f	namespace:android
isident	utils/Debug.cpp	/^static inline int isident(int c)$/;"	f	namespace:android
isspace16	utils/ResourceTypes.cpp	/^inline int isspace16(char16_t c) {$/;"	f	namespace:android
itemAt	include/utils/SortedVector.h	/^const TYPE& SortedVector<TYPE>::itemAt(size_t index) const {$/;"	f	class:android::SortedVector
itemAt	include/utils/Vector.h	/^const TYPE& Vector<TYPE>::itemAt(size_t index) const {$/;"	f	class:android::Vector
itemLocation	utils/VectorImpl.cpp	/^const void* VectorImpl::itemLocation(size_t index) const$/;"	f	class:android::VectorImpl
itemSize	utils/VectorImpl.cpp	/^size_t VectorImpl::itemSize() const {$/;"	f	class:android::VectorImpl
iterator	include/utils/List.h	/^    typedef _ListIterator<T, NON_CONST_ITERATOR> iterator;$/;"	t	class:android::List
iterator	include/utils/Vector.h	/^     typedef TYPE* iterator;$/;"	t	class:android::Vector
join	utils/Threads.cpp	/^status_t Thread::join()$/;"	f	class:android::Thread
kAppZipName	utils/AssetManager.cpp	/^static const char* kAppZipName = NULL; \/\/"classes.jar";$/;"	v	file:
kAssetsRoot	utils/AssetManager.cpp	/^static const char* kAssetsRoot = "assets";$/;"	v	file:
kByteMark	utils/Unicode.cpp	/^static const char32_t kByteMark = 0x00000080;$/;"	v	file:
kByteMask	utils/Unicode.cpp	/^static const char32_t kByteMask = 0x000000BF;$/;"	v	file:
kCDECRC	utils/ZipFileRO.cpp	89;"	d	file:
kCDECommentLen	utils/ZipFileRO.cpp	94;"	d	file:
kCDECompLen	utils/ZipFileRO.cpp	90;"	d	file:
kCDEExtraLen	utils/ZipFileRO.cpp	93;"	d	file:
kCDELen	utils/ZipFileRO.cpp	86;"	d	file:
kCDELocalOffset	utils/ZipFileRO.cpp	95;"	d	file:
kCDEMethod	utils/ZipFileRO.cpp	87;"	d	file:
kCDEModWhen	utils/ZipFileRO.cpp	88;"	d	file:
kCDENameLen	utils/ZipFileRO.cpp	92;"	d	file:
kCDESignature	utils/ZipFileRO.cpp	85;"	d	file:
kCDEUncompLen	utils/ZipFileRO.cpp	91;"	d	file:
kCompressDeflated	include/utils/ZipFileRO.h	/^        kCompressDeflated   = 8,        \/\/ standard deflate$/;"	e	enum:android::ZipFileRO::__anon16
kCompressStored	include/utils/ZipFileRO.h	/^        kCompressStored     = 0,        \/\/ no compression$/;"	e	enum:android::ZipFileRO::__anon16
kDefaultLocale	utils/AssetManager.cpp	/^static const char* kDefaultLocale = "default";$/;"	v	file:
kDefaultVendor	utils/AssetManager.cpp	/^static const char* kDefaultVendor = "default";$/;"	v	file:
kEOCDFileOffset	utils/ZipFileRO.cpp	75;"	d	file:
kEOCDLen	utils/ZipFileRO.cpp	72;"	d	file:
kEOCDNumEntries	utils/ZipFileRO.cpp	73;"	d	file:
kEOCDSignature	utils/ZipFileRO.cpp	71;"	d	file:
kEOCDSize	utils/ZipFileRO.cpp	74;"	d	file:
kExcludeExtension	utils/AssetManager.cpp	/^static const char* kExcludeExtension = ".EXCLUDE";$/;"	v	file:
kExcludedAsset	utils/AssetManager.cpp	/^static Asset* const kExcludedAsset = (Asset*) 0xd000000d;$/;"	v	file:
kFileTypeBlockDev	include/utils/misc.h	/^    kFileTypeBlockDev,$/;"	e	enum:android::FileType
kFileTypeCharDev	include/utils/misc.h	/^    kFileTypeCharDev,$/;"	e	enum:android::FileType
kFileTypeDirectory	include/utils/misc.h	/^    kFileTypeDirectory,$/;"	e	enum:android::FileType
kFileTypeFifo	include/utils/misc.h	/^    kFileTypeFifo,$/;"	e	enum:android::FileType
kFileTypeNonexistent	include/utils/misc.h	/^    kFileTypeNonexistent,       \/\/ i.e. ENOENT$/;"	e	enum:android::FileType
kFileTypeRegular	include/utils/misc.h	/^    kFileTypeRegular,$/;"	e	enum:android::FileType
kFileTypeSocket	include/utils/misc.h	/^    kFileTypeSocket,$/;"	e	enum:android::FileType
kFileTypeSymlink	include/utils/misc.h	/^    kFileTypeSymlink,$/;"	e	enum:android::FileType
kFileTypeUnknown	include/utils/misc.h	/^    kFileTypeUnknown = 0,$/;"	e	enum:android::FileType
kFirstByteMark	utils/Unicode.cpp	/^static const char32_t kFirstByteMark[] = {$/;"	v	file:
kFlagsOffset	utils/ObbFile.cpp	52;"	d	file:
kFooterMinSize	utils/ObbFile.cpp	34;"	d	file:
kFooterTagSize	utils/ObbFile.cpp	32;"	d	file:
kIdmapCacheDir	utils/AssetManager.cpp	/^static const char* kIdmapCacheDir = "resource-cache";$/;"	v	file:
kLFHExtraLen	utils/ZipFileRO.cpp	83;"	d	file:
kLFHLen	utils/ZipFileRO.cpp	81;"	d	file:
kLFHNameLen	utils/ZipFileRO.cpp	82;"	d	file:
kLFHSignature	utils/ZipFileRO.cpp	80;"	d	file:
kMaxBufSize	utils/ObbFile.cpp	44;"	d	file:
kMaxCommentLen	utils/ZipFileRO.cpp	77;"	d	file:
kMaxEOCDSearch	utils/ZipFileRO.cpp	78;"	d	file:
kMinVectorCapacity	utils/VectorImpl.cpp	/^const size_t kMinVectorCapacity = 4;$/;"	m	namespace:android	file:
kPackageNameLenOffset	utils/ObbFile.cpp	54;"	d	file:
kPackageNameOffset	utils/ObbFile.cpp	55;"	d	file:
kPackageVersionOffset	utils/ObbFile.cpp	51;"	d	file:
kReadVsMapThreshold	include/utils/Asset.h	/^    enum { kReadVsMapThreshold = 4096 };$/;"	e	enum:android::_FileAsset::__anon33
kSaltOffset	utils/ObbFile.cpp	53;"	d	file:
kSigVersion	utils/ObbFile.cpp	48;"	d	file:
kSignature	utils/ObbFile.cpp	46;"	d	file:
kSystemAssets	utils/AssetManager.cpp	/^static const char* kSystemAssets = "framework\/framework-res.apk";$/;"	v	file:
kUnicodeMaxCodepoint	utils/Unicode.cpp	/^static const char32_t kUnicodeMaxCodepoint        = 0x0010FFFF;$/;"	v	file:
kUnicodeSurrogateEnd	utils/Unicode.cpp	/^static const char32_t kUnicodeSurrogateEnd        = kUnicodeSurrogateLowEnd;$/;"	v	file:
kUnicodeSurrogateHighEnd	utils/Unicode.cpp	/^static const char32_t kUnicodeSurrogateHighEnd    = 0x0000DBFF;$/;"	v	file:
kUnicodeSurrogateHighStart	utils/Unicode.cpp	/^static const char32_t kUnicodeSurrogateHighStart  = 0x0000D800;$/;"	v	file:
kUnicodeSurrogateLowEnd	utils/Unicode.cpp	/^static const char32_t kUnicodeSurrogateLowEnd     = 0x0000DFFF;$/;"	v	file:
kUnicodeSurrogateLowStart	utils/Unicode.cpp	/^static const char32_t kUnicodeSurrogateLowStart   = 0x0000DC00;$/;"	v	file:
kUnicodeSurrogateStart	utils/Unicode.cpp	/^static const char32_t kUnicodeSurrogateStart      = kUnicodeSurrogateHighStart;$/;"	v	file:
kUnlimitedCapacity	include/utils/GenerationCache.h	/^        kUnlimitedCapacity,$/;"	e	enum:android::GenerationCache::Capacity
kZipEntryAdj	utils/ZipFileRO.cpp	103;"	d	file:
key	include/utils/GenerationCache.h	/^    EntryKey key;$/;"	m	struct:android::Entry
key	include/utils/ResourceTypes.h	/^    struct ResStringPool_ref key;$/;"	m	struct:android::ResTable_entry	typeref:struct:android::ResTable_entry::ResStringPool_ref
key	include/utils/TypeHelpers.h	/^    KEY     key;$/;"	m	struct:android::key_value_pair_t
keyAt	include/utils/KeyedVector.h	/^const KEY& KeyedVector<KEY,VALUE>::keyAt(size_t index) const {$/;"	f	class:android::KeyedVector
keyLen	include/utils/BackupHelpers.h	/^    int keyLen; \/\/ length of the key name, not including the null terminator$/;"	m	struct:android::__anon31
keyStrings	include/utils/ResourceTypes.h	/^    uint32_t keyStrings;$/;"	m	struct:android::ResTable_package
keyStrings	utils/ResourceTypes.cpp	/^    ResStringPool                   keyStrings;$/;"	m	struct:android::ResTable::Package	file:
key_type	include/utils/KeyedVector.h	/^    typedef KEY    key_type;$/;"	t	class:android::KeyedVector
key_value_pair_t	include/utils/TypeHelpers.h	/^    key_value_pair_t() { }$/;"	f	struct:android::key_value_pair_t
key_value_pair_t	include/utils/TypeHelpers.h	/^    key_value_pair_t(const KEY& k) : key(k) { }$/;"	f	struct:android::key_value_pair_t
key_value_pair_t	include/utils/TypeHelpers.h	/^    key_value_pair_t(const KEY& k, const VALUE& v) : key(k), value(v)  { }$/;"	f	struct:android::key_value_pair_t
key_value_pair_t	include/utils/TypeHelpers.h	/^    key_value_pair_t(const key_value_pair_t& o) : key(o.key), value(o.value) { }$/;"	f	struct:android::key_value_pair_t
key_value_pair_t	include/utils/TypeHelpers.h	/^struct key_value_pair_t {$/;"	s	namespace:android
keyboard	include/utils/ResourceTypes.h	/^            uint8_t keyboard;$/;"	m	struct:android::ResTable_config::__anon54::__anon55
language	include/utils/ResourceTypes.h	/^            char language[2];$/;"	m	struct:android::ResTable_config::__anon43::__anon44
lap	utils/StopWatch.cpp	/^nsecs_t StopWatch::lap()$/;"	f	class:android::StopWatch
lap_t	include/utils/StopWatch.h	/^    struct lap_t {$/;"	s	class:android::StopWatch
lastChar	include/utils/ResourceTypes.h	/^    uint32_t firstChar, lastChar;$/;"	m	struct:android::ResStringPool_span
lastMarkedBit	include/utils/BitSet.h	/^    inline uint32_t lastMarkedBit() const { return 31 - __builtin_ctz(value); }$/;"	f	struct:android::BitSet32
lastPublicKey	include/utils/ResourceTypes.h	/^    uint32_t lastPublicKey;$/;"	m	struct:android::ResTable_package
lastPublicType	include/utils/ResourceTypes.h	/^    uint32_t lastPublicType;$/;"	m	struct:android::ResTable_package
len	utils/ResourceTypes.cpp	/^    size_t len;$/;"	m	struct:android::id_name_map	file:
len	utils/ResourceTypes.cpp	/^    size_t len;$/;"	m	struct:android::unit_entry	file:
length	include/utils/String8.h	/^inline size_t String8::length() const$/;"	f	class:android::String8
lineNumber	include/utils/ResourceTypes.h	/^    uint32_t lineNumber;$/;"	m	struct:android::ResXMLTree_node
linear_transform_s64_to_s64	utils/LinearTransform.cpp	/^static bool linear_transform_s64_to_s64($/;"	f	namespace:android
linux_gcc_demangler	utils/CallStack.cpp	/^int32_t linux_gcc_demangler(const char *mangled_name, char *unmangled_name, size_t buffersize)$/;"	f	namespace:android
load	utils/PropertyMap.cpp	/^status_t PropertyMap::load(const String8& filename, PropertyMap** outMap) {$/;"	f	class:android::PropertyMap
loadFileNameCacheLocked	utils/AssetManager.cpp	/^void AssetManager::loadFileNameCacheLocked(void)$/;"	f	class:AssetManager
locale	include/utils/ResourceTypes.h	/^        uint32_t locale;$/;"	m	union:android::ResTable_config::__anon43
lock	include/utils/threads.h	/^inline status_t Mutex::lock() {$/;"	f	class:android::Mutex
lock	utils/ResourceTypes.cpp	/^void ResTable::lock() const$/;"	f	class:android::ResTable
lockBag	utils/ResourceTypes.cpp	/^ssize_t ResTable::lockBag(uint32_t resID, const bag_entry** outBag) const$/;"	f	class:android::ResTable
lockBuffer	utils/String8.cpp	/^char* String8::lockBuffer(size_t size)$/;"	f	class:android::String8
lookup_symbol	utils/CallStack.cpp	/^const char *lookup_symbol(const void* addr, void **offset, char* name, size_t bufSize)$/;"	f	namespace:android
lseek64	include/utils/Compat.h	/^static inline off64_t lseek64(int fd, off64_t offset, int whence) {$/;"	f
mAccessMode	include/utils/Asset.h	/^    AccessMode  mAccessMode;        \/\/ how the asset was opened$/;"	m	class:android::Asset
mAlignment	include/utils/TextOutput.h	/^    size_t mAlignment;$/;"	m	class:android::HexDump
mAllowNonCallbacks	include/utils/Looper.h	/^    const bool mAllowNonCallbacks; \/\/ immutable$/;"	m	class:android::Looper
mArray	include/utils/StringArray.h	/^    char**  mArray;$/;"	m	class:android::StringArray
mAssetPaths	include/utils/AssetManager.h	/^    Vector<asset_path> mAssetPaths;$/;"	m	class:android::AssetManager
mAssetSource	include/utils/Asset.h	/^    String8    mAssetSource;       \/\/ debug string$/;"	m	class:android::Asset
mAwake	include/utils/Looper.h	/^    Condition mAwake;   \/\/ guarded by mLock$/;"	m	class:android::Looper
mBC	utils/tests/BlobCache_test.cpp	/^    sp<BlobCache> mBC;$/;"	m	class:android::BlobCacheTest	file:
mBase	utils/RefBase.cpp	/^    RefBase* const      mBase;$/;"	m	class:android::RefBase::weakref_impl	file:
mBaseLength	include/utils/FileMap.h	/^    size_t      mBaseLength;    \/\/ length, measured from "mBasePtr"$/;"	m	class:android::FileMap
mBasePtr	include/utils/FileMap.h	/^    void*       mBasePtr;       \/\/ base of mmap area; page aligned$/;"	m	class:android::FileMap
mBuf	include/utils/Asset.h	/^    unsigned char*  mBuf;       \/\/ for getBuffer()$/;"	m	class:android::_CompressedAsset
mBuf	include/utils/Asset.h	/^    unsigned char* mBuf;        \/\/ for read$/;"	m	class:android::_FileAsset
mBuffer	include/utils/TextOutput.h	/^    const void* mBuffer;$/;"	m	class:android::HexDump
mBuffer	include/utils/Tokenizer.h	/^    char* mBuffer;$/;"	m	class:android::Tokenizer
mBytesPerLine	include/utils/TextOutput.h	/^    size_t mBytesPerLine;$/;"	m	class:android::HexDump
mCArrayStyle	include/utils/TextOutput.h	/^    bool mCArrayStyle;$/;"	m	class:android::HexDump
mCache	include/utils/AssetManager.h	/^    SortedVector<AssetDir::FileInfo> mCache;$/;"	m	class:android::AssetManager
mCache	include/utils/GenerationCache.h	/^    KeyedVector<K, sp<Entry<K, V> > > mCache;$/;"	m	class:android::GenerationCache
mCache	include/utils/ResourceTypes.h	/^    char16_t**                  mCache;$/;"	m	class:android::ResStringPool
mCacheEntries	include/utils/BlobCache.h	/^    SortedVector<CacheEntry> mCacheEntries;$/;"	m	class:android::BlobCache
mCacheMode	include/utils/AssetManager.h	/^    CacheMode       mCacheMode;         \/\/ is the cache enabled?$/;"	m	class:android::AssetManager
mCacheValid	include/utils/AssetManager.h	/^    bool            mCacheValid;        \/\/ clear when locale or vendor changes$/;"	m	class:android::AssetManager
mCanCallJava	include/utils/threads.h	/^    const   bool            mCanCallJava;$/;"	m	class:android::Thread
mClock	include/utils/StopWatch.h	/^    int             mClock;$/;"	m	class:android::StopWatch
mCode	include/utils/TextOutput.h	/^    uint32_t mCode;$/;"	m	class:android::TypeCode
mCompressedLen	include/utils/Asset.h	/^    off64_t     mCompressedLen; \/\/ length of the compressed data$/;"	m	class:android::_CompressedAsset
mCond	include/utils/threads.h	/^    pthread_cond_t mCond;$/;"	m	class:android::Condition
mConfig	include/utils/AssetManager.h	/^    ResTable_config* mConfig;$/;"	m	class:android::AssetManager
mCount	include/utils/CallStack.h	/^    size_t      mCount;$/;"	m	class:android::CallStack
mCount	include/utils/RefBase.h	/^    mutable volatile int32_t mCount;$/;"	m	class:android::LightRefBase
mCount	include/utils/VectorImpl.h	/^            size_t      mCount;     \/\/ number of items$/;"	m	class:android::VectorImpl
mCurExt	include/utils/ResourceTypes.h	/^    const void*                 mCurExt;$/;"	m	class:android::ResXMLParser
mCurNode	include/utils/ResourceTypes.h	/^    const ResXMLTree_node*      mCurNode;$/;"	m	class:android::ResXMLParser
mCurrent	include/utils/StringArray.h	/^    int     mCurrent;$/;"	m	class:android::StringArray
mCurrent	include/utils/Tokenizer.h	/^    const char* mCurrent;$/;"	m	class:android::Tokenizer
mData	include/utils/BlobCache.h	/^        const void* mData;$/;"	m	class:android::BlobCache::Blob
mDataEnd	include/utils/ResourceTypes.h	/^    const uint8_t*              mDataEnd;$/;"	m	class:android::ResXMLTree
mDataLength	include/utils/FileMap.h	/^    size_t      mDataLength;    \/\/ length, measured from "mDataPtr"$/;"	m	class:android::FileMap
mDataMap	include/utils/StreamingZipInflater.h	/^    class FileMap* mDataMap;$/;"	m	class:android::StreamingZipInflater	typeref:class:android::StreamingZipInflater::FileMap
mDataOffset	include/utils/FileMap.h	/^    off64_t     mDataOffset;    \/\/ offset used when map was created$/;"	m	class:android::FileMap
mDataPtr	include/utils/FileMap.h	/^    void*       mDataPtr;       \/\/ start of requested data, offset from base$/;"	m	class:android::FileMap
mDecodeLock	include/utils/ResourceTypes.h	/^    mutable Mutex               mDecodeLock;$/;"	m	class:android::ResStringPool
mDefault	include/utils/KeyedVector.h	/^            VALUE                                           mDefault;$/;"	m	class:android::DefaultKeyedVector
mDelayMillis	utils/tests/TestHelpers.h	/^    int mDelayMillis;$/;"	m	class:android::DelayedTask
mDirectoryMap	include/utils/ZipFileRO.h	/^    FileMap*    mDirectoryMap;$/;"	m	class:android::ZipFileRO
mDirectoryOffset	include/utils/ZipFileRO.h	/^    off64_t     mDirectoryOffset;$/;"	m	class:android::ZipFileRO
mEntries	include/utils/ResourceTypes.h	/^    const uint32_t*             mEntries;$/;"	m	class:android::ResStringPool
mEntryStyles	include/utils/ResourceTypes.h	/^    const uint32_t*             mEntryStyles;$/;"	m	class:android::ResStringPool
mEpollFd	include/utils/Looper.h	/^    int mEpollFd; \/\/ immutable$/;"	m	class:android::Looper
mError	include/utils/ResourceTypes.h	/^    status_t                    mError;$/;"	m	class:android::ResStringPool
mError	include/utils/ResourceTypes.h	/^    status_t                    mError;$/;"	m	class:android::ResTable
mError	include/utils/ResourceTypes.h	/^    status_t                    mError;$/;"	m	class:android::ResXMLTree
mEventCode	include/utils/ResourceTypes.h	/^    event_code_t                mEventCode;$/;"	m	class:android::ResXMLParser
mExitPending	include/utils/threads.h	/^    volatile bool           mExitPending;$/;"	m	class:android::Thread
mExternalStorage	utils/tests/ObbFile_test.cpp	/^    char* mExternalStorage;$/;"	m	class:android::ObbFileTest	file:
mFD	utils/Static.cpp	/^    int mFD;$/;"	m	class:android::FdTextOutput	file:
mFd	include/utils/Asset.h	/^    int         mFd;            \/\/ for file input$/;"	m	class:android::_CompressedAsset
mFd	include/utils/StreamingZipInflater.h	/^    int mFd;$/;"	m	class:android::StreamingZipInflater
mFd	include/utils/ZipFileRO.h	/^    int         mFd;$/;"	m	class:android::ZipFileRO
mFdLock	include/utils/ZipFileRO.h	/^    mutable Mutex mFdLock;$/;"	m	class:android::ZipFileRO
mFileHandle	include/utils/FileMap.h	/^    HANDLE      mFileHandle;    \/\/ Win32 file handle$/;"	m	class:android::FileMap
mFileInfo	include/utils/AssetDir.h	/^    SortedVector<FileInfo>* mFileInfo;$/;"	m	class:android::AssetDir
mFileLength	include/utils/ZipFileRO.h	/^    size_t      mFileLength;$/;"	m	class:android::ZipFileRO
mFileMap	include/utils/Tokenizer.h	/^    FileMap* mFileMap;$/;"	m	class:android::Tokenizer
mFileMapping	include/utils/FileMap.h	/^    HANDLE      mFileMapping;   \/\/ Win32 file mapping handle$/;"	m	class:android::FileMap
mFileName	include/utils/Asset.h	/^    char*       mFileName;      \/\/ for opening$/;"	m	class:android::_FileAsset
mFileName	include/utils/AssetDir.h	/^        String8    mFileName;      \/\/ filename only$/;"	m	class:android::AssetDir::FileInfo
mFileName	include/utils/FileMap.h	/^    char*       mFileName;      \/\/ original file name, if known$/;"	m	class:android::FileMap
mFileName	include/utils/ObbFile.h	/^    const char* mFileName;$/;"	m	class:android::ObbFile
mFileName	include/utils/ZipFileRO.h	/^    char*       mFileName;$/;"	m	class:android::ZipFileRO
mFileName	utils/tests/ObbFile_test.cpp	/^    char* mFileName;$/;"	m	class:android::ObbFileTest	file:
mFileSize	include/utils/ObbFile.h	/^    size_t mFileSize;$/;"	m	class:android::ObbFile
mFileType	include/utils/AssetDir.h	/^        FileType    mFileType;      \/\/ regular, directory, etc$/;"	m	class:android::AssetDir::FileInfo
mFilename	include/utils/Tokenizer.h	/^    String8 mFilename;$/;"	m	class:android::Tokenizer
mFlags	include/utils/BufferedTextOutput.h	/^    uint32_t            mFlags;$/;"	m	class:android::BufferedTextOutput
mFlags	include/utils/ObbFile.h	/^    int32_t mFlags;$/;"	m	class:android::ObbFile
mFlags	include/utils/StopWatch.h	/^    uint32_t        mFlags;$/;"	m	class:android::StopWatch
mFlags	include/utils/VectorImpl.h	/^    const   uint32_t    mFlags;$/;"	m	class:android::VectorImpl
mFlags	utils/RefBase.cpp	/^    volatile int32_t    mFlags;$/;"	m	class:android::RefBase::weakref_impl	file:
mFooterStart	include/utils/ObbFile.h	/^    size_t mFooterStart;$/;"	m	class:android::ObbFile
mFp	include/utils/Asset.h	/^    FILE*       mFp;            \/\/ for read\/seek$/;"	m	class:android::_FileAsset
mGlobalState	include/utils/BufferedTextOutput.h	/^    BufferState*        mGlobalState;$/;"	m	class:android::BufferedTextOutput
mHandler	include/utils/Looper.h	/^    wp<MessageHandler> mHandler;$/;"	m	class:android::WeakMessageHandler
mHashTable	include/utils/ZipFileRO.h	/^    HashEntry*  mHashTable;$/;"	m	class:android::ZipFileRO
mHashTableSize	include/utils/ZipFileRO.h	/^    int         mHashTableSize;$/;"	m	class:android::ZipFileRO
mHeader	include/utils/ResourceTypes.h	/^    const ResStringPool_header* mHeader;$/;"	m	class:android::ResStringPool
mHeader	include/utils/ResourceTypes.h	/^    const ResXMLTree_header*    mHeader;$/;"	m	class:android::ResXMLTree
mHeaders	include/utils/ResourceTypes.h	/^    Vector<Header*>             mHeaders;$/;"	m	class:android::ResTable
mHoldSelf	include/utils/threads.h	/^            sp<Thread>      mHoldSelf;$/;"	m	class:android::Thread
mInBuf	include/utils/StreamingZipInflater.h	/^    uint8_t* mInBuf;$/;"	m	class:android::StreamingZipInflater
mInBufSize	include/utils/StreamingZipInflater.h	/^    size_t mInBufSize;          \/\/ allocated size of mInBuf;$/;"	m	class:android::StreamingZipInflater
mInFileStart	include/utils/StreamingZipInflater.h	/^    off64_t mInFileStart;         \/\/ where the compressed data lives in the file$/;"	m	class:android::StreamingZipInflater
mInNextChunkOffset	include/utils/StreamingZipInflater.h	/^    size_t mInNextChunkOffset;  \/\/ offset from start of blob at which the next input chunk lies$/;"	m	class:android::StreamingZipInflater
mInTotalSize	include/utils/StreamingZipInflater.h	/^    size_t mInTotalSize;        \/\/ total size of compressed data for this blob$/;"	m	class:android::StreamingZipInflater
mIndex	include/utils/BufferedTextOutput.h	/^    const int32_t       mIndex;$/;"	m	class:android::BufferedTextOutput
mInflateState	include/utils/StreamingZipInflater.h	/^    z_stream mInflateState;$/;"	m	class:android::StreamingZipInflater
mItemSize	include/utils/VectorImpl.h	/^    const   size_t      mItemSize;$/;"	m	class:android::VectorImpl
mKey	include/utils/BlobCache.h	/^        sp<Blob> mKey;$/;"	m	class:android::BlobCache::CacheEntry
mLaps	include/utils/StopWatch.h	/^    lap_t           mLaps[8];$/;"	m	class:android::StopWatch
mLength	include/utils/Asset.h	/^    off64_t     mLength;        \/\/ length of the chunk$/;"	m	class:android::_FileAsset
mLength	include/utils/Tokenizer.h	/^    size_t mLength;$/;"	m	class:android::Tokenizer
mLineNumber	include/utils/Tokenizer.h	/^    int32_t mLineNumber;$/;"	m	class:android::Tokenizer
mListener	include/utils/GenerationCache.h	/^    OnEntryRemoved<K, V>* mListener;$/;"	m	class:android::GenerationCache
mLocale	include/utils/AssetManager.h	/^    char*           mLocale;$/;"	m	class:android::AssetManager
mLock	include/utils/AssetManager.h	/^    mutable Mutex   mLock;$/;"	m	class:android::AssetManager
mLock	include/utils/BufferedTextOutput.h	/^    Mutex               mLock;$/;"	m	class:android::BufferedTextOutput
mLock	include/utils/Looper.h	/^    Mutex mLock;$/;"	m	class:android::Looper
mLock	include/utils/ResourceTypes.h	/^    mutable Mutex               mLock;$/;"	m	class:android::ResTable
mLock	include/utils/threads.h	/^        Mutex& mLock;$/;"	m	class:android::Mutex::Autolock
mLock	include/utils/threads.h	/^        RWLock& mLock;$/;"	m	class:android::RWLock::AutoRLock
mLock	include/utils/threads.h	/^        RWLock& mLock;$/;"	m	class:android::RWLock::AutoWLock
mLock	include/utils/threads.h	/^    mutable Mutex           mLock;$/;"	m	class:android::Thread
mLock	utils/CallStack.cpp	/^    Mutex       mLock;$/;"	m	class:android::MapInfo	file:
mLooper	utils/tests/Looper_test.cpp	/^    sp<Looper> mLooper;$/;"	m	class:android::DelayedWake	file:
mLooper	utils/tests/Looper_test.cpp	/^    sp<Looper> mLooper;$/;"	m	class:android::LooperTest	file:
mMap	include/utils/Asset.h	/^    FileMap*    mMap;           \/\/ for memory map$/;"	m	class:android::_FileAsset
mMap	include/utils/Asset.h	/^    FileMap*    mMap;           \/\/ for memory-mapped input$/;"	m	class:android::_CompressedAsset
mMap	include/utils/PropertyMap.h	/^        PropertyMap* mMap;$/;"	m	class:android::PropertyMap::Parser
mMax	include/utils/StringArray.h	/^    int     mMax;$/;"	m	class:android::StringArray
mMaxCapacity	include/utils/GenerationCache.h	/^    uint32_t mMaxCapacity;$/;"	m	class:android::GenerationCache
mMaxKeySize	include/utils/BlobCache.h	/^    const size_t mMaxKeySize;$/;"	m	class:android::BlobCache
mMaxTotalSize	include/utils/BlobCache.h	/^    const size_t mMaxTotalSize;$/;"	m	class:android::BlobCache
mMaxValueSize	include/utils/BlobCache.h	/^    const size_t mMaxValueSize;$/;"	m	class:android::BlobCache
mMessageEnvelopes	include/utils/Looper.h	/^    Vector<MessageEnvelope> mMessageEnvelopes; \/\/ guarded by mLock$/;"	m	class:android::Looper
mModWhen	include/utils/AssetManager.h	/^        time_t mModWhen;$/;"	m	class:android::AssetManager::SharedZip
mMutex	include/utils/BlobCache.h	/^    Mutex mMutex;$/;"	m	class:android::BlobCache
mMutex	include/utils/threads.h	/^    pthread_mutex_t mMutex;$/;"	m	class:android::Mutex
mMutex	utils/RefBase.cpp	/^    mutable Mutex mMutex;$/;"	m	class:android::RefBase::weakref_impl	file:
mName	include/utils/StopWatch.h	/^    const char*     mName;$/;"	m	class:android::StopWatch
mNext	include/utils/Asset.h	/^    Asset*		mNext;				\/\/ linked list.$/;"	m	class:android::Asset
mNextMessageUptime	include/utils/Looper.h	/^    nsecs_t mNextMessageUptime; \/\/ set to LLONG_MAX when none$/;"	m	class:android::Looper
mNumEntries	include/utils/ZipFileRO.h	/^    int         mNumEntries;$/;"	m	class:android::ZipFileRO
mNumLaps	include/utils/StopWatch.h	/^    int             mNumLaps;$/;"	m	class:android::StopWatch
mNumResIds	include/utils/ResourceTypes.h	/^    size_t                      mNumResIds;$/;"	m	class:android::ResXMLTree
mObbFile	utils/tests/ObbFile_test.cpp	/^    sp<ObbFile> mObbFile;$/;"	m	class:android::ObbFileTest	file:
mOffset	include/utils/Asset.h	/^    off64_t     mOffset;        \/\/ current local offset, 0 == mStart$/;"	m	class:android::_FileAsset
mOffset	include/utils/Asset.h	/^    off64_t     mOffset;        \/\/ current offset, 0 == start of uncomp data$/;"	m	class:android::_CompressedAsset
mOldest	include/utils/GenerationCache.h	/^    sp<Entry<K, V> > mOldest;$/;"	m	class:android::GenerationCache
mOutBuf	include/utils/StreamingZipInflater.h	/^    uint8_t* mOutBuf;           \/\/ output buf for decompressed bytes$/;"	m	class:android::StreamingZipInflater
mOutBufSize	include/utils/StreamingZipInflater.h	/^    size_t mOutBufSize;         \/\/ allocated size of mOutBuf$/;"	m	class:android::StreamingZipInflater
mOutCurPosition	include/utils/StreamingZipInflater.h	/^    off64_t mOutCurPosition;      \/\/ current position in total offset$/;"	m	class:android::StreamingZipInflater
mOutDeliverable	include/utils/StreamingZipInflater.h	/^    size_t mOutDeliverable;     \/\/ next undelivered byte of decoded output in mOutBuf$/;"	m	class:android::StreamingZipInflater
mOutLastDecoded	include/utils/StreamingZipInflater.h	/^    size_t mOutLastDecoded;     \/\/ last decoded byte + 1 in mOutbuf$/;"	m	class:android::StreamingZipInflater
mOutTotalSize	include/utils/StreamingZipInflater.h	/^    size_t mOutTotalSize;       \/\/ total uncompressed size of the blob$/;"	m	class:android::StreamingZipInflater
mOwnedData	include/utils/ResourceTypes.h	/^    void*                       mOwnedData;$/;"	m	class:android::ResStringPool
mOwnedData	include/utils/ResourceTypes.h	/^    void*                       mOwnedData;$/;"	m	class:android::ResXMLTree
mOwnsData	include/utils/BlobCache.h	/^        bool mOwnsData;$/;"	m	class:android::BlobCache::Blob
mPackageGroups	include/utils/ResourceTypes.h	/^    Vector<PackageGroup*>       mPackageGroups;$/;"	m	class:android::ResTable
mPackageMap	include/utils/ResourceTypes.h	/^    uint8_t                     mPackageMap[256];$/;"	m	class:android::ResTable
mPackageName	include/utils/ObbFile.h	/^    String8 mPackageName;$/;"	m	class:android::ObbFile
mPackages	include/utils/ResourceTypes.h	/^        package_info*   mPackages[Res_MAXPACKAGE];$/;"	m	class:android::ResTable::Theme
mPageSize	include/utils/FileMap.h	/^    static long mPageSize;$/;"	m	class:android::FileMap
mPageSize	utils/FileMap.cpp	/^\/*static*\/ long FileMap::mPageSize = -1;$/;"	m	class:FileMap	file:
mParams	include/utils/ResourceTypes.h	/^    ResTable_config             mParams;$/;"	m	class:android::ResTable
mPath	include/utils/AssetManager.h	/^        String8 mPath;$/;"	m	class:android::AssetManager::SharedZip
mPendingWakeCount	include/utils/Looper.h	/^    int mPendingWakeCount;$/;"	m	class:android::Looper
mPendingWakeTime	include/utils/Looper.h	/^    nsecs_t mPendingWakeTime;$/;"	m	class:android::Looper
mPipe	utils/tests/Looper_test.cpp	/^    Pipe* mPipe;$/;"	m	class:android::DelayedWriteSignal	file:
mPolling	include/utils/Looper.h	/^    bool mPolling;      \/\/ guarded by mLock$/;"	m	class:android::Looper
mPrev	include/utils/Asset.h	/^    Asset*		mPrev;$/;"	m	class:android::Asset
mProperties	include/utils/PropertyMap.h	/^    KeyedVector<String8, String8> mProperties;$/;"	m	class:android::PropertyMap
mRWLock	include/utils/threads.h	/^   pthread_rwlock_t mRWLock;$/;"	m	class:android::RWLock
mRandState	include/utils/BlobCache.h	/^    unsigned short mRandState[3];$/;"	m	class:android::BlobCache
mReadBuf	include/utils/ObbFile.h	/^    unsigned char* mReadBuf;$/;"	m	class:android::ObbFile
mRefCount	include/utils/FileMap.h	/^    int         mRefCount;      \/\/ reference count$/;"	m	class:android::FileMap
mRefs	include/utils/RefBase.h	/^        weakref_impl* const mRefs;$/;"	m	class:android::RefBase
mRefs	include/utils/SharedBuffer.h	/^        mutable int32_t        mRefs;$/;"	m	class:android::SharedBuffer
mRequestedFds	include/utils/Looper.h	/^    Vector<struct pollfd> mRequestedFds;  \/\/ must hold mLock and mPolling must be false to modify$/;"	m	class:android::Looper
mRequests	include/utils/Looper.h	/^    KeyedVector<int, Request> mRequests;  \/\/ guarded by mLock$/;"	m	class:android::Looper
mRequests	include/utils/Looper.h	/^    Vector<Request> mRequests;            \/\/ must hold mLock and mPolling must be false to modify$/;"	m	class:android::Looper
mResIds	include/utils/ResourceTypes.h	/^    const uint32_t*             mResIds;$/;"	m	class:android::ResXMLTree
mReserved	include/utils/SharedBuffer.h	/^                uint32_t       mReserved[2];$/;"	m	class:android::SharedBuffer
mResourceTable	include/utils/AssetManager.h	/^        ResTable* mResourceTable;$/;"	m	class:android::AssetManager::SharedZip
mResourceTableAsset	include/utils/AssetManager.h	/^        Asset* mResourceTableAsset;$/;"	m	class:android::AssetManager::SharedZip
mResources	include/utils/AssetManager.h	/^    mutable ResTable* mResources;$/;"	m	class:android::AssetManager
mResponseIndex	include/utils/Looper.h	/^    size_t mResponseIndex;$/;"	m	class:android::Looper
mResponses	include/utils/Looper.h	/^    Vector<Response> mResponses;$/;"	m	class:android::Looper
mResume	include/utils/Looper.h	/^    Condition mResume;  \/\/ guarded by mLock$/;"	m	class:android::Looper
mRetain	utils/RefBase.cpp	/^    bool mRetain;$/;"	m	class:android::RefBase::weakref_impl	file:
mRootCode	include/utils/ResourceTypes.h	/^    event_code_t                mRootCode;$/;"	m	class:android::ResXMLTree
mRootExt	include/utils/ResourceTypes.h	/^    const void*                 mRootExt;$/;"	m	class:android::ResXMLTree
mRootNode	include/utils/ResourceTypes.h	/^    const ResXMLTree_node*      mRootNode;$/;"	m	class:android::ResXMLTree
mRunning	include/utils/threads.h	/^    volatile bool           mRunning;$/;"	m	class:android::Thread
mSalt	include/utils/ObbFile.h	/^    unsigned char mSalt[8];$/;"	m	class:android::ObbFile
mSalted	include/utils/ObbFile.h	/^    bool mSalted;$/;"	m	class:android::ObbFile
mSampledPolls	include/utils/Looper.h	/^    int mSampledPolls;$/;"	m	class:android::Looper
mSampledTimeoutPollCount	include/utils/Looper.h	/^    int mSampledTimeoutPollCount;$/;"	m	class:android::Looper
mSampledTimeoutPollLatencySum	include/utils/Looper.h	/^    int mSampledTimeoutPollLatencySum;$/;"	m	class:android::Looper
mSampledWakeCountSum	include/utils/Looper.h	/^    int mSampledWakeCountSum;$/;"	m	class:android::Looper
mSampledWakeCycles	include/utils/Looper.h	/^    int mSampledWakeCycles;$/;"	m	class:android::Looper
mSampledWakeLatencySum	include/utils/Looper.h	/^    nsecs_t mSampledWakeLatencySum;$/;"	m	class:android::Looper
mSampledZeroPollCount	include/utils/Looper.h	/^    int mSampledZeroPollCount;$/;"	m	class:android::Looper
mSampledZeroPollLatencySum	include/utils/Looper.h	/^    int mSampledZeroPollLatencySum;$/;"	m	class:android::Looper
mSendingMessage	include/utils/Looper.h	/^    bool mSendingMessage; \/\/ guarded by mLock$/;"	m	class:android::Looper
mSeq	include/utils/BufferedTextOutput.h	/^    const int32_t       mSeq;$/;"	m	class:android::BufferedTextOutput
mSingleLineCutoff	include/utils/TextOutput.h	/^    int32_t mSingleLineCutoff;$/;"	m	class:android::HexDump
mSize	include/utils/BlobCache.h	/^        size_t mSize;$/;"	m	class:android::BlobCache::Blob
mSize	include/utils/ResourceTypes.h	/^    size_t                      mSize;$/;"	m	class:android::ResStringPool
mSize	include/utils/ResourceTypes.h	/^    size_t                      mSize;$/;"	m	class:android::ResXMLTree
mSize	include/utils/SharedBuffer.h	/^                size_t         mSize;$/;"	m	class:android::SharedBuffer
mSize	include/utils/TextOutput.h	/^    size_t mSize;$/;"	m	class:android::HexDump
mSourceName	include/utils/AssetDir.h	/^        String8    mSourceName;    \/\/ currently debug-only$/;"	m	class:android::AssetDir::FileInfo
mStack	include/utils/CallStack.h	/^    const void* mStack[MAX_DEPTH];$/;"	m	class:android::CallStack
mStart	include/utils/Asset.h	/^    off64_t     mStart;         \/\/ absolute file offset of start of chunk$/;"	m	class:android::_FileAsset
mStart	include/utils/Asset.h	/^    off64_t     mStart;         \/\/ offset to start of compressed data$/;"	m	class:android::_CompressedAsset
mStartTime	include/utils/StopWatch.h	/^    nsecs_t         mStartTime;$/;"	m	class:android::StopWatch
mStartWhen	include/utils/Timers.h	/^    struct timeval  mStartWhen;$/;"	m	class:android::DurationTimer	typeref:struct:android::DurationTimer::timeval
mState	include/utils/threads.h	/^    void*   mState;$/;"	m	class:android::Condition
mState	include/utils/threads.h	/^    void*   mState;$/;"	m	class:android::Mutex
mStatus	include/utils/threads.h	/^            status_t        mStatus;$/;"	m	class:android::Thread
mStopWhen	include/utils/Timers.h	/^    struct timeval  mStopWhen;$/;"	m	class:android::DurationTimer	typeref:struct:android::DurationTimer::timeval
mStorage	include/utils/VectorImpl.h	/^            void *      mStorage;   \/\/ base address of the vector$/;"	m	class:android::VectorImpl
mStreamNeedsInit	include/utils/StreamingZipInflater.h	/^    bool mStreamNeedsInit;$/;"	m	class:android::StreamingZipInflater
mString	include/utils/String16.h	/^            const char16_t*     mString;$/;"	m	class:android::String16
mString	include/utils/String8.h	/^            const char* mString;$/;"	m	class:android::String8
mStringPoolSize	include/utils/ResourceTypes.h	/^    uint32_t                    mStringPoolSize;    \/\/ number of uint16_t$/;"	m	class:android::ResStringPool
mStrings	include/utils/ResourceTypes.h	/^    ResStringPool               mStrings;$/;"	m	class:android::ResXMLTree
mStrings	include/utils/ResourceTypes.h	/^    const void*                 mStrings;$/;"	m	class:android::ResStringPool
mStrong	utils/RefBase.cpp	/^    volatile int32_t    mStrong;$/;"	m	class:android::RefBase::weakref_impl	file:
mStrongRefs	utils/RefBase.cpp	/^    ref_entry* mStrongRefs;$/;"	m	class:android::RefBase::weakref_impl	file:
mStylePoolSize	include/utils/ResourceTypes.h	/^    uint32_t                    mStylePoolSize;    \/\/ number of uint32_t$/;"	m	class:android::ResStringPool
mStyles	include/utils/ResourceTypes.h	/^    const uint32_t*             mStyles;$/;"	m	class:android::ResStringPool
mTO	include/utils/TextOutput.h	/^        TextOutput&     mTO;$/;"	m	class:android::TextOutput::Bundle
mTable	include/utils/ResourceTypes.h	/^        const ResTable& mTable;$/;"	m	class:android::ResTable::Theme
mThread	include/utils/threads.h	/^            thread_id_t     mThread;$/;"	m	class:android::Thread
mThreadExitedCondition	include/utils/threads.h	/^            Condition       mThreadExitedCondition;$/;"	m	class:android::Thread
mTid	include/utils/threads.h	/^            int             mTid;$/;"	m	class:android::Thread
mTokenizer	include/utils/PropertyMap.h	/^        Tokenizer* mTokenizer;$/;"	m	class:android::PropertyMap::Parser
mTotalSize	include/utils/BlobCache.h	/^    size_t mTotalSize;$/;"	m	class:android::BlobCache
mTrackEnabled	utils/RefBase.cpp	/^    bool mTrackEnabled;$/;"	m	class:android::RefBase::weakref_impl	file:
mTree	include/utils/ResourceTypes.h	/^    const ResXMLTree&           mTree;$/;"	m	class:android::ResXMLParser
mUncompressedLen	include/utils/Asset.h	/^    off64_t     mUncompressedLen; \/\/ length of the uncompressed data$/;"	m	class:android::_CompressedAsset
mVal	include/utils/List.h	/^        T           mVal;$/;"	m	class:android::List::_Node
mValue	include/utils/BlobCache.h	/^        sp<Blob> mValue;$/;"	m	class:android::BlobCache::CacheEntry
mVector	include/utils/KeyedVector.h	/^            SortedVector< key_value_pair_t<KEY, VALUE> >    mVector;$/;"	m	class:android::KeyedVector
mVendor	include/utils/AssetManager.h	/^    char*           mVendor;$/;"	m	class:android::AssetManager
mVersion	include/utils/ObbFile.h	/^    int32_t mVersion;$/;"	m	class:android::ObbFile
mWaiters	include/utils/Looper.h	/^    uint32_t mWaiters;  \/\/ guarded by mLock$/;"	m	class:android::Looper
mWakeReadPipeFd	include/utils/Looper.h	/^    int mWakeReadPipeFd;  \/\/ immutable$/;"	m	class:android::Looper
mWakeWritePipeFd	include/utils/Looper.h	/^    int mWakeWritePipeFd; \/\/ immutable$/;"	m	class:android::Looper
mWeak	utils/RefBase.cpp	/^    volatile int32_t    mWeak;$/;"	m	class:android::RefBase::weakref_impl	file:
mWeakRefs	utils/RefBase.cpp	/^    ref_entry* mWeakRefs;$/;"	m	class:android::RefBase::weakref_impl	file:
mYoungest	include/utils/GenerationCache.h	/^    sp<Entry<K, V> > mYoungest;$/;"	m	class:android::GenerationCache
mZipFile	include/utils/AssetManager.h	/^        ZipFileRO* mZipFile;$/;"	m	class:android::AssetManager::SharedZip
mZipFile	include/utils/AssetManager.h	/^        mutable Vector<sp<SharedZip> > mZipFile;$/;"	m	class:android::AssetManager::ZipSet
mZipInflater	include/utils/Asset.h	/^    class StreamingZipInflater* mZipInflater;  \/\/ for streaming large compressed assets$/;"	m	class:android::_CompressedAsset	typeref:class:android::_CompressedAsset::StreamingZipInflater
mZipPath	include/utils/AssetManager.h	/^        mutable Vector<String8> mZipPath;$/;"	m	class:android::AssetManager::ZipSet
mZipSet	include/utils/AssetManager.h	/^    ZipSet          mZipSet;$/;"	m	class:android::AssetManager
m_buf	include/utils/BackupHelpers.h	/^    void* m_buf;$/;"	m	class:android::RestoreHelperBase
m_dataEndPos	include/utils/BackupHelpers.h	/^    ssize_t m_dataEndPos;$/;"	m	class:android::BackupDataReader
m_done	include/utils/BackupHelpers.h	/^    bool m_done;$/;"	m	class:android::BackupDataReader
m_entityCount	include/utils/BackupHelpers.h	/^    int m_entityCount;$/;"	m	class:android::BackupDataReader
m_entityCount	include/utils/BackupHelpers.h	/^    int m_entityCount;$/;"	m	class:android::BackupDataWriter
m_fd	include/utils/BackupHelpers.h	/^    int m_fd;$/;"	m	class:android::BackupDataReader
m_fd	include/utils/BackupHelpers.h	/^    int m_fd;$/;"	m	class:android::BackupDataWriter
m_files	include/utils/BackupHelpers.h	/^    KeyedVector<String8,FileRec> m_files;$/;"	m	class:android::RestoreHelperBase
m_header	include/utils/BackupHelpers.h	/^    } m_header;$/;"	m	class:android::BackupDataReader	typeref:union:android::BackupDataReader::__anon32
m_key	include/utils/BackupHelpers.h	/^    String8 m_key;$/;"	m	class:android::BackupDataReader
m_keyPrefix	include/utils/BackupHelpers.h	/^    String8 m_keyPrefix;$/;"	m	class:android::BackupDataWriter
m_loggedUnknownMetadata	include/utils/BackupHelpers.h	/^    bool m_loggedUnknownMetadata;$/;"	m	class:android::RestoreHelperBase
m_pos	include/utils/BackupHelpers.h	/^    ssize_t m_pos;$/;"	m	class:android::BackupDataReader
m_pos	include/utils/BackupHelpers.h	/^    ssize_t m_pos;$/;"	m	class:android::BackupDataWriter
m_status	include/utils/BackupHelpers.h	/^    status_t m_status;$/;"	m	class:android::BackupDataReader
m_status	include/utils/BackupHelpers.h	/^    status_t m_status;$/;"	m	class:android::BackupDataWriter
magic0	include/utils/BackupHelpers.h	/^    int magic0;$/;"	m	struct:android::SnapshotHeader
magic1	include/utils/BackupHelpers.h	/^    int magic1;$/;"	m	struct:android::SnapshotHeader
makeLower	utils/String16.cpp	/^status_t String16::makeLower()$/;"	f	class:android::String16
makehexdigit	utils/Debug.cpp	/^static inline char makehexdigit(uint32_t val)$/;"	f	namespace:android
makeupperhexdigit	utils/Debug.cpp	/^static inline char makeupperhexdigit(uint32_t val)$/;"	f	namespace:android
map	include/utils/ResourceTypes.h	/^        ResTable_map map;$/;"	m	struct:android::ResTable::bag_entry
mapAddressToName	utils/CallStack.cpp	/^    static const char *mapAddressToName(const void* pc, const char* def,$/;"	f	class:android::MapInfo
mapCentralDirectory	utils/ZipFileRO.cpp	/^bool ZipFileRO::mapCentralDirectory(void)$/;"	f	class:ZipFileRO
map_to_name	utils/CallStack.cpp	/^    const char *map_to_name(uint64_t pc, const char* def, uint64_t* start) {$/;"	f	class:android::MapInfo	file:
mapinfo	utils/CallStack.cpp	/^    struct mapinfo {$/;"	s	class:android::MapInfo	file:
markBit	include/utils/BitSet.h	/^    inline void markBit(uint32_t n) { value |= valueForBit(n); }$/;"	f	struct:android::BitSet32
markFirstUnmarkedBit	include/utils/BitSet.h	/^    inline uint32_t markFirstUnmarkedBit() {$/;"	f	struct:android::BitSet32
match	include/utils/ResourceTypes.h	/^    inline bool match(const ResTable_config& settings) const {$/;"	f	struct:android::ResTable_config
max	utils/VectorImpl.cpp	/^static inline size_t max(size_t a, size_t b) {$/;"	f	namespace:android
mcc	include/utils/ResourceTypes.h	/^            uint16_t mcc;$/;"	m	struct:android::ResTable_config::__anon41::__anon42
merge	include/utils/SortedVector.h	/^ssize_t SortedVector<TYPE>::merge(const SortedVector<TYPE>& vector) {$/;"	f	class:android::SortedVector
merge	include/utils/SortedVector.h	/^ssize_t SortedVector<TYPE>::merge(const Vector<TYPE>& vector) {$/;"	f	class:android::SortedVector
merge	utils/VectorImpl.cpp	/^ssize_t SortedVectorImpl::merge(const SortedVectorImpl& vector)$/;"	f	class:android::SortedVectorImpl
merge	utils/VectorImpl.cpp	/^ssize_t SortedVectorImpl::merge(const VectorImpl& vector)$/;"	f	class:android::SortedVectorImpl
mergeInfoLocked	utils/AssetManager.cpp	/^void AssetManager::mergeInfoLocked(SortedVector<AssetDir::FileInfo>* pMergedInfo,$/;"	f	class:AssetManager
message	include/utils/Looper.h	/^        Message message;$/;"	m	struct:android::Looper::MessageEnvelope
messages	utils/tests/Looper_test.cpp	/^    Vector<Message> messages;$/;"	m	class:android::StubMessageHandler	file:
microseconds	include/utils/Timers.h	/^static inline nsecs_t microseconds(nsecs_t v) { return us2ns(v); }$/;"	f
microseconds_to_nanoseconds	include/utils/Timers.h	/^static inline nsecs_t microseconds_to_nanoseconds(nsecs_t secs)$/;"	f
milist	utils/CallStack.cpp	/^    mapinfo*    milist;$/;"	m	class:android::MapInfo	file:
milliseconds	include/utils/Timers.h	/^static inline nsecs_t milliseconds(nsecs_t v) { return ms2ns(v); }$/;"	f
milliseconds_to_nanoseconds	include/utils/Timers.h	/^static inline nsecs_t milliseconds_to_nanoseconds(nsecs_t secs)$/;"	f
min_of	utils/StreamingZipInflater.cpp	/^static inline size_t min_of(size_t a, size_t b) { return (a < b) ? a : b; }$/;"	f	file:
minorVersion	include/utils/ResourceTypes.h	/^            uint16_t minorVersion;$/;"	m	struct:android::ResTable_config::__anon62::__anon63
mirrorItemAt	include/utils/SortedVector.h	/^const TYPE& SortedVector<TYPE>::mirrorItemAt(ssize_t index) const {$/;"	f	class:android::SortedVector
mirrorItemAt	include/utils/Vector.h	/^const TYPE& Vector<TYPE>::mirrorItemAt(ssize_t index) const {$/;"	f	class:android::Vector
mnc	include/utils/ResourceTypes.h	/^            uint16_t mnc;$/;"	m	struct:android::ResTable_config::__anon41::__anon42
modTime_nsec	include/utils/BackupHelpers.h	/^    int modTime_nsec;$/;"	m	struct:android::FileState
modTime_sec	include/utils/BackupHelpers.h	/^    int modTime_sec;$/;"	m	struct:android::FileState
mode	include/utils/BackupHelpers.h	/^    int mode;$/;"	m	struct:android::FileState
mode	utils/BackupHelpers.cpp	/^    int mode;$/;"	m	struct:android::file_metadata_v1	file:
module_tags	utils/tests/Android.mk	/^module_tags := eng tests$/;"	m
moveIndent	utils/BufferedTextOutput.cpp	/^void BufferedTextOutput::moveIndent(int delta)$/;"	f	class:android::BufferedTextOutput
moveReferences	include/utils/RefBase.h	/^    inline static void moveReferences(void* d, void const* s, size_t n,$/;"	f	class:android::LightRefBase
moveReferences	utils/RefBase.cpp	/^void RefBase::moveReferences(void* dst, void const* src, size_t n,$/;"	f	class:android::RefBase
move_backward_type	include/utils/TypeHelpers.h	/^void move_backward_type(TYPE* d, const TYPE* s, size_t n = 1) {$/;"	f	namespace:android
move_forward_type	include/utils/TypeHelpers.h	/^void move_forward_type(TYPE* d, const TYPE* s, size_t n = 1) {$/;"	f	namespace:android
mpMiddle	include/utils/List.h	/^    _Node*      mpMiddle;$/;"	m	class:android::List
mpNext	include/utils/List.h	/^        _Node*      mpNext;$/;"	m	class:android::List::_Node
mpNode	include/utils/List.h	/^        _NodePtr mpNode;    \/* should be private, but older gcc fails *\/$/;"	m	class:android::List::_ListIterator
mpPrev	include/utils/List.h	/^        _Node*      mpPrev;$/;"	m	class:android::List::_Node
ms2ns	include/utils/Timers.h	/^static inline nsecs_t ms2ns(nsecs_t v) {return milliseconds_to_nanoseconds(v);}$/;"	f
name	include/utils/ResourceTypes.h	/^        const char16_t* name;$/;"	m	struct:android::ResTable::resource_name
name	include/utils/ResourceTypes.h	/^    ResStringPool_ref name;$/;"	m	struct:android::ResStringPool_span
name	include/utils/ResourceTypes.h	/^    ResTable_ref name;$/;"	m	struct:android::ResTable_map
name	include/utils/ResourceTypes.h	/^    char16_t name[128];$/;"	m	struct:android::ResTable_package
name	include/utils/ResourceTypes.h	/^    struct ResStringPool_ref name;$/;"	m	struct:android::ResXMLTree_attrExt	typeref:struct:android::ResXMLTree_attrExt::ResStringPool_ref
name	include/utils/ResourceTypes.h	/^    struct ResStringPool_ref name;$/;"	m	struct:android::ResXMLTree_attribute	typeref:struct:android::ResXMLTree_attribute::ResStringPool_ref
name	include/utils/ResourceTypes.h	/^    struct ResStringPool_ref name;$/;"	m	struct:android::ResXMLTree_endElementExt	typeref:struct:android::ResXMLTree_endElementExt::ResStringPool_ref
name	include/utils/ZipFileRO.h	/^        const char*     name;$/;"	m	struct:android::ZipFileRO::HashEntry
name	utils/CallStack.cpp	/^        char name[];$/;"	m	struct:android::MapInfo::mapinfo	file:
name	utils/ResourceTypes.cpp	/^    String16 const                  name;$/;"	m	struct:android::ResTable::PackageGroup	file:
name	utils/ResourceTypes.cpp	/^    char16_t name[6];$/;"	m	struct:android::id_name_map	file:
name	utils/ResourceTypes.cpp	/^    const char* name;$/;"	m	struct:android::unit_entry	file:
name	utils/StopWatch.cpp	/^const char* StopWatch::name() const$/;"	f	class:android::StopWatch
nameLen	include/utils/BackupHelpers.h	/^    int nameLen;$/;"	m	struct:android::FileState
nameLen	include/utils/ResourceTypes.h	/^        size_t nameLen;$/;"	m	struct:android::ResTable::resource_name
nameLen	include/utils/ZipFileRO.h	/^        unsigned short  nameLen;$/;"	m	struct:android::ZipFileRO::HashEntry
nanoseconds_to_microseconds	include/utils/Timers.h	/^static inline nsecs_t nanoseconds_to_microseconds(nsecs_t secs)$/;"	f
nanoseconds_to_milliseconds	include/utils/Timers.h	/^static inline nsecs_t nanoseconds_to_milliseconds(nsecs_t secs)$/;"	f
nanoseconds_to_seconds	include/utils/Timers.h	/^static inline nsecs_t nanoseconds_to_seconds(nsecs_t secs)$/;"	f
navigation	include/utils/ResourceTypes.h	/^            uint8_t navigation;$/;"	m	struct:android::ResTable_config::__anon54::__anon55
next	utils/CallStack.cpp	/^        struct mapinfo *next;$/;"	m	struct:android::MapInfo::mapinfo	typeref:struct:android::MapInfo::mapinfo::mapinfo	file:
next	utils/RefBase.cpp	/^        ref_entry* next;$/;"	m	struct:android::RefBase::weakref_impl::ref_entry	file:
next	utils/ResourceTypes.cpp	/^ResXMLParser::event_code_t ResXMLParser::next()$/;"	f	class:android::ResXMLParser
nextAssetPath	utils/AssetManager.cpp	/^void* AssetManager::nextAssetPath(void* cookie) const$/;"	f	class:AssetManager
nextChar	include/utils/Tokenizer.h	/^    inline char nextChar() { return isEof() ? '\\0' : *(mCurrent++); }$/;"	f	class:android::Tokenizer
nextLine	utils/Tokenizer.cpp	/^void Tokenizer::nextLine() {$/;"	f	class:android::Tokenizer
nextNode	utils/ResourceTypes.cpp	/^ResXMLParser::event_code_t ResXMLParser::nextNode()$/;"	f	class:android::ResXMLParser
nextResult	utils/tests/Looper_test.cpp	/^    int nextResult;$/;"	m	class:android::StubCallbackHandler	file:
nextToken	utils/Tokenizer.cpp	/^String8 Tokenizer::nextToken(const char* delimiters) {$/;"	f	class:android::Tokenizer
nhtol	utils/ResourceTypes.cpp	50;"	d	file:
nhtol	utils/Unicode.cpp	22;"	d	file:
nhtos	utils/Unicode.cpp	24;"	d	file:
normalizeForOutput	utils/ResourceTypes.cpp	/^String8 ResTable::normalizeForOutput( const char *input )$/;"	f	class:android::ResTable
ns	include/utils/ResourceTypes.h	/^    struct ResStringPool_ref ns;$/;"	m	struct:android::ResXMLTree_attrExt	typeref:struct:android::ResXMLTree_attrExt::ResStringPool_ref
ns	include/utils/ResourceTypes.h	/^    struct ResStringPool_ref ns;$/;"	m	struct:android::ResXMLTree_attribute	typeref:struct:android::ResXMLTree_attribute::ResStringPool_ref
ns	include/utils/ResourceTypes.h	/^    struct ResStringPool_ref ns;$/;"	m	struct:android::ResXMLTree_endElementExt	typeref:struct:android::ResXMLTree_endElementExt::ResStringPool_ref
ns2ms	include/utils/Timers.h	/^static inline nsecs_t ns2ms(nsecs_t v) {return nanoseconds_to_milliseconds(v);}$/;"	f
ns2s	include/utils/Timers.h	/^static inline nsecs_t ns2s(nsecs_t v)  {return nanoseconds_to_seconds(v);}$/;"	f
ns2us	include/utils/Timers.h	/^static inline nsecs_t ns2us(nsecs_t v) {return nanoseconds_to_microseconds(v);}$/;"	f
nsecs_t	include/utils/Timers.h	/^typedef int64_t nsecs_t;       \/\/ nano-seconds$/;"	t
ntohl	utils/ResourceTypes.cpp	54;"	d	file:
ntohl	utils/Unicode.cpp	28;"	d	file:
ntohl	utils/Unicode.cpp	33;"	d	file:
ntohs	utils/ResourceTypes.cpp	56;"	d	file:
ntohs	utils/Unicode.cpp	30;"	d	file:
ntohs	utils/Unicode.cpp	35;"	d	file:
numAttrs	utils/ResourceTypes.cpp	/^    size_t numAttrs;    \/\/ number in array$/;"	m	struct:android::ResTable::bag_set	file:
numColors	include/utils/ResourceTypes.h	/^    int8_t numColors;$/;"	m	struct:android::Res_png_9patch
numEntries	include/utils/ResourceTypes.h	/^            size_t numEntries;$/;"	m	struct:android::ResTable::Theme::type_info
numTypes	include/utils/ResourceTypes.h	/^            size_t numTypes;$/;"	m	struct:android::ResTable::Theme::package_info
numXDivs	include/utils/ResourceTypes.h	/^    int8_t numXDivs;$/;"	m	struct:android::Res_png_9patch
numYDivs	include/utils/ResourceTypes.h	/^    int8_t numYDivs;$/;"	m	struct:android::Res_png_9patch
off64_t	include/utils/Compat.h	/^typedef off_t off64_t;$/;"	t
onFirstRef	utils/RefBase.cpp	/^void RefBase::onFirstRef()$/;"	f	class:android::RefBase
onIncStrongAttempted	utils/RefBase.cpp	/^bool RefBase::onIncStrongAttempted(uint32_t flags, const void* id)$/;"	f	class:android::RefBase
onLastStrongRef	utils/RefBase.cpp	/^void RefBase::onLastStrongRef(const void* \/*id*\/)$/;"	f	class:android::RefBase
onLastWeakRef	utils/RefBase.cpp	/^void RefBase::onLastWeakRef(const void* \/*id*\/)$/;"	f	class:android::RefBase
onTransact	demo/MemoryHeap/IMemTest.cpp	/^status_t BnMemTest::onTransact($/;"	f	class:android::BnMemTest
onlyOwner	include/utils/SharedBuffer.h	/^bool SharedBuffer::onlyOwner() const {$/;"	f	class:android::SharedBuffer
open	utils/AssetManager.cpp	/^Asset* AssetManager::open(const char* fileName, AccessMode mode)$/;"	f	class:AssetManager
open	utils/Tokenizer.cpp	/^status_t Tokenizer::open(const String8& filename, Tokenizer** outTokenizer) {$/;"	f	class:android::Tokenizer
open	utils/ZipFileRO.cpp	/^status_t ZipFileRO::open(const char* zipFileName)$/;"	f	class:ZipFileRO
openAssetFromFileLocked	utils/AssetManager.cpp	/^Asset* AssetManager::openAssetFromFileLocked(const String8& pathName,$/;"	f	class:AssetManager
openAssetFromZipLocked	utils/AssetManager.cpp	/^Asset* AssetManager::openAssetFromZipLocked(const ZipFileRO* pZipFile,$/;"	f	class:AssetManager
openChunk	utils/Asset.cpp	/^status_t _CompressedAsset::openChunk(FileMap* dataMap, int compressionMethod,$/;"	f	class:_CompressedAsset
openChunk	utils/Asset.cpp	/^status_t _CompressedAsset::openChunk(int fd, off64_t offset,$/;"	f	class:_CompressedAsset
openChunk	utils/Asset.cpp	/^status_t _FileAsset::openChunk(FileMap* dataMap)$/;"	f	class:_FileAsset
openChunk	utils/Asset.cpp	/^status_t _FileAsset::openChunk(const char* fileName, int fd, off64_t offset, size_t length)$/;"	f	class:_FileAsset
openDir	utils/AssetManager.cpp	/^AssetDir* AssetManager::openDir(const char* dirName)$/;"	f	class:AssetManager
openFileDescriptor	include/utils/Asset.h	/^    virtual int openFileDescriptor(off64_t* outStart, off64_t* outLength) const { return -1; }$/;"	f	class:android::_CompressedAsset
openFileDescriptor	utils/Asset.cpp	/^int _FileAsset::openFileDescriptor(off64_t* outStart, off64_t* outLength) const$/;"	f	class:_FileAsset
openIdmapLocked	utils/AssetManager.cpp	/^Asset* AssetManager::openIdmapLocked(const struct asset_path& ap) const$/;"	f	class:AssetManager
openInLocaleVendorLocked	utils/AssetManager.cpp	/^Asset* AssetManager::openInLocaleVendorLocked(const char* fileName, AccessMode mode,$/;"	f	class:AssetManager
openInPathLocked	utils/AssetManager.cpp	/^Asset* AssetManager::openInPathLocked(const char* fileName, AccessMode mode,$/;"	f	class:AssetManager
openNonAsset	utils/AssetManager.cpp	/^Asset* AssetManager::openNonAsset(const char* fileName, AccessMode mode)$/;"	f	class:AssetManager
openNonAsset	utils/AssetManager.cpp	/^Asset* AssetManager::openNonAsset(void* cookie, const char* fileName, AccessMode mode)$/;"	f	class:AssetManager
openNonAssetDir	utils/AssetManager.cpp	/^AssetDir* AssetManager::openNonAssetDir(void* cookie, const char* dirName)$/;"	f	class:AssetManager
openNonAssetInPathLocked	utils/AssetManager.cpp	/^Asset* AssetManager::openNonAssetInPathLocked(const char* fileName, AccessMode mode,$/;"	f	class:AssetManager
operator !=	include/utils/BitSet.h	/^    inline bool operator!= (const BitSet32& other) const { return value != other.value; }$/;"	f	struct:android::BitSet32
operator !=	include/utils/List.h	/^        inline bool operator!=(const OTHER& right) const { $/;"	f	class:android::List::_ListIterator
operator !=	include/utils/List.h	/^        inline bool operator!=(const _Iter& right) const { $/;"	f	class:android::List::_ListIterator
operator !=	include/utils/String16.h	/^inline bool String16::operator!=(const String16& other) const$/;"	f	class:android::String16
operator !=	include/utils/String16.h	/^inline bool String16::operator!=(const char16_t* other) const$/;"	f	class:android::String16
operator !=	include/utils/String8.h	/^inline bool String8::operator!=(const String8& other) const$/;"	f	class:android::String8
operator !=	include/utils/String8.h	/^inline bool String8::operator!=(const char* other) const$/;"	f	class:android::String8
operator !=	utils/CallStack.cpp	/^bool CallStack::operator != (const CallStack& rhs) const {$/;"	f	class:android::CallStack
operator ()	include/utils/Functor.h	/^    virtual status_t operator ()(int what, void* data) { return NO_ERROR; }$/;"	f	class:android::Functor
operator *	include/utils/List.h	/^        _Type& operator*() const { return mpNode->getRef(); }$/;"	f	class:android::List::_ListIterator
operator *	include/utils/StrongPointer.h	/^    inline  T&      operator* () const  { return *m_ptr; }$/;"	f	class:android::sp
operator +	include/utils/String16.h	/^inline String16 String16::operator+(const String16& other) const$/;"	f	class:android::String16
operator +	include/utils/String8.h	/^inline String8 String8::operator+(const String8& other) const$/;"	f	class:android::String8
operator +	include/utils/String8.h	/^inline String8 String8::operator+(const char* other) const$/;"	f	class:android::String8
operator ++	include/utils/List.h	/^        const _Iter operator++(int) {    \/\/ post-increment$/;"	f	class:android::List::_ListIterator
operator ++	include/utils/List.h	/^        inline _Iter& operator++() {     \/\/ pre-increment$/;"	f	class:android::List::_ListIterator
operator +=	include/utils/String16.h	/^inline String16& String16::operator+=(const String16& other)$/;"	f	class:android::String16
operator +=	include/utils/String8.h	/^inline String8& String8::operator+=(const String8& other)$/;"	f	class:android::String8
operator +=	include/utils/String8.h	/^inline String8& String8::operator+=(const char* other)$/;"	f	class:android::String8
operator --	include/utils/List.h	/^        const _Iter operator--(int) {   \/\/ post-increment$/;"	f	class:android::List::_ListIterator
operator --	include/utils/List.h	/^        inline _Iter& operator--() {     \/\/ pre-increment$/;"	f	class:android::List::_ListIterator
operator ->	include/utils/List.h	/^        _Type* operator->() const { return &(mpNode->getRef()); }$/;"	f	class:android::List::_ListIterator
operator ->	include/utils/StrongPointer.h	/^    inline  T*      operator-> () const { return m_ptr;  }$/;"	f	class:android::sp
operator <	include/utils/AssetDir.h	/^        bool operator< (const FileInfo& rhs) const {$/;"	f	class:android::AssetDir::FileInfo
operator <	include/utils/String16.h	/^inline bool String16::operator<(const String16& other) const$/;"	f	class:android::String16
operator <	include/utils/String16.h	/^inline bool String16::operator<(const char16_t* other) const$/;"	f	class:android::String16
operator <	include/utils/String8.h	/^inline bool String8::operator<(const String8& other) const$/;"	f	class:android::String8
operator <	include/utils/String8.h	/^inline bool String8::operator<(const char* other) const$/;"	f	class:android::String8
operator <	include/utils/TypeHelpers.h	/^    inline bool operator < (const key_value_pair_t& o) const {$/;"	f	struct:android::key_value_pair_t
operator <	utils/BlobCache.cpp	/^bool BlobCache::Blob::operator<(const Blob& rhs) const {$/;"	f	class:android::BlobCache::Blob
operator <	utils/BlobCache.cpp	/^bool BlobCache::CacheEntry::operator<(const CacheEntry& rhs) const {$/;"	f	class:android::BlobCache::CacheEntry
operator <	utils/CallStack.cpp	/^bool CallStack::operator < (const CallStack& rhs) const {$/;"	f	class:android::CallStack
operator <<	include/utils/StrongPointer.h	/^inline TextOutput& operator<<(TextOutput& to, const sp<T>& val)$/;"	f	namespace:android
operator <<	include/utils/TextOutput.h	/^inline TextOutput& operator<<(TextOutput& to, TextOutputManipFunc func)$/;"	f	namespace:android
operator <<	include/utils/TextOutput.h	/^inline TextOutput& operator<<(TextOutput& to, char c)$/;"	f	namespace:android
operator <<	include/utils/TextOutput.h	/^inline TextOutput& operator<<(TextOutput& to, const char* str)$/;"	f	namespace:android
operator <<	utils/String16.cpp	/^TextOutput& operator<<(TextOutput& to, const String16& val)$/;"	f	namespace:android
operator <<	utils/String8.cpp	/^TextOutput& operator<<(TextOutput& to, const String8& val)$/;"	f	namespace:android
operator <<	utils/TextOutput.cpp	/^TextOutput& operator<<(TextOutput& to, bool val)$/;"	f	namespace:android
operator <<	utils/TextOutput.cpp	/^TextOutput& operator<<(TextOutput& to, const HexDump& val)$/;"	f	namespace:android
operator <<	utils/TextOutput.cpp	/^TextOutput& operator<<(TextOutput& to, const TypeCode& val)$/;"	f	namespace:android
operator <<	utils/TextOutput.cpp	/^TextOutput& operator<<(TextOutput& to, const void* val)$/;"	f	namespace:android
operator <<	utils/TextOutput.cpp	/^TextOutput& operator<<(TextOutput& to, double val)$/;"	f	namespace:android
operator <<	utils/TextOutput.cpp	/^TextOutput& operator<<(TextOutput& to, float val)$/;"	f	namespace:android
operator <<	utils/TextOutput.cpp	/^TextOutput& operator<<(TextOutput& to, int val)$/;"	f	namespace:android
operator <<	utils/TextOutput.cpp	/^TextOutput& operator<<(TextOutput& to, long long val)$/;"	f	namespace:android
operator <<	utils/TextOutput.cpp	/^TextOutput& operator<<(TextOutput& to, long val)$/;"	f	namespace:android
operator <<	utils/TextOutput.cpp	/^TextOutput& operator<<(TextOutput& to, unsigned int val)$/;"	f	namespace:android
operator <<	utils/TextOutput.cpp	/^TextOutput& operator<<(TextOutput& to, unsigned long long val)$/;"	f	namespace:android
operator <<	utils/TextOutput.cpp	/^TextOutput& operator<<(TextOutput& to, unsigned long val)$/;"	f	namespace:android
operator <=	include/utils/String16.h	/^inline bool String16::operator<=(const String16& other) const$/;"	f	class:android::String16
operator <=	include/utils/String16.h	/^inline bool String16::operator<=(const char16_t* other) const$/;"	f	class:android::String16
operator <=	include/utils/String8.h	/^inline bool String8::operator<=(const String8& other) const$/;"	f	class:android::String8
operator <=	include/utils/String8.h	/^inline bool String8::operator<=(const char* other) const$/;"	f	class:android::String8
operator <=	utils/CallStack.cpp	/^bool CallStack::operator <= (const CallStack& rhs) const {$/;"	f	class:android::CallStack
operator =	include/utils/AssetDir.h	/^        const FileInfo& operator= (const FileInfo& src) {$/;"	f	class:android::AssetDir::FileInfo
operator =	include/utils/List.h	/^List<T>& List<T>::operator=(const List<T>& right)$/;"	f	class:android::List
operator =	include/utils/SortedVector.h	/^SortedVector<TYPE>& SortedVector<TYPE>::operator = (const SortedVector<TYPE>& rhs) {$/;"	f	class:android::SortedVector
operator =	include/utils/SortedVector.h	/^const SortedVector<TYPE>& SortedVector<TYPE>::operator = (const SortedVector<TYPE>& rhs) const {$/;"	f	class:android::SortedVector
operator =	include/utils/String16.h	/^inline String16& String16::operator=(const String16& other)$/;"	f	class:android::String16
operator =	include/utils/String8.h	/^inline String8& String8::operator=(const String8& other)$/;"	f	class:android::String8
operator =	include/utils/String8.h	/^inline String8& String8::operator=(const char* other)$/;"	f	class:android::String8
operator =	include/utils/StrongPointer.h	/^sp<T>& sp<T>::operator = (T* other)$/;"	f	class:android::sp
operator =	include/utils/StrongPointer.h	/^sp<T>& sp<T>::operator = (U* other)$/;"	f	class:android::sp
operator =	include/utils/StrongPointer.h	/^sp<T>& sp<T>::operator = (const sp<T>& other) {$/;"	f	class:android::sp
operator =	include/utils/StrongPointer.h	/^sp<T>& sp<T>::operator = (const sp<U>& other)$/;"	f	class:android::sp
operator =	include/utils/Vector.h	/^Vector<TYPE>& Vector<TYPE>::operator = (const SortedVector<TYPE>& rhs) {$/;"	f	class:android::Vector
operator =	include/utils/Vector.h	/^Vector<TYPE>& Vector<TYPE>::operator = (const Vector<TYPE>& rhs) {$/;"	f	class:android::Vector
operator =	include/utils/Vector.h	/^const Vector<TYPE>& Vector<TYPE>::operator = (const SortedVector<TYPE>& rhs) const {$/;"	f	class:android::Vector
operator =	include/utils/Vector.h	/^const Vector<TYPE>& Vector<TYPE>::operator = (const Vector<TYPE>& rhs) const {$/;"	f	class:android::Vector
operator =	utils/BlobCache.cpp	/^const BlobCache::CacheEntry& BlobCache::CacheEntry::operator=(const CacheEntry& rhs) {$/;"	f	class:android::BlobCache::CacheEntry
operator =	utils/CallStack.cpp	/^CallStack& CallStack::operator = (const CallStack& rhs)$/;"	f	class:android::CallStack
operator =	utils/VectorImpl.cpp	/^SortedVectorImpl& SortedVectorImpl::operator = (const SortedVectorImpl& rhs)$/;"	f	class:android::SortedVectorImpl
operator =	utils/VectorImpl.cpp	/^VectorImpl& VectorImpl::operator = (const VectorImpl& rhs)$/;"	f	class:android::VectorImpl
operator ==	include/utils/AssetDir.h	/^        bool operator== (const FileInfo& rhs) const {$/;"	f	class:android::AssetDir::FileInfo
operator ==	include/utils/BitSet.h	/^    inline bool operator== (const BitSet32& other) const { return value == other.value; }$/;"	f	struct:android::BitSet32
operator ==	include/utils/List.h	/^        inline bool operator==(const OTHER& right) const { $/;"	f	class:android::List::_ListIterator
operator ==	include/utils/List.h	/^        inline bool operator==(const _Iter& right) const { $/;"	f	class:android::List::_ListIterator
operator ==	include/utils/String16.h	/^inline bool String16::operator==(const String16& other) const$/;"	f	class:android::String16
operator ==	include/utils/String16.h	/^inline bool String16::operator==(const char16_t* other) const$/;"	f	class:android::String16
operator ==	include/utils/String8.h	/^inline bool String8::operator==(const String8& other) const$/;"	f	class:android::String8
operator ==	include/utils/String8.h	/^inline bool String8::operator==(const char* other) const$/;"	f	class:android::String8
operator ==	utils/CallStack.cpp	/^bool CallStack::operator == (const CallStack& rhs) const {$/;"	f	class:android::CallStack
operator >	include/utils/String16.h	/^inline bool String16::operator>(const String16& other) const$/;"	f	class:android::String16
operator >	include/utils/String16.h	/^inline bool String16::operator>(const char16_t* other) const$/;"	f	class:android::String16
operator >	include/utils/String8.h	/^inline bool String8::operator>(const String8& other) const$/;"	f	class:android::String8
operator >	include/utils/String8.h	/^inline bool String8::operator>(const char* other) const$/;"	f	class:android::String8
operator >	utils/CallStack.cpp	/^bool CallStack::operator > (const CallStack& rhs) const {$/;"	f	class:android::CallStack
operator >=	include/utils/String16.h	/^inline bool String16::operator>=(const String16& other) const$/;"	f	class:android::String16
operator >=	include/utils/String16.h	/^inline bool String16::operator>=(const char16_t* other) const$/;"	f	class:android::String16
operator >=	include/utils/String8.h	/^inline bool String8::operator>=(const String8& other) const$/;"	f	class:android::String8
operator >=	include/utils/String8.h	/^inline bool String8::operator>=(const char* other) const$/;"	f	class:android::String8
operator >=	utils/CallStack.cpp	/^bool CallStack::operator >= (const CallStack& rhs) const {$/;"	f	class:android::CallStack
operator []	include/utils/SortedVector.h	/^const TYPE& SortedVector<TYPE>::operator[](size_t index) const {$/;"	f	class:android::SortedVector
operator []	include/utils/Vector.h	/^const TYPE& Vector<TYPE>::operator[](size_t index) const {$/;"	f	class:android::Vector
operator []	utils/CallStack.cpp	/^const void* CallStack::operator [] (int index) const {$/;"	f	class:android::CallStack
operator const char*	include/utils/String8.h	/^inline String8::operator const char*() const$/;"	f	class:android::String8
operator const char16_t*	include/utils/String16.h	/^inline String16::operator const char16_t*() const$/;"	f	class:android::String16
orderOf	include/utils/SortedVector.h	/^size_t SortedVector<TYPE>::orderOf(const TYPE& item) const {$/;"	f	class:android::SortedVector
orderOf	utils/VectorImpl.cpp	/^size_t SortedVectorImpl::orderOf(const void* item) const$/;"	f	class:android::SortedVectorImpl
orientation	include/utils/ResourceTypes.h	/^            uint8_t orientation;$/;"	m	struct:android::ResTable_config::__anon48::__anon49
ownedData	utils/ResourceTypes.cpp	/^    void*                           ownedData;$/;"	m	struct:android::ResTable::Header	file:
owner	utils/ResourceTypes.cpp	/^    ResTable* const                 owner;$/;"	m	struct:android::ResTable::Header	file:
owner	utils/ResourceTypes.cpp	/^    ResTable* const                 owner;$/;"	m	struct:android::ResTable::Package	file:
owner	utils/ResourceTypes.cpp	/^    ResTable* const                 owner;$/;"	m	struct:android::ResTable::PackageGroup	file:
package	include/utils/ResourceTypes.h	/^        const char16_t* package;$/;"	m	struct:android::ResTable::resource_name
package	utils/ResourceTypes.cpp	/^    const Package* const            package;$/;"	m	struct:android::ResTable::Type	file:
package	utils/ResourceTypes.cpp	/^    const ResTable_package* const   package;$/;"	m	struct:android::ResTable::Package	file:
packageCount	include/utils/ResourceTypes.h	/^    uint32_t packageCount;$/;"	m	struct:android::ResTable_header
packageLen	include/utils/ResourceTypes.h	/^        size_t packageLen;$/;"	m	struct:android::ResTable::resource_name
package_info	include/utils/ResourceTypes.h	/^        struct package_info {$/;"	s	class:android::ResTable::Theme
packages	utils/ResourceTypes.cpp	/^    Vector<Package*>                packages;$/;"	m	struct:android::ResTable::PackageGroup	file:
paddingBottom	include/utils/ResourceTypes.h	/^    int32_t paddingTop, paddingBottom;$/;"	m	struct:android::Res_png_9patch
paddingLeft	include/utils/ResourceTypes.h	/^    int32_t paddingLeft, paddingRight;$/;"	m	struct:android::Res_png_9patch
paddingRight	include/utils/ResourceTypes.h	/^    int32_t paddingLeft, paddingRight;$/;"	m	struct:android::Res_png_9patch
paddingTop	include/utils/ResourceTypes.h	/^    int32_t paddingTop, paddingBottom;$/;"	m	struct:android::Res_png_9patch
padding_extra	utils/BackupData.cpp	/^padding_extra(size_t n)$/;"	f	namespace:android
parent	include/utils/GenerationCache.h	/^    sp<Entry<EntryKey, EntryValue> > parent;$/;"	m	struct:android::Entry
parent	include/utils/ResourceTypes.h	/^    ResTable_ref parent;$/;"	m	struct:android::ResTable_map_entry
parse	utils/PropertyMap.cpp	/^status_t PropertyMap::Parser::parse() {$/;"	f	class:android::PropertyMap::Parser
parseObbFile	utils/ObbFile.cpp	/^bool ObbFile::parseObbFile(int fd)$/;"	f	class:android::ObbFile
parsePackage	utils/ResourceTypes.cpp	/^status_t ResTable::parsePackage(const ResTable_package* const pkg,$/;"	f	class:android::ResTable
parseZipArchive	utils/ZipFileRO.cpp	/^bool ZipFileRO::parseZipArchive(void)$/;"	f	class:ZipFileRO
parse_maps_line	utils/CallStack.cpp	/^    mapinfo *parse_maps_line(char *line) {$/;"	f	class:android::MapInfo	file:
parse_unit	utils/ResourceTypes.cpp	/^static bool parse_unit(const char* str, Res_value* outValue,$/;"	f	namespace:android
path	include/utils/AssetManager.h	/^        String8 path;$/;"	m	struct:android::AssetManager::asset_path
peekChar	include/utils/Tokenizer.h	/^    inline char peekChar() const { return isEof() ? '\\0' : *mCurrent; }$/;"	f	class:android::Tokenizer
peekRemainderOfLine	utils/Tokenizer.cpp	/^String8 Tokenizer::peekRemainderOfLine() const {$/;"	f	class:android::Tokenizer
pollAll	include/utils/Looper.h	/^    inline int pollAll(int timeoutMillis) {$/;"	f	class:android::Looper
pollAll	utils/Looper.cpp	/^int Looper::pollAll(int timeoutMillis, int* outFd, int* outEvents, void** outData) {$/;"	f	class:android::Looper
pollInner	utils/Looper.cpp	/^int Looper::pollInner(int timeoutMillis) {$/;"	f	class:android::Looper
pollOnce	include/utils/Looper.h	/^    inline int pollOnce(int timeoutMillis) {$/;"	f	class:android::Looper
pollOnce	utils/Looper.cpp	/^int Looper::pollOnce(int timeoutMillis, int* outFd, int* outEvents, void** outData) {$/;"	f	class:android::Looper
pop	include/utils/Vector.h	/^void Vector<TYPE>::pop() {$/;"	f	class:android::Vector
pop	utils/VectorImpl.cpp	/^void VectorImpl::pop()$/;"	f	class:android::VectorImpl
popBundle	utils/BufferedTextOutput.cpp	/^void BufferedTextOutput::popBundle()$/;"	f	class:android::BufferedTextOutput
pread64	include/utils/Compat.h	/^static inline ssize_t pread64(int fd, void* buf, size_t nbytes, off64_t offset) {$/;"	f
prefix	include/utils/ResourceTypes.h	/^    struct ResStringPool_ref prefix;$/;"	m	struct:android::ResXMLTree_namespaceExt	typeref:struct:android::ResXMLTree_namespaceExt::ResStringPool_ref
prep	include/utils/List.h	/^    void prep() {$/;"	f	class:android::List
prepare	utils/Looper.cpp	/^sp<Looper> Looper::prepare(int opts) {$/;"	f	class:android::Looper
print	utils/BufferedTextOutput.cpp	/^status_t BufferedTextOutput::print(const char* txt, size_t len)$/;"	f	class:android::BufferedTextOutput
print	utils/ResourceTypes.cpp	/^void ResTable::print(bool inclValues) const$/;"	f	class:android::ResTable
printHexData	utils/Debug.cpp	/^void printHexData(int32_t indent, const void *buf, size_t length,$/;"	f	namespace:android
printRefs	include/utils/RefBase.h	/^    inline  void            printRefs() const { getWeakRefs()->printRefs(); }$/;"	f	class:android::RefBase
printRefs	utils/RefBase.cpp	/^    void printRefs() const { }$/;"	f	class:android::RefBase::weakref_impl
printRefs	utils/RefBase.cpp	/^    void printRefs() const$/;"	f	class:android::RefBase::weakref_impl
printRefs	utils/RefBase.cpp	/^void RefBase::weakref_type::printRefs() const$/;"	f	class:android::RefBase::weakref_type
printRefsLocked	utils/RefBase.cpp	/^    void printRefsLocked(String8* out, const ref_entry* refs) const$/;"	f	class:android::RefBase::weakref_impl	file:
printStrongPointer	utils/RefBase.cpp	/^TextOutput& printStrongPointer(TextOutput& to, const void* val)$/;"	f	namespace:android
printToLogFunc	utils/ResourceTypes.cpp	/^static void printToLogFunc(void* cookie, const char* txt)$/;"	f	namespace:android
printTypeCode	utils/Debug.cpp	/^void printTypeCode(uint32_t typeCode, debugPrintFunc func, void* cookie)$/;"	f	namespace:android
printWeakPointer	utils/RefBase.cpp	/^TextOutput& printWeakPointer(TextOutput& to, const void* val)$/;"	f	namespace:android
print_complex	utils/ResourceTypes.cpp	/^void print_complex(uint32_t complex, bool isFraction)$/;"	f	namespace:android
print_float	utils/TextOutput.cpp	/^static TextOutput& print_float(TextOutput& to, double value)$/;"	f	namespace:android
print_value	utils/ResourceTypes.cpp	/^void ResTable::print_value(const Package* pkg, const Res_value& value) const$/;"	f	class:android::ResTable
priority	utils/Threads.cpp	/^    int             priority;$/;"	m	struct:thread_data_t	file:
priv_info	demo/MemoryHeap/IMemTest.h	/^struct priv_info {$/;"	s	namespace:android
purge	include/utils/AssetManager.h	/^    void purge(void) { purgeFileNameCacheLocked(); }$/;"	f	class:android::AssetManager
purgeFileNameCacheLocked	utils/AssetManager.cpp	/^void AssetManager::purgeFileNameCacheLocked(void)$/;"	f	class:AssetManager
push	include/utils/Vector.h	/^void Vector<TYPE>::push() {$/;"	f	class:android::Vector
push	include/utils/Vector.h	/^void Vector<TYPE>::push(const TYPE& item) {$/;"	f	class:android::Vector
push	utils/VectorImpl.cpp	/^void VectorImpl::push()$/;"	f	class:android::VectorImpl
push	utils/VectorImpl.cpp	/^void VectorImpl::push(const void* item)$/;"	f	class:android::VectorImpl
pushBundle	utils/BufferedTextOutput.cpp	/^void BufferedTextOutput::pushBundle()$/;"	f	class:android::BufferedTextOutput
pushResponse	utils/Looper.cpp	/^void Looper::pushResponse(int events, const Request& request) {$/;"	f	class:android::Looper
push_back	include/utils/List.h	/^    void push_back(const T& val) { insert(end(), val); }$/;"	f	class:android::List
push_back	include/utils/Vector.h	/^     inline void push_back(const TYPE& item)  { insertAt(item, size()); }$/;"	f	class:android::Vector
push_back	utils/StringArray.cpp	/^bool StringArray::push_back(const char* str) {$/;"	f	class:android::StringArray
push_front	include/utils/List.h	/^    void push_front(const T& val) { insert(begin(), val); }$/;"	f	class:android::List
push_front	include/utils/Vector.h	/^     inline void push_front(const TYPE& item) { insertAt(item, 0); }$/;"	f	class:android::Vector
put	include/utils/GenerationCache.h	/^bool GenerationCache<K, V>::put(K key, V value) {$/;"	f	class:android::GenerationCache
put4LE	include/utils/ObbFile.h	/^    static inline void put4LE(unsigned char* buf, uint32_t val) {$/;"	f	class:android::ObbFile
rawValue	include/utils/ResourceTypes.h	/^    struct ResStringPool_ref rawValue;$/;"	m	struct:android::ResXMLTree_attribute	typeref:struct:android::ResXMLTree_attribute::ResStringPool_ref
read	utils/Asset.cpp	/^ssize_t _CompressedAsset::read(void* buf, size_t count)$/;"	f	class:_CompressedAsset
read	utils/Asset.cpp	/^ssize_t _FileAsset::read(void* buf, size_t count)$/;"	f	class:_FileAsset
read	utils/StreamingZipInflater.cpp	/^ssize_t StreamingZipInflater::read(void* outBuf, size_t count) {$/;"	f	class:StreamingZipInflater
readFrom	utils/ObbFile.cpp	/^bool ObbFile::readFrom(const char* filename)$/;"	f	class:android::ObbFile
readFrom	utils/ObbFile.cpp	/^bool ObbFile::readFrom(int fd)$/;"	f	class:android::ObbFile
readLock	include/utils/threads.h	/^inline status_t RWLock::readLock() {$/;"	f	class:android::RWLock
readNextChunk	utils/StreamingZipInflater.cpp	/^int StreamingZipInflater::readNextChunk() {$/;"	f	class:StreamingZipInflater
readSignal	utils/tests/TestHelpers.h	/^    status_t readSignal() {$/;"	f	class:android::Pipe
read_snapshot_file	utils/BackupHelpers.cpp	/^read_snapshot_file(int fd, KeyedVector<String8,FileState>* snapshot)$/;"	f	namespace:android
readyToRun	utils/Threads.cpp	/^status_t Thread::readyToRun()$/;"	f	class:android::Thread
real_append	utils/String8.cpp	/^status_t String8::real_append(const char* other, size_t otherLen)$/;"	f	class:android::String8
receiveFd	utils/tests/TestHelpers.h	/^    int receiveFd;$/;"	m	class:android::Pipe
reduce	utils/LinearTransform.cpp	/^template <class T> void LinearTransform::reduce(T* N, T* D) {$/;"	f	class:android::LinearTransform
reduce	utils/LinearTransform.cpp	/^void LinearTransform::reduce(int32_t* N, uint32_t* D) {$/;"	f	class:android::LinearTransform
ref	utils/RefBase.cpp	/^        int32_t ref;$/;"	m	struct:android::RefBase::weakref_impl::ref_entry	file:
refBase	utils/RefBase.cpp	/^RefBase* RefBase::weakref_type::refBase() const$/;"	f	class:android::RefBase::weakref_type
ref_entry	utils/RefBase.cpp	/^    struct ref_entry$/;"	s	class:android::RefBase::weakref_impl	file:
release	include/utils/FileMap.h	/^    void release(void) {$/;"	f	class:android::FileMap
release	utils/SharedBuffer.cpp	/^int32_t SharedBuffer::release(uint32_t flags) const$/;"	f	class:android::SharedBuffer
release_storage	utils/VectorImpl.cpp	/^void VectorImpl::release_storage()$/;"	f	class:android::VectorImpl
remove	include/utils/GenerationCache.h	/^V GenerationCache<K, V>::remove(K key) {$/;"	f	class:android::GenerationCache
remove	include/utils/SortedVector.h	/^ssize_t SortedVector<TYPE>::remove(const TYPE& item) {$/;"	f	class:android::SortedVector
remove	utils/String16.cpp	/^status_t String16::remove(size_t len, size_t begin)$/;"	f	class:android::String16
remove	utils/VectorImpl.cpp	/^ssize_t SortedVectorImpl::remove(const void* item)$/;"	f	class:android::SortedVectorImpl
removeAt	include/utils/GenerationCache.h	/^V GenerationCache<K, V>::removeAt(ssize_t index) {$/;"	f	class:android::GenerationCache
removeAt	include/utils/SortedVector.h	/^    inline  ssize_t         removeAt(size_t index)  { return removeItemsAt(index); }$/;"	f	class:android::SortedVector
removeAt	include/utils/Vector.h	/^    inline  ssize_t         removeAt(size_t index)  { return removeItemsAt(index); }$/;"	f	class:android::Vector
removeFd	utils/Looper.cpp	/^int Looper::removeFd(int fd) {$/;"	f	class:android::Looper
removeFrom	utils/ObbFile.cpp	/^bool ObbFile::removeFrom(const char* filename)$/;"	f	class:android::ObbFile
removeFrom	utils/ObbFile.cpp	/^bool ObbFile::removeFrom(int fd)$/;"	f	class:android::ObbFile
removeItem	include/utils/KeyedVector.h	/^ssize_t KeyedVector<KEY,VALUE>::removeItem(const KEY& key) {$/;"	f	class:android::KeyedVector
removeItemsAt	include/utils/KeyedVector.h	/^ssize_t KeyedVector<KEY, VALUE>::removeItemsAt(size_t index, size_t count) {$/;"	f	class:android::KeyedVector
removeItemsAt	include/utils/SortedVector.h	/^ssize_t SortedVector<TYPE>::removeItemsAt(size_t index, size_t count) {$/;"	f	class:android::SortedVector
removeItemsAt	include/utils/Vector.h	/^ssize_t Vector<TYPE>::removeItemsAt(size_t index, size_t count) {$/;"	f	class:android::Vector
removeItemsAt	utils/VectorImpl.cpp	/^ssize_t VectorImpl::removeItemsAt(size_t index, size_t count)$/;"	f	class:android::VectorImpl
removeMessages	utils/Looper.cpp	/^void Looper::removeMessages(const sp<MessageHandler>& handler) {$/;"	f	class:android::Looper
removeMessages	utils/Looper.cpp	/^void Looper::removeMessages(const sp<MessageHandler>& handler, int what) {$/;"	f	class:android::Looper
removeOldest	include/utils/GenerationCache.h	/^V GenerationCache<K, V>::removeOldest() {$/;"	f	class:android::GenerationCache
removeRef	utils/RefBase.cpp	/^    void removeRef(ref_entry** refs, const void* id)$/;"	f	class:android::RefBase::weakref_impl	file:
removeStrongRef	utils/RefBase.cpp	/^    void removeStrongRef(const void* \/*id*\/) { }$/;"	f	class:android::RefBase::weakref_impl
removeStrongRef	utils/RefBase.cpp	/^    void removeStrongRef(const void* id) {$/;"	f	class:android::RefBase::weakref_impl
removeWeakRef	utils/RefBase.cpp	/^    void removeWeakRef(const void* \/*id*\/) { }$/;"	f	class:android::RefBase::weakref_impl
removeWeakRef	utils/RefBase.cpp	/^    void removeWeakRef(const void* id) {$/;"	f	class:android::RefBase::weakref_impl
renameRefsId	utils/RefBase.cpp	/^    void renameRefsId(ref_entry* r, const void* old_id, const void* new_id)$/;"	f	class:android::RefBase::weakref_impl	file:
renameStrongRefId	utils/RefBase.cpp	/^    void renameStrongRefId(const void* \/*old_id*\/, const void* \/*new_id*\/) { }$/;"	f	class:android::RefBase::weakref_impl
renameStrongRefId	utils/RefBase.cpp	/^    void renameStrongRefId(const void* old_id, const void* new_id) {$/;"	f	class:android::RefBase::weakref_impl
renameWeakRefId	utils/RefBase.cpp	/^    void renameWeakRefId(const void* \/*old_id*\/, const void* \/*new_id*\/) { }$/;"	f	class:android::RefBase::weakref_impl
renameWeakRefId	utils/RefBase.cpp	/^    void renameWeakRefId(const void* old_id, const void* new_id) {$/;"	f	class:android::RefBase::weakref_impl
replaceAll	utils/String16.cpp	/^status_t String16::replaceAll(char16_t replaceThis, char16_t withThis)$/;"	f	class:android::String16
replaceAt	include/utils/Vector.h	/^ssize_t Vector<TYPE>::replaceAt(const TYPE& item, size_t index) {$/;"	f	class:android::Vector
replaceAt	include/utils/Vector.h	/^ssize_t Vector<TYPE>::replaceAt(size_t index) {$/;"	f	class:android::Vector
replaceAt	utils/VectorImpl.cpp	/^ssize_t VectorImpl::replaceAt(const void* prototype, size_t index)$/;"	f	class:android::VectorImpl
replaceAt	utils/VectorImpl.cpp	/^ssize_t VectorImpl::replaceAt(size_t index)$/;"	f	class:android::VectorImpl
replaceValueAt	include/utils/KeyedVector.h	/^ssize_t KeyedVector<KEY,VALUE>::replaceValueAt(size_t index, const VALUE& item) {$/;"	f	class:android::KeyedVector
replaceValueFor	include/utils/KeyedVector.h	/^ssize_t KeyedVector<KEY,VALUE>::replaceValueFor(const KEY& key, const VALUE& value) {$/;"	f	class:android::KeyedVector
request	include/utils/Looper.h	/^        Request request;$/;"	m	struct:android::Looper::Response
requestExit	utils/Threads.cpp	/^void Thread::requestExit()$/;"	f	class:android::Thread
requestExitAndWait	utils/Threads.cpp	/^status_t Thread::requestExitAndWait()$/;"	f	class:android::Thread
res0	include/utils/ResourceTypes.h	/^    uint8_t res0;$/;"	m	struct:android::ResTable_type
res0	include/utils/ResourceTypes.h	/^    uint8_t res0;$/;"	m	struct:android::ResTable_typeSpec
res0	include/utils/ResourceTypes.h	/^    uint8_t res0;$/;"	m	struct:android::Res_value
res1	include/utils/ResourceTypes.h	/^    uint16_t res1;$/;"	m	struct:android::ResTable_type
res1	include/utils/ResourceTypes.h	/^    uint16_t res1;$/;"	m	struct:android::ResTable_typeSpec
reserve	include/utils/Vector.h	/^     inline void reserve(size_t n) { setCapacity(n); }$/;"	f	class:android::Vector
reservedSortedVectorImpl1	utils/VectorImpl.cpp	/^void SortedVectorImpl::reservedSortedVectorImpl1() { };$/;"	f	class:android::SortedVectorImpl
reservedSortedVectorImpl2	utils/VectorImpl.cpp	/^void SortedVectorImpl::reservedSortedVectorImpl2() { };$/;"	f	class:android::SortedVectorImpl
reservedSortedVectorImpl3	utils/VectorImpl.cpp	/^void SortedVectorImpl::reservedSortedVectorImpl3() { };$/;"	f	class:android::SortedVectorImpl
reservedSortedVectorImpl4	utils/VectorImpl.cpp	/^void SortedVectorImpl::reservedSortedVectorImpl4() { };$/;"	f	class:android::SortedVectorImpl
reservedSortedVectorImpl5	utils/VectorImpl.cpp	/^void SortedVectorImpl::reservedSortedVectorImpl5() { };$/;"	f	class:android::SortedVectorImpl
reservedSortedVectorImpl6	utils/VectorImpl.cpp	/^void SortedVectorImpl::reservedSortedVectorImpl6() { };$/;"	f	class:android::SortedVectorImpl
reservedSortedVectorImpl7	utils/VectorImpl.cpp	/^void SortedVectorImpl::reservedSortedVectorImpl7() { };$/;"	f	class:android::SortedVectorImpl
reservedSortedVectorImpl8	utils/VectorImpl.cpp	/^void SortedVectorImpl::reservedSortedVectorImpl8() { };$/;"	f	class:android::SortedVectorImpl
reservedVectorImpl1	utils/VectorImpl.cpp	/^void VectorImpl::reservedVectorImpl1() { }$/;"	f	class:android::VectorImpl
reservedVectorImpl2	utils/VectorImpl.cpp	/^void VectorImpl::reservedVectorImpl2() { }$/;"	f	class:android::VectorImpl
reservedVectorImpl3	utils/VectorImpl.cpp	/^void VectorImpl::reservedVectorImpl3() { }$/;"	f	class:android::VectorImpl
reservedVectorImpl4	utils/VectorImpl.cpp	/^void VectorImpl::reservedVectorImpl4() { }$/;"	f	class:android::VectorImpl
reservedVectorImpl5	utils/VectorImpl.cpp	/^void VectorImpl::reservedVectorImpl5() { }$/;"	f	class:android::VectorImpl
reservedVectorImpl6	utils/VectorImpl.cpp	/^void VectorImpl::reservedVectorImpl6() { }$/;"	f	class:android::VectorImpl
reservedVectorImpl7	utils/VectorImpl.cpp	/^void VectorImpl::reservedVectorImpl7() { }$/;"	f	class:android::VectorImpl
reservedVectorImpl8	utils/VectorImpl.cpp	/^void VectorImpl::reservedVectorImpl8() { }$/;"	f	class:android::VectorImpl
reset	utils/SharedBuffer.cpp	/^SharedBuffer* SharedBuffer::reset(size_t new_size) const$/;"	f	class:android::SharedBuffer
reset	utils/StopWatch.cpp	/^void StopWatch::reset()$/;"	f	class:android::StopWatch
resolveAttributeReference	utils/ResourceTypes.cpp	/^ssize_t ResTable::Theme::resolveAttributeReference(Res_value* inOutValue,$/;"	f	class:android::ResTable::Theme
resolveReference	utils/ResourceTypes.cpp	/^ssize_t ResTable::resolveReference(Res_value* value, ssize_t blockIndex,$/;"	f	class:android::ResTable
resourceIDMap	utils/ResourceTypes.cpp	/^    uint32_t*                       resourceIDMap;$/;"	m	struct:android::ResTable::Header	file:
resourceIDMapSize	utils/ResourceTypes.cpp	/^    size_t                          resourceIDMapSize;$/;"	m	struct:android::ResTable::Header	file:
resource_name	include/utils/ResourceTypes.h	/^    struct resource_name$/;"	s	class:android::ResTable
restart	utils/BufferedTextOutput.cpp	/^    void restart() {$/;"	f	struct:android::BufferedTextOutput::BufferState
restart	utils/ResourceTypes.cpp	/^void ResXMLParser::restart()$/;"	f	class:android::ResXMLParser
roundUpPower2	utils/misc.cpp	/^unsigned int roundUpPower2(unsigned int val)$/;"	f	namespace:android
round_up	utils/BackupData.cpp	/^round_up(size_t n)$/;"	f	namespace:android
round_up	utils/BackupHelpers.cpp	/^round_up(int n)$/;"	f	namespace:android
run	utils/Threads.cpp	/^status_t Thread::run(const char* name, int32_t priority, size_t stack)$/;"	f	class:android::Thread
s	include/utils/BackupHelpers.h	/^    FileState s;$/;"	m	struct:android::FileRec
s2ns	include/utils/Timers.h	/^static inline nsecs_t s2ns(nsecs_t v)  {return seconds_to_nanoseconds(v);}$/;"	f
sInstance	include/utils/Singleton.h	/^    static TYPE* sInstance;$/;"	m	class:android::Singleton
sLock	include/utils/Singleton.h	/^    static Mutex sLock;$/;"	m	class:android::Singleton
sMapInfo	utils/CallStack.cpp	/^    static MapInfo sMapInfo;$/;"	m	class:android::MapInfo	file:
sMapInfo	utils/CallStack.cpp	/^MapInfo MapInfo::sMapInfo;$/;"	m	class:android::MapInfo	file:
scale	utils/ResourceTypes.cpp	/^    float scale;$/;"	m	struct:android::unit_entry	file:
scale_u64_to_u64	utils/LinearTransform.cpp	/^static bool scale_u64_to_u64($/;"	f	namespace:android
scanAndMergeDirLocked	utils/AssetManager.cpp	/^bool AssetManager::scanAndMergeDirLocked(SortedVector<AssetDir::FileInfo>* pMergedInfo,$/;"	f	class:AssetManager
scanAndMergeZipLocked	utils/AssetManager.cpp	/^bool AssetManager::scanAndMergeZipLocked(SortedVector<AssetDir::FileInfo>* pMergedInfo,$/;"	f	class:AssetManager
scanDirLocked	utils/AssetManager.cpp	/^SortedVector<AssetDir::FileInfo>* AssetManager::scanDirLocked(const String8& path)$/;"	f	class:AssetManager
screenConfig	include/utils/ResourceTypes.h	/^        uint32_t screenConfig;$/;"	m	union:android::ResTable_config::__anon66
screenHeight	include/utils/ResourceTypes.h	/^            uint16_t screenHeight;$/;"	m	struct:android::ResTable_config::__anon58::__anon59
screenHeightDp	include/utils/ResourceTypes.h	/^            uint16_t screenHeightDp;$/;"	m	struct:android::ResTable_config::__anon68::__anon69
screenLayout	include/utils/ResourceTypes.h	/^            uint8_t screenLayout;$/;"	m	struct:android::ResTable_config::__anon66::__anon67
screenSize	include/utils/ResourceTypes.h	/^        uint32_t screenSize;$/;"	m	union:android::ResTable_config::__anon58
screenSizeDp	include/utils/ResourceTypes.h	/^        uint32_t screenSizeDp;$/;"	m	union:android::ResTable_config::__anon68
screenType	include/utils/ResourceTypes.h	/^        uint32_t screenType;$/;"	m	union:android::ResTable_config::__anon48
screenWidth	include/utils/ResourceTypes.h	/^            uint16_t screenWidth;$/;"	m	struct:android::ResTable_config::__anon58::__anon59
screenWidthDp	include/utils/ResourceTypes.h	/^            uint16_t screenWidthDp;$/;"	m	struct:android::ResTable_config::__anon68::__anon69
sdkVersion	include/utils/ResourceTypes.h	/^            uint16_t sdkVersion;$/;"	m	struct:android::ResTable_config::__anon62::__anon63
seconds	include/utils/Timers.h	/^static inline nsecs_t seconds(nsecs_t v)      { return s2ns(v); }$/;"	f
seconds_to_nanoseconds	include/utils/Timers.h	/^static inline nsecs_t seconds_to_nanoseconds(nsecs_t secs)$/;"	f
seek	utils/Asset.cpp	/^off64_t _CompressedAsset::seek(off64_t offset, int whence)$/;"	f	class:_CompressedAsset
seek	utils/Asset.cpp	/^off64_t _FileAsset::seek(off64_t offset, int whence)$/;"	f	class:_FileAsset
seekAbsolute	utils/StreamingZipInflater.cpp	/^off64_t StreamingZipInflater::seekAbsolute(off64_t absoluteInputPosition) {$/;"	f	class:StreamingZipInflater
sendFd	utils/tests/TestHelpers.h	/^    int sendFd;$/;"	m	class:android::Pipe
sendMessage	utils/Looper.cpp	/^void Looper::sendMessage(const sp<MessageHandler>& handler, const Message& message) {$/;"	f	class:android::Looper
sendMessageAtTime	utils/Looper.cpp	/^void Looper::sendMessageAtTime(nsecs_t uptime, const sp<MessageHandler>& handler,$/;"	f	class:android::Looper
sendMessageDelayed	utils/Looper.cpp	/^void Looper::sendMessageDelayed(nsecs_t uptimeDelay, const sp<MessageHandler>& handler,$/;"	f	class:android::Looper
send_tarfile_chunk	utils/BackupHelpers.cpp	/^void send_tarfile_chunk(BackupDataWriter* writer, const char* buffer, size_t size) {$/;"	f	namespace:android
seq	utils/BufferedTextOutput.cpp	/^    const int32_t seq;$/;"	m	struct:android::BufferedTextOutput::BufferState	file:
serialize	utils/ResourceTypes.cpp	/^void Res_png_9patch::serialize(void * outData)$/;"	f	class:android::Res_png_9patch
serialize	utils/ResourceTypes.cpp	/^void* Res_png_9patch::serialize()$/;"	f	class:android::Res_png_9patch
serializedSize	utils/ResourceTypes.cpp	/^size_t Res_png_9patch::serializedSize()$/;"	f	class:android::Res_png_9patch
set	include/utils/AssetDir.h	/^        void set(const String8& path, FileType type) {$/;"	f	class:android::AssetDir::FileInfo
set	utils/BlobCache.cpp	/^void BlobCache::set(const void* key, size_t keySize, const void* value,$/;"	f	class:android::BlobCache
setAlignment	include/utils/TextOutput.h	/^inline HexDump& HexDump::setAlignment(size_t alignment) {$/;"	f	class:android::HexDump
setAssetSource	include/utils/Asset.h	/^    void setAssetSource(const String8& path) { mAssetSource = path; }$/;"	f	class:android::Asset
setBytesPerLine	include/utils/TextOutput.h	/^inline HexDump& HexDump::setBytesPerLine(size_t bytesPerLine) {$/;"	f	class:android::HexDump
setCArrayStyle	include/utils/TextOutput.h	/^inline HexDump& HexDump::setCArrayStyle(bool enabled) {$/;"	f	class:android::HexDump
setCallback	utils/tests/Looper_test.cpp	/^    void setCallback(const sp<Looper>& looper, int fd, int events) {$/;"	f	class:android::CallbackHandler
setCapacity	include/utils/KeyedVector.h	/^    inline ssize_t          setCapacity(size_t size)    { return mVector.setCapacity(size); }$/;"	f	class:android::KeyedVector
setCapacity	include/utils/SortedVector.h	/^    inline  ssize_t         setCapacity(size_t size)    { return VectorImpl::setCapacity(size); }$/;"	f	class:android::SortedVector
setCapacity	include/utils/Vector.h	/^    inline  ssize_t         setCapacity(size_t size)    { return VectorImpl::setCapacity(size); }$/;"	f	class:android::Vector
setCapacity	utils/VectorImpl.cpp	/^ssize_t VectorImpl::setCapacity(size_t new_capacity)$/;"	f	class:android::VectorImpl
setConfiguration	utils/AssetManager.cpp	/^void AssetManager::setConfiguration(const ResTable_config& config, const char* locale)$/;"	f	class:AssetManager
setCurrentTimeMillis	utils/SystemClock.cpp	/^int setCurrentTimeMillis(int64_t millis)$/;"	f	namespace:android
setEntry	utils/StringArray.cpp	/^void StringArray::setEntry(int idx, const char* str) {$/;"	f	class:android::StringArray
setFileList	include/utils/AssetDir.h	/^    void setFileList(SortedVector<FileInfo>* list) { mFileInfo = list; }$/;"	f	class:android::AssetDir
setFileName	include/utils/AssetDir.h	/^        void setFileName(const String8& path) { mFileName = path; }$/;"	f	class:android::AssetDir::FileInfo
setFileType	include/utils/AssetDir.h	/^        void setFileType(FileType type) { mFileType = type; }$/;"	f	class:android::AssetDir::FileInfo
setFlags	include/utils/ObbFile.h	/^    void setFlags(int32_t flags) {$/;"	f	class:android::ObbFile
setForThread	utils/Looper.cpp	/^void Looper::setForThread(const sp<Looper>& looper) {$/;"	f	class:android::Looper
setLocale	utils/AssetManager.cpp	/^void AssetManager::setLocale(const char* locale)$/;"	f	class:AssetManager
setLocaleLocked	utils/AssetManager.cpp	/^void AssetManager::setLocaleLocked(const char* locale)$/;"	f	class:AssetManager
setNext	include/utils/List.h	/^        inline void setNext(_Node* ptr) { mpNext = ptr; }$/;"	f	class:android::List::_Node
setOnEntryRemovedListener	include/utils/GenerationCache.h	/^void GenerationCache<K, V>::setOnEntryRemovedListener(OnEntryRemoved<K, V>* listener) {$/;"	f	class:android::GenerationCache
setOverlay	include/utils/ObbFile.h	/^    void setOverlay(bool overlay) {$/;"	f	class:android::ObbFile
setPackageName	include/utils/ObbFile.h	/^    void setPackageName(String8 packageName) {$/;"	f	class:android::ObbFile
setParameters	utils/ResourceTypes.cpp	/^void ResTable::setParameters(const ResTable_config* params)$/;"	f	class:android::ResTable
setPathName	utils/String8.cpp	/^void String8::setPathName(const char* name)$/;"	f	class:android::String8
setPathName	utils/String8.cpp	/^void String8::setPathName(const char* name, size_t len)$/;"	f	class:android::String8
setPosition	utils/ResourceTypes.cpp	/^void ResXMLParser::setPosition(const ResXMLParser::ResXMLPosition& pos)$/;"	f	class:android::ResXMLParser
setPrev	include/utils/List.h	/^        inline void setPrev(_Node* ptr) { mpPrev = ptr; }$/;"	f	class:android::List::_Node
setResourceTable	utils/AssetManager.cpp	/^ResTable* AssetManager::SharedZip::setResourceTable(ResTable* res)$/;"	f	class:AssetManager::SharedZip
setResourceTableAsset	utils/AssetManager.cpp	/^Asset* AssetManager::SharedZip::setResourceTableAsset(Asset* asset)$/;"	f	class:AssetManager::SharedZip
setSalt	include/utils/ObbFile.h	/^    bool setSalt(const unsigned char* salt, size_t length) {$/;"	f	class:android::ObbFile
setSingleLineCutoff	include/utils/TextOutput.h	/^inline HexDump& HexDump::setSingleLineCutoff(int32_t bytes) {$/;"	f	class:android::HexDump
setSourceName	include/utils/AssetDir.h	/^        void setSourceName(const String8& path) { mSourceName = path; }$/;"	f	class:android::AssetDir::FileInfo
setTo	utils/ResourceTypes.cpp	/^status_t ResStringPool::setTo(const void* data, size_t size, bool copyData)$/;"	f	class:android::ResStringPool
setTo	utils/ResourceTypes.cpp	/^status_t ResTable::Theme::setTo(const Theme& other)$/;"	f	class:android::ResTable::Theme
setTo	utils/ResourceTypes.cpp	/^status_t ResXMLTree::setTo(const void* data, size_t size, bool copyData)$/;"	f	class:android::ResXMLTree
setTo	utils/String16.cpp	/^status_t String16::setTo(const String16& other, size_t len, size_t begin)$/;"	f	class:android::String16
setTo	utils/String16.cpp	/^status_t String16::setTo(const char16_t* other)$/;"	f	class:android::String16
setTo	utils/String16.cpp	/^status_t String16::setTo(const char16_t* other, size_t len)$/;"	f	class:android::String16
setTo	utils/String16.cpp	/^void String16::setTo(const String16& other)$/;"	f	class:android::String16
setTo	utils/String8.cpp	/^status_t String8::setTo(const char* other)$/;"	f	class:android::String8
setTo	utils/String8.cpp	/^status_t String8::setTo(const char* other, size_t len)$/;"	f	class:android::String8
setTo	utils/String8.cpp	/^status_t String8::setTo(const char16_t* other, size_t len)$/;"	f	class:android::String8
setTo	utils/String8.cpp	/^status_t String8::setTo(const char32_t* other, size_t len)$/;"	f	class:android::String8
setTo	utils/String8.cpp	/^void String8::setTo(const String8& other)$/;"	f	class:android::String8
setVal	include/utils/List.h	/^        inline void setVal(const T& val) { mVal = val; }$/;"	f	class:android::List::_Node
setValue	utils/BlobCache.cpp	/^void BlobCache::CacheEntry::setValue(const sp<Blob>& value) {$/;"	f	class:android::BlobCache::CacheEntry
setVendor	utils/AssetManager.cpp	/^void AssetManager::setVendor(const char* vendor)$/;"	f	class:AssetManager
setVersion	include/utils/ObbFile.h	/^    void setVersion(int32_t version) {$/;"	f	class:android::ObbFile
setZipResourceTable	utils/AssetManager.cpp	/^ResTable* AssetManager::ZipSet::setZipResourceTable(const String8& path,$/;"	f	class:AssetManager::ZipSet
setZipResourceTableAsset	utils/AssetManager.cpp	/^Asset* AssetManager::ZipSet::setZipResourceTableAsset(const String8& path,$/;"	f	class:AssetManager::ZipSet
set_pointer	include/utils/StrongPointer.h	/^void sp<T>::set_pointer(T* ptr) {$/;"	f	class:android::sp
sharedBuffer	include/utils/SharedBuffer.h	/^const SharedBuffer* SharedBuffer::sharedBuffer(const void* data) {$/;"	f	class:android::SharedBuffer
sharedBuffer	include/utils/String16.h	/^inline const SharedBuffer* String16::sharedBuffer() const$/;"	f	class:android::String16
sharedBuffer	include/utils/String8.h	/^inline const SharedBuffer* String8::sharedBuffer() const$/;"	f	class:android::String8
shared_libraries	utils/tests/Android.mk	/^shared_libraries := \\$/;"	m
signal	include/utils/threads.h	/^inline void Condition::signal() {$/;"	f	class:android::Condition
singleLineCutoff	include/utils/TextOutput.h	/^inline int32_t HexDump::singleLineCutoff() const { return mSingleLineCutoff; }$/;"	f	class:android::HexDump
size	include/utils/BackupHelpers.h	/^    int size;$/;"	m	struct:android::FileState
size	include/utils/CallStack.h	/^    size_t size() const { return mCount; }$/;"	f	class:android::CallStack
size	include/utils/GenerationCache.h	/^uint32_t GenerationCache<K, V>::size() const {$/;"	f	class:android::GenerationCache
size	include/utils/KeyedVector.h	/^    inline  size_t          size() const                { return mVector.size(); }$/;"	f	class:android::KeyedVector
size	include/utils/List.h	/^    size_t size() const {$/;"	f	class:android::List
size	include/utils/ResourceTypes.h	/^    uint16_t size;$/;"	m	struct:android::ResTable_entry
size	include/utils/ResourceTypes.h	/^    uint16_t size;$/;"	m	struct:android::Res_value
size	include/utils/ResourceTypes.h	/^    uint32_t size;$/;"	m	struct:android::ResChunk_header
size	include/utils/ResourceTypes.h	/^    uint32_t size;$/;"	m	struct:android::ResTable_config
size	include/utils/SharedBuffer.h	/^size_t SharedBuffer::size() const {$/;"	f	class:android::SharedBuffer
size	include/utils/SortedVector.h	/^    inline  size_t          size() const                { return VectorImpl::size(); }$/;"	f	class:android::SortedVector
size	include/utils/String16.h	/^inline size_t String16::size() const$/;"	f	class:android::String16
size	include/utils/String8.h	/^inline size_t String8::size() const$/;"	f	class:android::String8
size	include/utils/StringArray.h	/^    inline int size(void) const { return mCurrent; }$/;"	f	class:android::StringArray
size	include/utils/TextOutput.h	/^inline size_t HexDump::size() const { return mSize; }$/;"	f	class:android::HexDump
size	include/utils/Vector.h	/^    inline  size_t          size() const                { return VectorImpl::size(); }$/;"	f	class:android::Vector
size	include/utils/VectorImpl.h	/^    inline  size_t          size() const        { return mCount; }$/;"	f	class:android::VectorImpl
size	utils/ResourceTypes.cpp	/^    size_t                          size;$/;"	m	struct:android::ResTable::Header	file:
size	utils/ResourceTypes.cpp	/^size_t ResStringPool::size() const$/;"	f	class:android::ResStringPool
sizeFromData	include/utils/SharedBuffer.h	/^size_t SharedBuffer::sizeFromData(const void* data)$/;"	f	class:android::SharedBuffer
skipDelimiters	utils/Tokenizer.cpp	/^void Tokenizer::skipDelimiters(const char* delimiters) {$/;"	f	class:android::Tokenizer
skip_padding	utils/BackupData.cpp	/^BackupDataReader::skip_padding()$/;"	f	class:android::BackupDataReader
smallestScreenWidthDp	include/utils/ResourceTypes.h	/^            uint16_t smallestScreenWidthDp;$/;"	m	struct:android::ResTable_config::__anon66::__anon67
soFar	include/utils/StopWatch.h	/^        nsecs_t     soFar;$/;"	m	struct:android::StopWatch::lap_t
sort	include/utils/Vector.h	/^status_t Vector<TYPE>::sort(Vector<TYPE>::compar_r_t cmp, void* state) {$/;"	f	class:android::Vector
sort	include/utils/Vector.h	/^status_t Vector<TYPE>::sort(Vector<TYPE>::compar_t cmp) {$/;"	f	class:android::Vector
sort	utils/StringArray.cpp	/^void StringArray::sort(int (*compare)(const void*, const void*)) {$/;"	f	class:android::StringArray
sort	utils/VectorImpl.cpp	/^status_t VectorImpl::sort(VectorImpl::compar_r_t cmp, void* state)$/;"	f	class:android::VectorImpl
sort	utils/VectorImpl.cpp	/^status_t VectorImpl::sort(VectorImpl::compar_t cmp)$/;"	f	class:android::VectorImpl
sortProxy	utils/VectorImpl.cpp	/^static int sortProxy(const void* lhs, const void* rhs, void* func)$/;"	f	namespace:android
sp	include/utils/StrongPointer.h	/^    inline sp() : m_ptr(0) { }$/;"	f	class:android::sp
sp	include/utils/StrongPointer.h	/^class sp$/;"	c	namespace:android
sp	include/utils/StrongPointer.h	/^sp<T>::sp(const sp<U>& other)$/;"	f	class:android::sp
splat_type	include/utils/TypeHelpers.h	/^void splat_type(TYPE* where, const TYPE* what, size_t n) {$/;"	f	namespace:android
stack	utils/RefBase.cpp	/^        CallStack stack;$/;"	m	struct:android::RefBase::weakref_impl::ref_entry	file:
stack_crawl_state_t	utils/CallStack.cpp	/^} stack_crawl_state_t;$/;"	t	namespace:android	typeref:struct:android::__anon4	file:
start	utils/CallStack.cpp	/^        uint64_t start;$/;"	m	struct:android::MapInfo::mapinfo	file:
start	utils/Timers.cpp	/^void DurationTimer::start(void)$/;"	f	class:DurationTimer
startsWith	utils/String16.cpp	/^bool String16::startsWith(const String16& prefix) const$/;"	f	class:android::String16
startsWith	utils/String16.cpp	/^bool String16::startsWith(const char16_t* prefix) const$/;"	f	class:android::String16
states	utils/BufferedTextOutput.cpp	/^    Vector<sp<BufferedTextOutput::BufferState> > states;$/;"	m	struct:android::BufferedTextOutput::ThreadState	file:
staticHandler	utils/tests/Looper_test.cpp	/^    static int staticHandler(int fd, int events, void* data) {$/;"	f	class:android::CallbackHandler	file:
static_libraries	utils/tests/Android.mk	/^static_libraries := \\$/;"	m
status_t	include/utils/Errors.h	/^typedef int         status_t;$/;"	t	namespace:android
stop	utils/Timers.cpp	/^void DurationTimer::stop(void)$/;"	f	class:DurationTimer
strcmp16	utils/Unicode.cpp	/^int strcmp16(const char16_t *s1, const char16_t *s2)$/;"	f
strcpy16	utils/Unicode.cpp	/^char16_t *strcpy16(char16_t *dst, const char16_t *src)$/;"	f
strcpy16_dtoh	utils/ResourceTypes.cpp	/^static void strcpy16_dtoh(uint16_t* dst, const uint16_t* src, size_t avail)$/;"	f	namespace:android
strcpy_ptr	utils/BackupHelpers.cpp	/^static char* strcpy_ptr(char* dest, const char* str) {$/;"	f	namespace:android
strdupNew	utils/misc.cpp	/^char* strdupNew(const char* str)$/;"	f	namespace:android
strictly_order_type	include/utils/String16.h	/^inline int strictly_order_type(const String16& lhs, const String16& rhs)$/;"	f	namespace:android
strictly_order_type	include/utils/String8.h	/^inline int strictly_order_type(const String8& lhs, const String8& rhs)$/;"	f	namespace:android
strictly_order_type	include/utils/TypeHelpers.h	/^int strictly_order_type(const TYPE& lhs, const TYPE& rhs) {$/;"	f	namespace:android
string	include/utils/String16.h	/^inline const char16_t* String16::string() const$/;"	f	class:android::String16
string	include/utils/String8.h	/^inline const char* String8::string() const$/;"	f	class:android::String8
string8At	utils/ResourceTypes.cpp	/^const char* ResStringPool::string8At(size_t idx, size_t* outLen) const$/;"	f	class:android::ResStringPool
stringAt	include/utils/ResourceTypes.h	/^    inline const char16_t* stringAt(const ResStringPool_ref& ref, size_t* outLen) const {$/;"	f	class:android::ResStringPool
stringAt	utils/ResourceTypes.cpp	/^const uint16_t* ResStringPool::stringAt(size_t idx, size_t* u16len) const$/;"	f	class:android::ResStringPool
stringBlock	include/utils/ResourceTypes.h	/^            ssize_t stringBlock;$/;"	m	struct:android::ResTable::Theme::theme_entry
stringBlock	include/utils/ResourceTypes.h	/^        ssize_t stringBlock;$/;"	m	struct:android::ResTable::bag_entry
stringCount	include/utils/ResourceTypes.h	/^    uint32_t stringCount;$/;"	m	struct:android::ResStringPool_header
stringForIndent	utils/Debug.cpp	/^const char* stringForIndent(int32_t indentLevel)$/;"	f	namespace:android
stringToFloat	utils/ResourceTypes.cpp	/^bool ResTable::stringToFloat(const char16_t* s, size_t len, Res_value* outValue)$/;"	f	class:android::ResTable
stringToInt	utils/ResourceTypes.cpp	/^bool ResTable::stringToInt(const char16_t* s, size_t len, Res_value* outValue)$/;"	f	class:android::ResTable
stringToValue	utils/ResourceTypes.cpp	/^bool ResTable::stringToValue(Res_value* outValue, String16* outString,$/;"	f	class:android::ResTable
stringsStart	include/utils/ResourceTypes.h	/^    uint32_t stringsStart;$/;"	m	struct:android::ResStringPool_header
strlen16	utils/Unicode.cpp	/^size_t strlen16(const char16_t *s)$/;"	f
strlen32	utils/Unicode.cpp	/^size_t strlen32(const char32_t *s)$/;"	f
strncmp16	utils/Unicode.cpp	/^int strncmp16(const char16_t *s1, const char16_t *s2, size_t n)$/;"	f
strncpy16	utils/Unicode.cpp	/^char16_t *strncpy16(char16_t *dst, const char16_t *src, size_t n)$/;"	f
strnlen16	utils/Unicode.cpp	/^size_t strnlen16(const char16_t *s, size_t maxlen)$/;"	f
strnlen32	utils/Unicode.cpp	/^size_t strnlen32(const char32_t *s, size_t maxlen)$/;"	f
strzcmp16	utils/Unicode.cpp	/^int strzcmp16(const char16_t *s1, size_t n1, const char16_t *s2, size_t n2)$/;"	f
strzcmp16_h_n	utils/Unicode.cpp	/^int strzcmp16_h_n(const char16_t *s1H, size_t n1, const char16_t *s2N, size_t n2)$/;"	f
styleAt	utils/ResourceTypes.cpp	/^const ResStringPool_span* ResStringPool::styleAt(const ResStringPool_ref& ref) const$/;"	f	class:android::ResStringPool
styleAt	utils/ResourceTypes.cpp	/^const ResStringPool_span* ResStringPool::styleAt(size_t idx) const$/;"	f	class:android::ResStringPool
styleCount	include/utils/ResourceTypes.h	/^    uint32_t styleCount;$/;"	m	struct:android::ResStringPool_header
styleIndex	include/utils/ResourceTypes.h	/^    uint16_t styleIndex;$/;"	m	struct:android::ResXMLTree_attrExt
stylesStart	include/utils/ResourceTypes.h	/^    uint32_t stylesStart;$/;"	m	struct:android::ResStringPool_header
subtractTimevals	utils/Timers.cpp	/^\/*static*\/ long long DurationTimer::subtractTimevals(const struct timeval* ptv1,$/;"	f	class:DurationTimer
swapHtoD	include/utils/ResourceTypes.h	/^    inline void swapHtoD() {$/;"	f	struct:android::ResTable_config
systemTime	utils/Timers.cpp	/^nsecs_t systemTime(int clock)$/;"	f
terminate_string16	utils/String16.cpp	/^void terminate_string16()$/;"	f	namespace:android
terminate_string8	utils/String8.cpp	/^void terminate_string8()$/;"	f	namespace:android
test_read_header_and_entity	utils/BackupHelpers.cpp	/^test_read_header_and_entity(BackupDataReader& reader, const char* str)$/;"	f	namespace:android
test_src_files	utils/tests/Android.mk	/^test_src_files := \\$/;"	m
test_write_header_and_entity	utils/BackupHelpers.cpp	/^test_write_header_and_entity(BackupDataWriter& writer, const char* str)$/;"	f	namespace:android
textOutputPrinter	utils/TextOutput.cpp	/^static void textOutputPrinter(void* cookie, const char* txt)$/;"	f	namespace:android
theme_entry	include/utils/ResourceTypes.h	/^        struct theme_entry {$/;"	s	class:android::ResTable::Theme
thisLap	include/utils/StopWatch.h	/^        nsecs_t     thisLap;$/;"	m	struct:android::StopWatch::lap_t
threadDestructor	utils/BufferedTextOutput.cpp	/^void BufferedTextOutput::threadDestructor(void *st)$/;"	f	class:android::BufferedTextOutput
threadDestructor	utils/Looper.cpp	/^void Looper::threadDestructor(void *st) {$/;"	f	class:android::Looper
threadLoop	utils/tests/TestHelpers.h	/^    virtual bool threadLoop() {$/;"	f	class:android::DelayedTask
threadName	utils/Threads.cpp	/^    char *          threadName;$/;"	m	struct:thread_data_t	file:
thread_data_t	utils/Threads.cpp	/^struct thread_data_t {$/;"	s	file:
thread_func_t	include/utils/threads.h	/^typedef android_thread_func_t thread_func_t;$/;"	t	namespace:android
thread_id_t	include/utils/threads.h	/^typedef android_thread_id_t thread_id_t;$/;"	t	namespace:android
tls	utils/BufferedTextOutput.cpp	/^static thread_store_t   tls;$/;"	m	namespace:android	file:
toLower	utils/String8.cpp	/^void String8::toLower()$/;"	f	class:android::String8
toLower	utils/String8.cpp	/^void String8::toLower(size_t start, size_t length)$/;"	f	class:android::String8
toMillisecondTimeoutDelay	utils/Timers.cpp	/^int toMillisecondTimeoutDelay(nsecs_t referenceTime, nsecs_t timeoutTime)$/;"	f
toString	include/utils/ResourceTypes.h	/^    String8 toString() const {$/;"	f	struct:android::ResTable_config
toString	utils/CallStack.cpp	/^String8 CallStack::toString(const char* prefix) const$/;"	f	class:android::CallStack
toStringSingleLevel	utils/CallStack.cpp	/^String8 CallStack::toStringSingleLevel(const char* prefix, int32_t level) const$/;"	f	class:android::CallStack
toUpper	utils/String8.cpp	/^void String8::toUpper()$/;"	f	class:android::String8
toUpper	utils/String8.cpp	/^void String8::toUpper(size_t start, size_t length)$/;"	f	class:android::String8
tolel	include/utils/ByteOrder.h	72;"	d
tolel	include/utils/ByteOrder.h	77;"	d
toles	include/utils/ByteOrder.h	73;"	d
toles	include/utils/ByteOrder.h	78;"	d
top	include/utils/SortedVector.h	/^const TYPE& SortedVector<TYPE>::top() const {$/;"	f	class:android::SortedVector
top	include/utils/Vector.h	/^const TYPE& Vector<TYPE>::top() const {$/;"	f	class:android::Vector
totalSize	include/utils/BackupHelpers.h	/^    int totalSize;$/;"	m	struct:android::SnapshotHeader
touchscreen	include/utils/ResourceTypes.h	/^            uint8_t touchscreen;$/;"	m	struct:android::ResTable_config::__anon48::__anon49
trace_function	utils/CallStack.cpp	/^_Unwind_Reason_Code trace_function(_Unwind_Context *context, void *arg)$/;"	f	namespace:android
trackMe	include/utils/RefBase.h	/^    inline  void            trackMe(bool enable, bool retain)$/;"	f	class:android::RefBase
trackMe	utils/RefBase.cpp	/^    void trackMe(bool track, bool retain)$/;"	f	class:android::RefBase::weakref_impl
trackMe	utils/RefBase.cpp	/^    void trackMe(bool, bool) { }$/;"	f	class:android::RefBase::weakref_impl
trackMe	utils/RefBase.cpp	/^void RefBase::weakref_type::trackMe(bool enable, bool retain)$/;"	f	class:android::RefBase::weakref_type
trait_pointer	include/utils/TypeHelpers.h	/^template <typename T> struct trait_pointer      { enum { value = false }; };    $/;"	s	namespace:android
trait_pointer	include/utils/TypeHelpers.h	/^template <typename T> struct trait_pointer<T*>  { enum { value = true }; };$/;"	s	namespace:android
trait_trivial_copy	include/utils/TypeHelpers.h	/^struct trait_trivial_copy< key_value_pair_t<K, V> >$/;"	s	namespace:android
trait_trivial_copy	include/utils/TypeHelpers.h	/^template <typename T> struct trait_trivial_copy { enum { value = false }; };$/;"	s	namespace:android
trait_trivial_ctor	include/utils/TypeHelpers.h	/^struct trait_trivial_ctor< key_value_pair_t<K, V> >$/;"	s	namespace:android
trait_trivial_ctor	include/utils/TypeHelpers.h	/^template <typename T> struct trait_trivial_ctor { enum { value = false }; };$/;"	s	namespace:android
trait_trivial_dtor	include/utils/TypeHelpers.h	/^struct trait_trivial_dtor< key_value_pair_t<K, V> >$/;"	s	namespace:android
trait_trivial_dtor	include/utils/TypeHelpers.h	/^template <typename T> struct trait_trivial_dtor { enum { value = false }; };$/;"	s	namespace:android
trait_trivial_move	include/utils/TypeHelpers.h	/^struct trait_trivial_move< key_value_pair_t<K, V> >$/;"	s	namespace:android
trait_trivial_move	include/utils/TypeHelpers.h	/^template <typename T> struct trait_trivial_move { enum { value = false }; };$/;"	s	namespace:android
traits	include/utils/TypeHelpers.h	/^struct traits {$/;"	s	namespace:android
trampoline	utils/Threads.cpp	/^    static int trampoline(const thread_data_t* t) {$/;"	f	struct:thread_data_t
tryGetProperty	utils/PropertyMap.cpp	/^bool PropertyMap::tryGetProperty(const String8& key, String8& outValue) const {$/;"	f	class:android::PropertyMap
tryGetProperty	utils/PropertyMap.cpp	/^bool PropertyMap::tryGetProperty(const String8& key, bool& outValue) const {$/;"	f	class:android::PropertyMap
tryGetProperty	utils/PropertyMap.cpp	/^bool PropertyMap::tryGetProperty(const String8& key, float& outValue) const {$/;"	f	class:android::PropertyMap
tryGetProperty	utils/PropertyMap.cpp	/^bool PropertyMap::tryGetProperty(const String8& key, int32_t& outValue) const {$/;"	f	class:android::PropertyMap
tryLock	include/utils/threads.h	/^inline status_t Mutex::tryLock() {$/;"	f	class:android::Mutex
tryReadLock	include/utils/threads.h	/^inline status_t RWLock::tryReadLock() {$/;"	f	class:android::RWLock
tryWriteLock	include/utils/threads.h	/^inline status_t RWLock::tryWriteLock() {$/;"	f	class:android::RWLock
type	include/utils/AssetManager.h	/^        FileType type;$/;"	m	struct:android::AssetManager::asset_path
type	include/utils/BackupHelpers.h	/^        int type;$/;"	m	union:android::BackupDataReader::__anon32
type	include/utils/BackupHelpers.h	/^    int type; \/\/ BACKUP_HEADER_ENTITY_V1$/;"	m	struct:android::__anon31
type	include/utils/ResourceTypes.h	/^        const char16_t* type;$/;"	m	struct:android::ResTable::resource_name
type	include/utils/ResourceTypes.h	/^    uint16_t type;$/;"	m	struct:android::ResChunk_header
type	utils/ResourceTypes.cpp	/^    uint8_t type;$/;"	m	struct:android::unit_entry	file:
typeCode	include/utils/TextOutput.h	/^inline uint32_t TypeCode::typeCode() const { return mCode; }$/;"	f	class:android::TypeCode
typeCount	utils/ResourceTypes.cpp	/^    size_t                          typeCount;$/;"	m	struct:android::ResTable::PackageGroup	file:
typeLen	include/utils/ResourceTypes.h	/^        size_t typeLen;$/;"	m	struct:android::ResTable::resource_name
typeSpec	utils/ResourceTypes.cpp	/^    const ResTable_typeSpec*        typeSpec;$/;"	m	struct:android::ResTable::Type	file:
typeSpecFlags	include/utils/ResourceTypes.h	/^            uint32_t typeSpecFlags;$/;"	m	struct:android::ResTable::Theme::theme_entry
typeSpecFlags	utils/ResourceTypes.cpp	/^    const uint32_t*                 typeSpecFlags;$/;"	m	struct:android::ResTable::Type	file:
typeSpecFlags	utils/ResourceTypes.cpp	/^    uint32_t typeSpecFlags;$/;"	m	struct:android::ResTable::bag_set	file:
typeStrings	include/utils/ResourceTypes.h	/^    uint32_t typeStrings;$/;"	m	struct:android::ResTable_package
typeStrings	utils/ResourceTypes.cpp	/^    ResStringPool                   typeStrings;$/;"	m	struct:android::ResTable::Package	file:
type_info	include/utils/ResourceTypes.h	/^        struct type_info {$/;"	s	class:android::ResTable::Theme
typedData	include/utils/ResourceTypes.h	/^    struct Res_value typedData;$/;"	m	struct:android::ResXMLTree_cdataExt	typeref:struct:android::ResXMLTree_cdataExt::Res_value
typedValue	include/utils/ResourceTypes.h	/^    struct Res_value typedValue;$/;"	m	struct:android::ResXMLTree_attribute	typeref:struct:android::ResXMLTree_attribute::Res_value
types	include/utils/ResourceTypes.h	/^            type_info types[];$/;"	m	struct:android::ResTable::Theme::package_info
types	utils/ResourceTypes.cpp	/^    Vector<Type*>                   types;$/;"	m	struct:android::ResTable::Package	file:
typetostring	utils/Debug.cpp	/^static char* typetostring(uint32_t type, char* out,$/;"	f	namespace:android
uiMode	include/utils/ResourceTypes.h	/^            uint8_t uiMode;$/;"	m	struct:android::ResTable_config::__anon66::__anon67
uncompressEntry	utils/ZipFileRO.cpp	/^bool ZipFileRO::uncompressEntry(ZipEntryRO entry, int fd) const$/;"	f	class:ZipFileRO
uncompressEntry	utils/ZipFileRO.cpp	/^bool ZipFileRO::uncompressEntry(ZipEntryRO entry, void* buffer) const$/;"	f	class:ZipFileRO
undefined_1	utils/BackupHelpers.cpp	/^    int undefined_1;$/;"	m	struct:android::file_metadata_v1	file:
undefined_2	utils/BackupHelpers.cpp	/^    int undefined_2;$/;"	m	struct:android::file_metadata_v1	file:
uninit	utils/ResourceTypes.cpp	/^void ResStringPool::uninit()$/;"	f	class:android::ResStringPool
uninit	utils/ResourceTypes.cpp	/^void ResTable::uninit()$/;"	f	class:android::ResTable
uninit	utils/ResourceTypes.cpp	/^void ResXMLTree::uninit()$/;"	f	class:android::ResXMLTree
unit	utils/ResourceTypes.cpp	/^    uint32_t unit;$/;"	m	struct:android::unit_entry	file:
unitNames	utils/ResourceTypes.cpp	/^static const unit_entry unitNames[] = {$/;"	m	namespace:android	file:
unit_entry	utils/ResourceTypes.cpp	/^struct unit_entry$/;"	s	namespace:android	file:
unlock	include/utils/threads.h	/^inline void Mutex::unlock() {$/;"	f	class:android::Mutex
unlock	include/utils/threads.h	/^inline void RWLock::unlock() {$/;"	f	class:android::RWLock
unlock	utils/ResourceTypes.cpp	/^void ResTable::unlock() const$/;"	f	class:android::ResTable
unlockBag	utils/ResourceTypes.cpp	/^void ResTable::unlockBag(const bag_entry* bag) const$/;"	f	class:android::ResTable
unlockBuffer	utils/String8.cpp	/^status_t String8::unlockBuffer(size_t size)$/;"	f	class:android::String8
unlockBuffer	utils/String8.cpp	/^void String8::unlockBuffer()$/;"	f	class:android::String8
unsafe_get	include/utils/RefBase.h	/^    inline  T* unsafe_get() const { return m_ptr; }$/;"	f	class:android::wp
update	utils/CallStack.cpp	/^void CallStack::update(int32_t ignoreDepth, int32_t maxDepth)$/;"	f	class:android::CallStack
updateResourceParamsLocked	utils/AssetManager.cpp	/^void AssetManager::updateResourceParamsLocked() const$/;"	f	class:AssetManager
uptime	include/utils/Looper.h	/^        nsecs_t uptime;$/;"	m	struct:android::Looper::MessageEnvelope
uptimeMillis	utils/SystemClock.cpp	/^int64_t uptimeMillis()$/;"	f	namespace:android
uri	include/utils/ResourceTypes.h	/^    struct ResStringPool_ref uri;$/;"	m	struct:android::ResXMLTree_namespaceExt	typeref:struct:android::ResXMLTree_namespaceExt::ResStringPool_ref
us2ns	include/utils/Timers.h	/^static inline nsecs_t us2ns(nsecs_t v) {return microseconds_to_nanoseconds(v);}$/;"	f
userData	utils/Threads.cpp	/^    void*           userData;$/;"	m	struct:thread_data_t	file:
utf16_to_utf8	utils/Unicode.cpp	/^void utf16_to_utf8(const char16_t* src, size_t src_len, char* dst)$/;"	f
utf16_to_utf8_length	utils/Unicode.cpp	/^ssize_t utf16_to_utf8_length(const char16_t *src, size_t src_len)$/;"	f
utf32_at_internal	utils/Unicode.cpp	/^static inline int32_t utf32_at_internal(const char* cur, size_t *num_read)$/;"	f	file:
utf32_codepoint_to_utf8	utils/Unicode.cpp	/^static inline void utf32_codepoint_to_utf8(uint8_t* dstP, char32_t srcChar, size_t bytes)$/;"	f	file:
utf32_codepoint_utf8_length	utils/Unicode.cpp	/^static inline size_t utf32_codepoint_utf8_length(char32_t srcChar)$/;"	f	file:
utf32_from_utf8_at	utils/Unicode.cpp	/^int32_t utf32_from_utf8_at(const char *src, size_t src_len, size_t index, size_t *next_index)$/;"	f
utf32_to_utf8	utils/Unicode.cpp	/^void utf32_to_utf8(const char32_t* src, size_t src_len, char* dst)$/;"	f
utf32_to_utf8_length	utils/Unicode.cpp	/^ssize_t utf32_to_utf8_length(const char32_t *src, size_t src_len)$/;"	f
utf8_codepoint_len	utils/Unicode.cpp	/^static inline size_t utf8_codepoint_len(uint8_t ch)$/;"	f	file:
utf8_length	utils/Unicode.cpp	/^ssize_t utf8_length(const char *src)$/;"	f
utf8_shift_and_mask	utils/Unicode.cpp	/^static inline void utf8_shift_and_mask(uint32_t* codePoint, const uint8_t byte)$/;"	f	file:
utf8_to_utf16	utils/Unicode.cpp	/^void utf8_to_utf16(const uint8_t* u8str, size_t u8len, char16_t* u16str) {$/;"	f
utf8_to_utf16_length	utils/Unicode.cpp	/^ssize_t utf8_to_utf16_length(const uint8_t* u8str, size_t u8len)$/;"	f
utf8_to_utf16_no_null_terminator	utils/Unicode.cpp	/^char16_t* utf8_to_utf16_no_null_terminator(const uint8_t* u8str, size_t u8len, char16_t* u16str)$/;"	f
utf8_to_utf32	utils/Unicode.cpp	/^void utf8_to_utf32(const char* src, size_t src_len, char32_t* dst)$/;"	f
utf8_to_utf32_codepoint	utils/Unicode.cpp	/^static inline uint32_t utf8_to_utf32_codepoint(const uint8_t *src, size_t length)$/;"	f	file:
utf8_to_utf32_length	utils/Unicode.cpp	/^size_t utf8_to_utf32_length(const char *src, size_t src_len)$/;"	f
validateNode	utils/ResourceTypes.cpp	/^status_t ResXMLTree::validateNode(const ResXMLTree_node* node) const$/;"	f	class:android::ResXMLTree
validate_chunk	utils/ResourceTypes.cpp	/^static status_t validate_chunk(const ResChunk_header* chunk,$/;"	f	namespace:android
value	include/utils/BitSet.h	/^    uint32_t value;$/;"	m	struct:android::BitSet32
value	include/utils/GenerationCache.h	/^    EntryValue value;$/;"	m	struct:android::Entry
value	include/utils/ResourceTypes.h	/^            Res_value value;$/;"	m	struct:android::ResTable::Theme::theme_entry
value	include/utils/ResourceTypes.h	/^    Res_value value;$/;"	m	struct:android::ResTable_map
value	include/utils/TypeHelpers.h	/^    VALUE   value;$/;"	m	struct:android::key_value_pair_t
value	include/utils/TypeHelpers.h	/^template <typename T> struct trait_pointer      { enum { value = false }; };    $/;"	e	enum:android::trait_pointer::__anon22
value	include/utils/TypeHelpers.h	/^template <typename T> struct trait_pointer<T*>  { enum { value = true }; };$/;"	e	enum:android::trait_pointer::__anon23
value	include/utils/TypeHelpers.h	/^template <typename T> struct trait_trivial_copy { enum { value = false }; };$/;"	e	enum:android::trait_trivial_copy::__anon20
value	include/utils/TypeHelpers.h	/^template <typename T> struct trait_trivial_ctor { enum { value = false }; };$/;"	e	enum:android::trait_trivial_ctor::__anon18
value	include/utils/TypeHelpers.h	/^template <typename T> struct trait_trivial_dtor { enum { value = false }; };$/;"	e	enum:android::trait_trivial_dtor::__anon19
value	include/utils/TypeHelpers.h	/^template <typename T> struct trait_trivial_move { enum { value = false }; };$/;"	e	enum:android::trait_trivial_move::__anon21
value	include/utils/TypeHelpers.h	/^{ enum { value = aggregate_traits<K,V>::has_trivial_copy }; };$/;"	e	enum:android::trait_trivial_copy::__anon28
value	include/utils/TypeHelpers.h	/^{ enum { value = aggregate_traits<K,V>::has_trivial_ctor }; };$/;"	e	enum:android::trait_trivial_ctor::__anon26
value	include/utils/TypeHelpers.h	/^{ enum { value = aggregate_traits<K,V>::has_trivial_dtor }; };$/;"	e	enum:android::trait_trivial_dtor::__anon27
value	include/utils/TypeHelpers.h	/^{ enum { value = aggregate_traits<K,V>::has_trivial_move }; };$/;"	e	enum:android::trait_trivial_move::__anon29
valueAt	include/utils/KeyedVector.h	/^const VALUE& KeyedVector<KEY,VALUE>::valueAt(size_t index) const {$/;"	f	class:android::KeyedVector
valueFor	include/utils/KeyedVector.h	/^const VALUE& DefaultKeyedVector<KEY,VALUE>::valueFor(const KEY& key) const {$/;"	f	class:android::DefaultKeyedVector
valueFor	include/utils/KeyedVector.h	/^const VALUE& KeyedVector<KEY,VALUE>::valueFor(const KEY& key) const {$/;"	f	class:android::KeyedVector
valueForBit	include/utils/BitSet.h	/^    static inline uint32_t valueForBit(uint32_t n) { return 0x80000000 >> n; }$/;"	f	struct:android::BitSet32
valueToString	utils/ResourceTypes.cpp	/^const char16_t* ResTable::valueToString($/;"	f	class:android::ResTable
value_type	include/utils/KeyedVector.h	/^    typedef VALUE  value_type;$/;"	t	class:android::KeyedVector
value_type	include/utils/SortedVector.h	/^            typedef TYPE    value_type;$/;"	t	class:android::SortedVector
value_type	include/utils/Vector.h	/^            typedef TYPE    value_type;$/;"	t	class:android::Vector
values	utils/ResourceTypes.cpp	/^    ResStringPool                   values;$/;"	m	struct:android::ResTable::Header	file:
version	include/utils/ResourceTypes.h	/^        uint32_t version;$/;"	m	union:android::ResTable_config::__anon62
version	utils/BackupHelpers.cpp	/^    int version;$/;"	m	struct:android::file_metadata_v1	file:
wait	include/utils/threads.h	/^inline status_t Condition::wait(Mutex& mutex) {$/;"	f	class:android::Condition
waitRelative	include/utils/threads.h	/^inline status_t Condition::waitRelative(Mutex& mutex, nsecs_t reltime) {$/;"	f	class:android::Condition
wake	utils/Looper.cpp	/^void Looper::wake() {$/;"	f	class:android::Looper
wakeAndLock	utils/Looper.cpp	/^void Looper::wakeAndLock() {$/;"	f	class:android::Looper
walkPath	utils/String8.cpp	/^String8 String8::walkPath(String8* outRemains) const$/;"	f	class:android::String8
wasDeserialized	include/utils/ResourceTypes.h	/^    int8_t wasDeserialized;$/;"	m	struct:android::Res_png_9patch
weakref_impl	utils/RefBase.cpp	/^    weakref_impl(RefBase* base)$/;"	f	class:android::RefBase::weakref_impl
weakref_impl	utils/RefBase.cpp	/^class RefBase::weakref_impl : public RefBase::weakref_type$/;"	c	class:android::RefBase	file:
weakref_type	include/utils/RefBase.h	/^    class weakref_type$/;"	c	class:android::RefBase
weakref_type	include/utils/RefBase.h	/^    typedef typename RefBase::weakref_type weakref_type;$/;"	t	class:android::wp
what	include/utils/Looper.h	/^    int what;$/;"	m	struct:android::Message
wp	include/utils/RefBase.h	/^    inline wp() : m_ptr(0) { }$/;"	f	class:android::wp
wp	include/utils/RefBase.h	/^class wp$/;"	c	namespace:android
writeLines	utils/Static.cpp	/^    virtual status_t writeLines(const struct iovec& vec, size_t N)$/;"	f	class:android::FdTextOutput
writeLines	utils/Static.cpp	/^    virtual status_t writeLines(const struct iovec& vec, size_t N)$/;"	f	class:android::LogTextOutput
writeLock	include/utils/threads.h	/^inline status_t RWLock::writeLock() {$/;"	f	class:android::RWLock
writeSignal	utils/tests/TestHelpers.h	/^    status_t writeSignal() {$/;"	f	class:android::Pipe
writeTo	utils/ObbFile.cpp	/^bool ObbFile::writeTo(const char* filename)$/;"	f	class:android::ObbFile
writeTo	utils/ObbFile.cpp	/^bool ObbFile::writeTo(int fd)$/;"	f	class:android::ObbFile
write_delete_file	utils/BackupHelpers.cpp	/^write_delete_file(BackupDataWriter* dataStream, const String8& key)$/;"	f	namespace:android
write_padding_for	utils/BackupData.cpp	/^BackupDataWriter::write_padding_for(int n)$/;"	f	class:android::BackupDataWriter
write_pax_header_entry	utils/BackupHelpers.cpp	/^static int write_pax_header_entry(char* buf, const char* key, const char* value) {$/;"	f	namespace:android
write_snapshot_file	utils/BackupHelpers.cpp	/^write_snapshot_file(int fd, const KeyedVector<String8,FileRec>& snapshot)$/;"	f	namespace:android
write_tarfile	utils/BackupHelpers.cpp	/^int write_tarfile(const String8& packageName, const String8& domain,$/;"	f	namespace:android
write_text_file	utils/BackupHelpers.cpp	/^write_text_file(const char* path, const char* data)$/;"	f	namespace:android
write_update_file	utils/BackupHelpers.cpp	/^write_update_file(BackupDataWriter* dataStream, const String8& key, char const* realFilename)$/;"	f	namespace:android
write_update_file	utils/BackupHelpers.cpp	/^write_update_file(BackupDataWriter* dataStream, int fd, int mode, const String8& key,$/;"	f	namespace:android
xDivs	include/utils/ResourceTypes.h	/^    int32_t* xDivs;$/;"	m	struct:android::Res_png_9patch
yDivs	include/utils/ResourceTypes.h	/^    int32_t* yDivs;$/;"	m	struct:android::Res_png_9patch
zipTimeToTimespec	include/utils/ZipFileRO.h	/^    static inline void zipTimeToTimespec(long when, struct tm* timespec) {$/;"	f	class:android::ZipFileRO
~Accessor	include/utils/ResourceTypes.h	/^        inline virtual ~Accessor() { }$/;"	f	class:android::ResTable::Accessor
~Asset	utils/Asset.cpp	/^Asset::~Asset(void)$/;"	f	class:Asset
~AssetDir	include/utils/AssetDir.h	/^    virtual ~AssetDir(void) {$/;"	f	class:android::AssetDir
~AssetManager	utils/AssetManager.cpp	/^AssetManager::~AssetManager(void)$/;"	f	class:AssetManager
~AutoRLock	include/utils/threads.h	/^        inline ~AutoRLock() { mLock.unlock(); }$/;"	f	class:android::RWLock::AutoRLock
~AutoWLock	include/utils/threads.h	/^        inline ~AutoWLock() { mLock.unlock(); }$/;"	f	class:android::RWLock::AutoWLock
~Autolock	include/utils/threads.h	/^        inline ~Autolock() { mLock.unlock(); }$/;"	f	class:android::Mutex::Autolock
~BackupDataReader	utils/BackupData.cpp	/^BackupDataReader::~BackupDataReader()$/;"	f	class:android::BackupDataReader
~BackupDataWriter	utils/BackupData.cpp	/^BackupDataWriter::~BackupDataWriter()$/;"	f	class:android::BackupDataWriter
~Blob	utils/BlobCache.cpp	/^BlobCache::Blob::~Blob() {$/;"	f	class:android::BlobCache::Blob
~BufferState	utils/BufferedTextOutput.cpp	/^    ~BufferState() {$/;"	f	struct:android::BufferedTextOutput::BufferState
~BufferedTextOutput	utils/BufferedTextOutput.cpp	/^BufferedTextOutput::~BufferedTextOutput()$/;"	f	class:android::BufferedTextOutput
~Bundle	include/utils/TextOutput.h	/^        inline ~Bundle() { mTO.popBundle(); }$/;"	f	class:android::TextOutput::Bundle
~CallStack	utils/CallStack.cpp	/^CallStack::~CallStack()$/;"	f	class:android::CallStack
~CallbackHandler	utils/tests/Looper_test.cpp	/^    virtual ~CallbackHandler() { }$/;"	f	class:android::CallbackHandler
~Condition	include/utils/threads.h	/^inline Condition::~Condition() {$/;"	f	class:android::Condition
~DelayedTask	utils/tests/TestHelpers.h	/^    virtual ~DelayedTask() { }$/;"	f	class:android::DelayedTask
~DurationTimer	include/utils/Timers.h	/^    ~DurationTimer() {}$/;"	f	class:android::DurationTimer
~FdTextOutput	utils/Static.cpp	/^    virtual ~FdTextOutput() { };$/;"	f	class:android::FdTextOutput
~FileInfo	include/utils/AssetDir.h	/^        ~FileInfo(void) {}$/;"	f	class:android::AssetDir::FileInfo
~FileMap	utils/FileMap.cpp	/^FileMap::~FileMap(void)$/;"	f	class:FileMap
~Flattenable	utils/Flattenable.cpp	/^Flattenable::~Flattenable() {$/;"	f	class:android::Flattenable
~Functor	include/utils/Functor.h	/^    virtual ~Functor() {}$/;"	f	class:android::Functor
~GenerationCache	include/utils/GenerationCache.h	/^GenerationCache<K, V>::~GenerationCache() {$/;"	f	class:android::GenerationCache
~Header	utils/ResourceTypes.cpp	/^    ~Header()$/;"	f	struct:android::ResTable::Header
~HexDump	include/utils/TextOutput.h	/^inline HexDump::~HexDump() { }$/;"	f	class:android::HexDump
~LibUtilsFirstStatics	utils/Static.cpp	/^    ~LibUtilsFirstStatics()$/;"	f	class:android::LibUtilsFirstStatics
~LightRefBase	include/utils/RefBase.h	/^    inline ~LightRefBase() { }$/;"	f	class:android::LightRefBase
~List	include/utils/List.h	/^    virtual ~List() {$/;"	f	class:android::List
~LogTextOutput	utils/Static.cpp	/^    virtual ~LogTextOutput() { };$/;"	f	class:android::LogTextOutput
~Looper	utils/Looper.cpp	/^Looper::~Looper() {$/;"	f	class:android::Looper
~MapInfo	utils/CallStack.cpp	/^    ~MapInfo() {$/;"	f	class:android::MapInfo
~MessageHandler	include/utils/Looper.h	/^    virtual ~MessageHandler() { }$/;"	f	class:android::MessageHandler
~Mutex	include/utils/threads.h	/^inline Mutex::~Mutex() {$/;"	f	class:android::Mutex
~ObbFile	utils/ObbFile.cpp	/^ObbFile::~ObbFile() {$/;"	f	class:android::ObbFile
~OnEntryRemoved	include/utils/GenerationCache.h	/^    virtual ~OnEntryRemoved() { };$/;"	f	class:android::OnEntryRemoved
~Package	utils/ResourceTypes.cpp	/^    ~Package()$/;"	f	struct:android::ResTable::Package
~PackageGroup	utils/ResourceTypes.cpp	/^    ~PackageGroup() {$/;"	f	struct:android::ResTable::PackageGroup
~Parser	utils/PropertyMap.cpp	/^PropertyMap::Parser::~Parser() {$/;"	f	class:android::PropertyMap::Parser
~Pipe	utils/tests/TestHelpers.h	/^    ~Pipe() {$/;"	f	class:android::Pipe
~PropertyMap	utils/PropertyMap.cpp	/^PropertyMap::~PropertyMap() {$/;"	f	class:android::PropertyMap
~RWLock	include/utils/threads.h	/^inline RWLock::~RWLock() {$/;"	f	class:android::RWLock
~RefBase	utils/RefBase.cpp	/^RefBase::~RefBase()$/;"	f	class:android::RefBase
~ReferenceConverterBase	include/utils/RefBase.h	/^    inline virtual ~ReferenceConverterBase() { }$/;"	f	class:android::ReferenceConverterBase
~ResStringPool	utils/ResourceTypes.cpp	/^ResStringPool::~ResStringPool()$/;"	f	class:android::ResStringPool
~ResTable	utils/ResourceTypes.cpp	/^ResTable::~ResTable()$/;"	f	class:android::ResTable
~ResXMLTree	utils/ResourceTypes.cpp	/^ResXMLTree::~ResXMLTree()$/;"	f	class:android::ResXMLTree
~RestoreHelperBase	utils/BackupHelpers.cpp	/^RestoreHelperBase::~RestoreHelperBase()$/;"	f	class:android::RestoreHelperBase
~SharedBuffer	include/utils/SharedBuffer.h	/^        inline ~SharedBuffer() { }$/;"	f	class:android::SharedBuffer
~SharedZip	utils/AssetManager.cpp	/^AssetManager::SharedZip::~SharedZip()$/;"	f	class:AssetManager::SharedZip
~Singleton	include/utils/Singleton.h	/^    ~Singleton() { };$/;"	f	class:android::Singleton
~SortedVector	include/utils/SortedVector.h	/^SortedVector<TYPE>::~SortedVector() {$/;"	f	class:android::SortedVector
~SortedVectorImpl	utils/VectorImpl.cpp	/^SortedVectorImpl::~SortedVectorImpl()$/;"	f	class:android::SortedVectorImpl
~StopWatch	utils/StopWatch.cpp	/^StopWatch::~StopWatch()$/;"	f	class:android::StopWatch
~StreamingZipInflater	utils/StreamingZipInflater.cpp	/^StreamingZipInflater::~StreamingZipInflater() {$/;"	f	class:StreamingZipInflater
~String16	utils/String16.cpp	/^String16::~String16()$/;"	f	class:android::String16
~String8	utils/String8.cpp	/^String8::~String8()$/;"	f	class:android::String8
~StringArray	utils/StringArray.cpp	/^StringArray:: ~StringArray() {$/;"	f	class:android::StringArray
~TextOutput	utils/TextOutput.cpp	/^TextOutput::~TextOutput() { $/;"	f	class:android::TextOutput
~Theme	utils/ResourceTypes.cpp	/^ResTable::Theme::~Theme()$/;"	f	class:android::ResTable::Theme
~Thread	utils/Threads.cpp	/^Thread::~Thread()$/;"	f	class:android::Thread
~Tokenizer	utils/Tokenizer.cpp	/^Tokenizer::~Tokenizer() {$/;"	f	class:android::Tokenizer
~TypeCode	include/utils/TextOutput.h	/^inline TypeCode::~TypeCode() { }$/;"	f	class:android::TypeCode
~Vector	include/utils/Vector.h	/^Vector<TYPE>::~Vector() {$/;"	f	class:android::Vector
~VectorImpl	utils/VectorImpl.cpp	/^VectorImpl::~VectorImpl()$/;"	f	class:android::VectorImpl
~ZipFileRO	utils/ZipFileRO.cpp	/^ZipFileRO::~ZipFileRO() {$/;"	f	class:ZipFileRO
~ZipSet	utils/AssetManager.cpp	/^AssetManager::ZipSet::~ZipSet(void)$/;"	f	class:AssetManager::ZipSet
~ZipUtils	include/utils/ZipUtils.h	/^    ~ZipUtils() {}$/;"	f	class:android::ZipUtils
~_CompressedAsset	utils/Asset.cpp	/^_CompressedAsset::~_CompressedAsset(void)$/;"	f	class:_CompressedAsset
~_FileAsset	utils/Asset.cpp	/^_FileAsset::~_FileAsset(void)$/;"	f	class:_FileAsset
~_ListIterator	include/utils/List.h	/^        ~_ListIterator() {}$/;"	f	class:android::List::_ListIterator
~_Node	include/utils/List.h	/^        ~_Node() {}$/;"	f	class:android::List::_Node
~sp	include/utils/StrongPointer.h	/^sp<T>::~sp()$/;"	f	class:android::sp
~weakref_impl	utils/RefBase.cpp	/^    ~weakref_impl()$/;"	f	class:android::RefBase::weakref_impl
